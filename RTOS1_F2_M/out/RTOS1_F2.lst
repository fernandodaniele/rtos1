
misProgramas/RTOS1_F2/out/RTOS1_F2.elf:     file format elf32-littlearm
misProgramas/RTOS1_F2/out/RTOS1_F2.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001119

Program Header:
0x70000001 off    0x0001b400 vaddr 0x1a00b400 paddr 0x1a00b400 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002bec flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000b408 memsz 0x0000b408 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00b408 align 2**16
         filesz 0x000009ec memsz 0x000009ec flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b3fc  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009ec  10000000  1a00b408  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209ec  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209ec  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209ec  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209ec  2**2
                  CONTENTS
  6 .bss          00002200  100009ec  100009ec  000009ec  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209ec  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209ec  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209ec  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209ec  2**2
                  CONTENTS
 11 .init_array   00000004  1a00b3fc  1a00b3fc  0001b3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00b400  1a00b400  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209ec  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209ec  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209ec  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209ec  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209ec  2**2
                  CONTENTS
 18 .noinit       00000000  10002bec  10002bec  000209ec  2**2
                  CONTENTS
 19 .debug_info   0001f9f1  00000000  00000000  000209ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004677  00000000  00000000  000403dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000f50  00000000  00000000  00044a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000db8  00000000  00000000  000459a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000e9ea  00000000  00000000  0004675c  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000134b6  00000000  00000000  00055146  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    000305f4  00000000  00000000  000685fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  00098bf0  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  00098c58  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00004c08  00000000  00000000  00098c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100009ec l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00b3fc l    d  .init_array	00000000 .init_array
1a00b400 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002bec l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 keys.c
1a000300 l     F .text	0000003c __NVIC_EnableIRQ
1a00033c l     F .text	00000054 __NVIC_SetPriority
1a000390 l     F .text	00000074 Chip_SCU_GPIOIntPinSel
1a000404 l     F .text	00000014 Chip_PININT_Init
1a000418 l     F .text	00000024 Chip_PININT_SetPinModeEdge
1a00043c l     F .text	0000001c Chip_PININT_EnableIntHigh
1a000458 l     F .text	0000001c Chip_PININT_EnableIntLow
1a000474 l     F .text	00000018 Chip_PININT_GetRiseStates
1a00048c l     F .text	00000018 Chip_PININT_GetFallStates
1a0004a4 l     F .text	0000001c Chip_PININT_ClearIntStatus
1a000998 l     F .text	00000154 keys_isr_config
1a00084c l     F .text	00000038 buttonPressed
1a000884 l     F .text	0000008c buttonReleased
1a000910 l     F .text	00000030 keys_ButtonError
00000000 l    df *ABS*	00000000 F2.c
00000000 l    df *ABS*	00000000 system.c
100009ec l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 heap_1.c
100009f0 l     O .bss	00002000 ucHeap
100029f0 l     O .bss	00000004 xNextFreeByte
100029f4 l     O .bss	00000004 pucAlignedHeap.11506
00000000 l    df *ABS*	00000000 queue.c
1a00157a l     F .text	0000003e prvInitialiseNewQueue
1a001aa4 l     F .text	000000d4 prvCopyDataToQueue
1a001c48 l     F .text	00000030 prvIsQueueFull
1a001b78 l     F .text	000000a4 prvUnlockQueue
1a001c1c l     F .text	0000002c prvIsQueueEmpty
1a001a74 l     F .text	00000030 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
100029fc l     O .bss	0000008c pxReadyTasksLists
10002a88 l     O .bss	00000014 xDelayedTaskList1
10002a9c l     O .bss	00000014 xDelayedTaskList2
10002ab0 l     O .bss	00000004 pxDelayedTaskList
10002ab4 l     O .bss	00000004 pxOverflowDelayedTaskList
10002ab8 l     O .bss	00000014 xPendingReadyList
10002acc l     O .bss	00000014 xTasksWaitingTermination
10002ae0 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002ae4 l     O .bss	00000004 uxCurrentNumberOfTasks
10002ae8 l     O .bss	00000004 xTickCount
10002aec l     O .bss	00000004 uxTopReadyPriority
10002af0 l     O .bss	00000004 xSchedulerRunning
10002af4 l     O .bss	00000004 uxPendedTicks
10002af8 l     O .bss	00000004 xYieldPending
10002afc l     O .bss	00000004 xNumOfOverflows
10002b00 l     O .bss	00000004 uxTaskNumber
10002b04 l     O .bss	00000004 xNextTaskUnblockTime
10002b08 l     O .bss	00000004 xIdleTaskHandle
10002b0c l     O .bss	00000004 uxSchedulerSuspended
1a001ece l     F .text	00000112 prvInitialiseNewTask
1a001fe0 l     F .text	000000d4 prvAddNewTaskToReadyList
1a0028dc l     F .text	00000074 prvInitialiseTaskLists
1a0029a8 l     F .text	00000020 prvDeleteTCB
1a0029c8 l     F .text	0000004c prvResetNextTaskUnblockTime
1a002d8c l     F .text	000000a8 prvAddCurrentTaskToDelayedList
1a0028ac l     F .text	00000030 prvIdleTask
1a002950 l     F .text	00000058 prvCheckTasksWaitingTermination
00000000 l    df *ABS*	00000000 port.c
10000000 l     O .data	00000004 uxCriticalNesting
10002b10 l     O .bss	00000001 ucMaxSysCallPriority
10002b14 l     O .bss	00000004 ulMaxPRIGROUPValue
1a002e9c l     F .text	00000054 prvTaskExitError
1a002f10 l       .text	00000000 pxCurrentTCBConst2
1a002f18 l     F .text	00000024 prvPortStartFirstTask
1a003240 l     F .text	00000010 vPortEnableVFP
1a0031b0 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 freertos_cm_support.c
1a0032d0 l     F .text	0000003c __NVIC_ClearPendingIRQ
00000000 l    df *ABS*	00000000 board.c
1a00332c l     F .text	00000020 Chip_SCU_I2C0PinConfig
1a00334c l     F .text	00000038 Chip_GPIO_SetPinState
1a003384 l     F .text	0000003e Chip_GPIO_SetPinDIROutput
1a0033c2 l     F .text	00000040 Chip_GPIO_SetPinDIRInput
1a003402 l     F .text	00000020 Chip_SSP_Enable
1a003422 l     F .text	00000032 Chip_SSP_SetFormat
1a003454 l     F .text	00000026 Chip_SSP_Set_Mode
1a00347a l     F .text	0000001a Chip_UART_TXEnable
1a003494 l     F .text	0000001e Chip_UART_SendByte
1a0034b2 l     F .text	0000001a Chip_UART_ReadByte
1a0034cc l     F .text	0000001c Chip_UART_ConfigData
1a0034e8 l     F .text	00000018 Chip_UART_ReadLineStatus
1a00af18 l     O .text	0000000c GpioLeds
1a00af24 l     O .text	00000008 GpioButtons
1a00af2c l     O .text	00000012 GpioPorts
1a003500 l     F .text	00000054 Board_LED_Init
1a003554 l     F .text	00000044 Board_TEC_Init
1a003598 l     F .text	00000044 Board_GPIO_Init
1a0035dc l     F .text	00000024 Board_I2C_Init
1a003600 l     F .text	00000038 Board_SPI_Init
1a003638 l     F .text	00000038 Board_ADC_Init
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003764 l     F .text	00000034 Chip_SCU_PinMuxSet
1a003798 l     F .text	0000004a Chip_SCU_SetPinMuxing
1a0037e4 l     F .text	00000054 Chip_CREG_SetFlashAcceleration
1a00af40 l     O .text	00000004 InitClkStates
1a00af44 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
1a0038d0 l     F .text	00000030 enableClk
1a003900 l     F .text	00000030 getClkRate
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003a18 l     F .text	0000001a Chip_UART_TXDisable
1a003a32 l     F .text	0000001c Chip_UART_SetupFIFOS
1a003a4e l     F .text	0000001c Chip_UART_ConfigData
1a003a6a l     F .text	00000020 Chip_UART_EnableDivisorAccess
1a003a8a l     F .text	00000020 Chip_UART_DisableDivisorAccess
1a003aaa l     F .text	00000028 Chip_UART_SetDivisorLatches
1a00afb8 l     O .text	00000008 UART_PClock
1a00afc0 l     O .text	00000008 UART_BClock
1a003ad4 l     F .text	00000068 Chip_UART_GetIndex
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003d30 l     F .text	00000010 getFullConvClk
1a003d40 l     F .text	0000002c Chip_ADC_GetClockIndex
1a003d6c l     F .text	00000066 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00afc8 l     O .text	0000006c periph_to_base
10002b1c l     O .bss	00000008 audio_usb_pll_freq
1a003f04 l     F .text	00000022 ABS
1a003f28 l     F .text	00000124 pll_calc_divs
1a00404c l     F .text	00000180 pll_get_frac
1a0041cc l     F .text	00000040 Chip_Clock_GetDivRate
1a00420c l     F .text	00000090 Chip_Clock_FindBaseClock
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0048e0 l     F .text	00000020 Chip_Clock_DisableMainPLL
1a004900 l     F .text	00000048 Chip_Clock_SetupMainPLL
1a004948 l     F .text	00000024 Chip_Clock_MainPLLLocked
1a00b040 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a004ab4 l     F .text	00000032 Chip_SSP_SetFormat
1a004ae6 l     F .text	00000026 Chip_SSP_Set_Mode
1a004b0c l     F .text	0000002c Chip_SSP_GetClockIndex
1a004b38 l     F .text	00000030 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
1a004c60 l     F .text	0000002c SCB_GetFPUType
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a004cf4 l     F .text	00000034 Chip_SCU_PinMuxSet
1a004d28 l     F .text	0000003a Chip_SCU_PinMux
1a004d62 l     F .text	00000038 Chip_GPIO_SetPinState
1a004d9a l     F .text	00000034 Chip_GPIO_ReadPortBit
1a004dce l     F .text	00000062 Chip_GPIO_SetDir
1a004e30 l     F .text	00000098 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b24 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0060b0 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a0089b4 l     F .text	00000084 __sbprintf
1a00b2bc l     O .text	00000010 blanks.8693
1a00b2cc l     O .text	00000010 zeroes.8694
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a008b08 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a00b3e0 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a00aa60 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000048 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a00b400 l       .init_array	00000000 __init_array_end
1a00b3fc l       .bss_RAM5	00000000 __preinit_array_end
1a00b3fc l       .init_array	00000000 __init_array_start
1a00b3fc l       .bss_RAM5	00000000 __preinit_array_start
1a00ad88 g     F .text	0000002c .hidden __aeabi_dcmpun
1a0044a4 g     F .text	00000040 Chip_Clock_GetDividerSource
1a001226 g     F .text	0000002a _isatty_r
1a005aa8 g     F .text	00000012 .hidden __aeabi_dcmple
1a006c34 g     F .text	0000009c _puts_r
1a00022a  w    F .text	00000006 TIMER2_IRQHandler
1a0059e4 g     F .text	0000007a .hidden __cmpdf2
1a001250 g     F .text	00000024 _lseek_r
1a000218  w    F .text	00000006 DebugMon_Handler
1a00022a  w    F .text	00000006 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0059e4 g     F .text	0000007a .hidden __eqdf2
1a00022a  w    F .text	00000006 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00022a  w    F .text	00000006 FLASH_EEPROM_IRQHandler
1a0030f8 g     F .text	00000050 vPortExitCritical
1a005554 g     F .text	0000005a .hidden __floatdidf
1a00022a  w    F .text	00000006 I2C0_IRQHandler
1a006c0c g     F .text	00000028 printf
1a003758 g     F .text	0000000c __stdio_init
10002bc8 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00ad38 g     F .text	00000034 _wcrtomb_r
10002b5c g     O .bss	00000004 isr_signal
1a006d44 g     F .text	00000020 __sseek
1a00610c g     F .text	00000054 __sinit
1a00ac88 g     F .text	000000b0 __swbuf_r
1a0001fa  w    F .text	00000006 HardFault_Handler
1a001018 g     F .text	00000058 task_led3
1a000000 g       *ABS*	00000000 __vectors_start__
1a003ec0 g     F .text	0000002a Chip_ADC_SetResolution
1a006c00 g     F .text	0000000c __malloc_unlock
1a0031b8 g     F .text	00000040 SysTick_Handler
10002bcc g     O .bss	00000001 __lock___arc4random_mutex
1a0010ec  w    F .text	0000000e initialise_monitor_handles
1a00022a  w    F .text	00000006 SDIO_IRQHandler
1a0036d0 g     F .text	0000002c Board_UARTGetChar
1a00022a  w    F .text	00000006 ATIMER_IRQHandler
1a009f30 g     F .text	000000ce memmove
1a003150 g     F .text	00000066 PendSV_Handler
1a0001f4  w    F .text	00000006 NMI_Handler
1a00a000 g     F .text	0000004c _Balloc
1a00b408 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00022a  w    F .text	00000006 I2C1_IRQHandler
1a00022a  w    F .text	00000006 UART1_IRQHandler
1a0059d4 g     F .text	0000008a .hidden __gtdf2
1a000d6c g     F .text	00000060 GPIO5_IRQHandler
1a00022a  w    F .text	00000006 CAN1_IRQHandler
100029f8 g     O .bss	00000004 pxCurrentTCB
1a001204 g     F .text	00000022 _fstat_r
53ff64e2 g       *ABS*	00000000 __valid_user_code_checksum
1a00b408 g       .ARM.exidx	00000000 _etext
1a00adb4 g     O .text	00000004 keys_config
1a005a70 g     F .text	00000010 .hidden __aeabi_cdcmple
1a00022a  w    F .text	00000006 USB1_IRQHandler
1a00022a  w    F .text	00000006 I2S0_IRQHandler
1a0027b8 g     F .text	0000002c vTaskInternalSetTimeOutState
1a00022a  w    F .text	00000006 TIMER3_IRQHandler
1a00465c g     F .text	00000024 Chip_Clock_GetBaseClocktHz
1a00022a  w    F .text	00000006 UART0_IRQHandler
1a0001bc g     F .text	00000038 bss_init
1a002f40 g     F .text	0000015c xPortStartScheduler
1a006a20 g     F .text	00000134 memcpy
1a0026ac g     F .text	00000048 vTaskPlaceOnEventList
1a005a60 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a00022a  w    F .text	00000006 SGPIO_IRQHandler
1a006100 g     F .text	0000000c _cleanup_r
1a0054dc g     F .text	00000022 .hidden __floatsidf
1a0031f8  w    F .text	00000048 vPortSetupTimerInterrupt
1a0059dc g     F .text	00000082 .hidden __ltdf2
1a000718 g     F .text	00000134 keys_Update_Isr
1a005b34 g     F .text	00000000 .hidden __aeabi_uldivmod
10002bec g       .noinit	00000000 _noinit
1a006cd0 g     F .text	00000010 puts
1a001408 g     F .text	0000002e vPortFree
10002bc0 g     O .bss	00000004 SystemCoreClock
1a003b3c g     F .text	00000088 Chip_UART_Init
1a001894 g     F .text	000001e0 xQueueSemaphoreTake
1a00022a  w    F .text	00000006 ADC0_IRQHandler
1a003254 g     F .text	0000007c vPortValidateInterruptPriority
1a00b318 g     O .text	000000c8 __mprec_tens
1a00020c  w    F .text	00000006 UsageFault_Handler
1a004844 g     F .text	00000088 Chip_Clock_GetRate
1a001cd2 g     F .text	00000048 vListInsertEnd
1a000dcc g     F .text	00000060 GPIO6_IRQHandler
10002b58 g     O .bss	00000004 __malloc_top_pad
1a00384c g     F .text	00000074 Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0054bc g     F .text	0000001e .hidden __aeabi_ui2d
1a009d8c g     F .text	00000008 _localeconv_r
1a00a18c g     F .text	00000012 __i2b
1a009a84 g     F .text	00000308 __sfvwrite_r
1a005b64 g     F .text	000002d0 .hidden __udivmoddi4
1a005238 g     F .text	00000000 .hidden __aeabi_drsub
1a001334 g     F .text	00000040 _sbrk_r
1a00af10 g     O .text	00000004 ExtRateIn
1a00022a  w    F .text	00000006 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001274 g     F .text	00000072 _read_r
1a000b3c g     F .text	00000050 keys_isr_rise
1a001cb8 g     F .text	0000001a vListInitialiseItem
1a005a94 g     F .text	00000012 .hidden __aeabi_dcmplt
1a005e38 g     F .text	000000ce _fclose_r
1a000bec g     F .text	00000060 GPIO1_IRQHandler
10002b50 g     O .bss	00000004 __malloc_max_sbrked_mem
1a005500 g     F .text	00000042 .hidden __extendsfdf2
1a005804 g     F .text	000001d0 .hidden __aeabi_ddiv
1a00022a  w    F .text	00000006 SSP0_IRQHandler
1a005244 g     F .text	00000276 .hidden __adddf3
1a00b400 g       .ARM.exidx	00000000 __exidx_start
10002bd0 g     O .bss	00000001 __lock___env_recursive_mutex
1a0055b0 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10002bd4 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a00a614 g     F .text	0000036c _realloc_r
1a006458 g     F .text	00000048 __libc_init_array
1a00abec g     F .text	00000064 _fputwc_r
1a00b2f0 g     O .text	00000028 __mprec_bigtens
1a0054bc g     F .text	0000001e .hidden __floatunsidf
1a00022a  w    F .text	00000006 ADC1_IRQHandler
1a00a424 g     F .text	00000038 __mcmp
1a001374 g     F .text	00000094 pvPortMalloc
1a0036fc g     F .text	00000034 Board_Init
1a001108  w    F .text	0000000e _init
1a001c78 g     F .text	00000040 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0023f0 g     F .text	00000020 xTaskGetTickCount
1a0015b8 g     F .text	000001c8 xQueueGenericSend
1a00022a  w    F .text	00000006 RTC_IRQHandler
10002bec g       .bss	00000000 _ebss
1a00022a  w    F .text	00000006 TIMER0_IRQHandler
1a000982 g     F .text	00000016 task_tecla4
1a001118 g     F .text	000000cc Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00022a  w    F .text	00000006 SPI_IRQHandler
1a00a0ec g     F .text	00000040 __hi0bits
1a0039b0 g     F .text	00000068 Chip_I2C_SetClockRate
1a005ae4 g     F .text	0000004e .hidden __fixdfsi
1a002b20 g     F .text	00000108 xTaskPriorityDisinherit
1a00022a  w    F .text	00000006 LCD_IRQHandler
1a00429c g     F .text	00000070 Chip_Clock_EnableCrystal
10002bd8 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0026f4 g     F .text	000000c4 xTaskRemoveFromEventList
1a0010c8 g     F .text	00000024 vApplicationMallocFailedHook
1a005244 g     F .text	00000276 .hidden __aeabi_dadd
1a000178 g     F .text	00000044 data_init
1a0059dc g     F .text	00000082 .hidden __ledf2
1a00a2d0 g     F .text	000000a0 __pow5mult
1a005544 g     F .text	0000006a .hidden __aeabi_ul2d
1a00022a  w    F .text	00000006 TIMER1_IRQHandler
1a00397c g     F .text	00000034 Chip_I2C_Init
1a000530 g     F .text	000001e8 keys_Init
1a0064ac g     F .text	00000002 __retarget_lock_release_recursive
1a00022a  w    F .text	00000006 UART2_IRQHandler
1a0043e4 g     F .text	000000c0 Chip_Clock_GetMainPLLHz
1a00b088 g     O .text	000000e6 gpioPinsInit
1a001de0  w    F .text	00000040 vAssertCalled
1a002d64 g     F .text	00000028 pvTaskIncrementMutexHeldCount
1a004b68 g     F .text	00000036 Chip_SSP_SetClockRate
1a005ad0 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a000c4c g     F .text	00000060 GPIO2_IRQHandler
1a006160 g     F .text	0000000c __sfp_lock_acquire
1a009e90 g     F .text	00000000 memchr
1a0027e4 g     F .text	000000b0 xTaskCheckForTimeOut
1a006218 g     F .text	000001ec _free_r
1a00471c g     F .text	0000004c Chip_Clock_GetBaseClock
1a002a14 g     F .text	0000010c xTaskPriorityInherit
1a00ac50 g     F .text	0000000c __locale_mb_cur_max
1a005abc g     F .text	00000012 .hidden __aeabi_dcmpge
100009ec g       .bss	00000000 _bss
1a003e5c g     F .text	00000064 Chip_ADC_SetSampleRate
1a005240 g     F .text	0000027a .hidden __aeabi_dsub
10000878 g     O .data	00000004 __malloc_sbrk_base
10002b18 g     O .bss	00000004 freeRtosInterruptCallback
1a00229c g     F .text	0000001c vTaskSuspendAll
1a002410 g     F .text	00000024 xTaskGetTickCountFromISR
1a005544 g     F .text	0000006a .hidden __floatundidf
1a00a370 g     F .text	000000b2 __lshift
1a00022a  w    F .text	00000006 I2S1_IRQHandler
1a004b9e g     F .text	00000074 Chip_SSP_SetBitRate
1a001d8c g     F .text	00000054 uxListRemove
1a0048cc g     F .text	00000014 Chip_GPIO_Init
1a00af14 g     O .text	00000004 OscRateIn
1a00a1a0 g     F .text	00000130 __multiply
10002bec g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00a9ec g     F .text	00000072 strncpy
10002b28 g     O .bss	00000028 __malloc_current_mallinfo
1a00a554 g     F .text	000000be __d2b
1a0025ac g     F .text	00000100 vTaskSwitchContext
1a00022a  w    F .text	00000006 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0011e4 g     F .text	00000020 _close_r
1a0054dc g     F .text	00000022 .hidden __aeabi_i2d
1a004ec8 g     F .text	000001c0 gpioInit
1a0064a4 g     F .text	00000002 __retarget_lock_close_recursive
1a008a38 g     F .text	000000d0 __swsetup_r
1a001e20  w    F .text	0000002c vApplicationStackOverflowHook
1a005e34  w    F .text	00000002 .hidden __aeabi_ldiv0
1a005804 g     F .text	000001d0 .hidden __divdf3
10000470 g     O .data	00000408 __malloc_av_
1a0055b0 g     F .text	00000254 .hidden __muldf3
1a006ce0 g     F .text	00000022 __sread
1a0051a4 g     F .text	00000020 USB0_IRQHandler
1a0004f4 g     F .text	0000003c key_pressed
1a000cac g     F .text	00000060 GPIO3_IRQHandler
1a006bf4 g     F .text	0000000c __malloc_lock
1a00369c g     F .text	00000034 Board_UARTPutChar
1a00022a  w    F .text	00000006 SCT_IRQHandler
1a006054 g     F .text	0000005a _fflush_r
1a00aaec g     F .text	0000005e _calloc_r
1a000f68 g     F .text	00000058 task_led1
1a0044e4 g     F .text	00000038 Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0064a8 g     F .text	00000002 __retarget_lock_acquire_recursive
1a006b54 g     F .text	000000a0 memset
1a000200  w    F .text	00000006 MemManage_Handler
1a000e8c g     F .text	000000dc main
10002b54 g     O .bss	00000004 __malloc_max_total_mem
1a0064a0 g     F .text	00000002 __retarget_lock_init_recursive
1a00096c g     F .text	00000016 task_tecla3
1a00022a  w    F .text	00000006 WDT_IRQHandler
1a001d1a g     F .text	00000072 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002ef0 g     F .text	00000026 SVC_Handler
1a006d64 g     F .text	00000008 __sclose
1a008c30 g     F .text	00000e54 _dtoa_r
1a0064b0 g     F .text	00000570 _malloc_r
1a00ad6c g     F .text	0000001a __ascii_wctomb
1a005554 g     F .text	0000005a .hidden __aeabi_l2d
1a0020b4 g     F .text	000000f4 vTaskDelayUntil
1a004768 g     F .text	0000007c Chip_Clock_EnableOpts
1a000e2c g     F .text	00000060 GPIO7_IRQHandler
1a00374a g     F .text	0000000e __stdio_getchar
1a001508 g     F .text	00000072 xQueueGenericCreate
1a006178 g     F .text	000000a0 _malloc_trim_r
1a00451c g     F .text	00000140 Chip_Clock_GetClockInputHz
1a00430c g     F .text	000000d8 Chip_Clock_CalcMainPLLValue
1a000aec g     F .text	00000050 keys_isr_fall
1a004c8c g     F .text	00000038 SystemInit
1a00022a  w    F .text	00000006 SPIFI_IRQHandler
1a00022a  w    F .text	00000006 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0059e4 g     F .text	0000007a .hidden __nedf2
1a005088 g     F .text	00000094 gpioWrite
1a0010fa  w    F .text	0000000e _fini
1a0022b8 g     F .text	00000138 xTaskResumeAll
1a002210 g     F .text	0000008c vTaskStartScheduler
1a003dd4 g     F .text	00000088 Chip_ADC_Init
10002bc4 g     O .bss	00000004 g_pUsbApi
1a003838 g     F .text	00000014 Board_SetupMuxing
1a003bc4 g     F .text	0000016c Chip_UART_SetBaudFDR
1a0012e6 g     F .text	0000004c _write_r
10002b60 g     O .bss	00000060 keys_data
1a00022a  w    F .text	00000006 ETH_IRQHandler
10000040 g     O .data	00000004 _impure_ptr
1a005f08 g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a000fc0 g     F .text	00000058 task_led2
1a000940 g     F .text	00000016 task_tecla1
1a00022a  w    F .text	00000006 CAN0_IRQHandler
1a0004c0 g     F .text	00000034 get_diff
1a00ac5c g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
1a002894 g     F .text	00000018 vTaskMissedYield
10002bec g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a004c14 g     F .text	0000004c Chip_SSP_Init
1a00022a  w    F .text	00000006 GINT0_IRQHandler
1a002434 g     F .text	00000178 xTaskIncrementTick
1a009d94 g     F .text	0000005c __swhatbuf_r
1a00330c g     F .text	00000020 DAC_IRQHandler
1a003670 g     F .text	0000002c Board_Debug_Init
1a005a80 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a003730 g     F .text	0000001a __stdio_putchar
1a001438 g     F .text	000000d0 xQueueGenericReset
100009ec g       .data	00000000 _edata
1a003930 g     F .text	0000004c Chip_I2C_EventHandler
1a00022a  w    F .text	00000006 M0SUB_IRQHandler
1a00ab4c g     F .text	0000009e __fputwc
10002bdc g     O .bss	00000001 __lock___at_quick_exit_mutex
1a001e4c g     F .text	00000082 xTaskCreate
1a00496c g     F .text	00000148 Chip_SetupCoreClock
1a006d04 g     F .text	0000003e __swrite
1a000b8c g     F .text	00000060 GPIO0_IRQHandler
1000087c g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a006404 g     F .text	00000052 _fwalk_reent
1a003eec g     F .text	00000018 SystemCoreClockUpdate
1a00a45c g     F .text	000000f8 __mdiff
1a005ae4 g     F .text	0000004e .hidden __aeabi_d2iz
1a00022a  w    F .text	00000006 DMA_IRQHandler
1a0021a8 g     F .text	00000068 vTaskDelay
1a00022a  w    F .text	00000006 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00616c g     F .text	0000000c __sfp_lock_release
1a00b170 g     O .text	00000101 _ctype_
1a002c28 g     F .text	0000013c vTaskPriorityDisinheritAfterTimeout
1a005e34  w    F .text	00000002 .hidden __aeabi_idiv0
1a00ad88 g     F .text	0000002c .hidden __unorddf2
1a001070 g     F .text	00000058 task_led4
1a000206  w    F .text	00000006 BusFault_Handler
10002be0 g     O .bss	00000001 __lock___dd_hash_mutex
1a009df0 g     F .text	00000094 __smakebuf_r
10002be4 g     O .bss	00000001 __lock___tz_mutex
1a006d80 g     F .text	000000dc strlen
1a002e34 g     F .text	00000068 pxPortInitialiseStack
1a000956 g     F .text	00000016 task_tecla2
1a0047e4 g     F .text	00000060 Chip_Clock_Enable
1a005a70 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a0059d4 g     F .text	0000008a .hidden __gedf2
1a00022a  w    F .text	00000006 UART3_IRQHandler
1a00022a  w    F .text	00000006 MCPWM_IRQHandler
1a00aad8 g     F .text	00000014 __sprint_r
1a00022a  w    F .text	00000006 M0APP_IRQHandler
1a00511c g     F .text	00000088 gpioRead
1a005500 g     F .text	00000042 .hidden __aeabi_f2d
1a0051c4 g     F .text	00000074 boardInit
1a00309c g     F .text	0000005c vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a005240 g     F .text	0000027a .hidden __subdf3
1a006e60 g     F .text	00001b54 _vfprintf_r
1a00022a  w    F .text	00000006 GINT1_IRQHandler
1a00a12c g     F .text	00000060 __lo0bits
1a00a980 g     F .text	0000006c frexp
10000880 g     O .data	0000016c __global_locale
1a004680 g     F .text	0000009c Chip_Clock_SetBaseClock
1a004cc4 g     F .text	00000030 cyclesCounterInit
1a000d0c g     F .text	00000060 GPIO4_IRQHandler
10002be8 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a001780 g     F .text	00000112 xQueueGiveFromISR
1a0038c0 g     F .text	00000010 Board_SystemInit
1a00a060 g     F .text	0000008a __multadd
1a00a04c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 19 11 00 1a f5 01 00 1a fb 01 00 1a     ................
1a000010:	01 02 00 1a 07 02 00 1a 0d 02 00 1a e2 64 ff 53     .............d.S
	...
1a00002c:	f1 2e 00 1a 19 02 00 1a 00 00 00 00 51 31 00 1a     ............Q1..
1a00003c:	b9 31 00 1a                                         .1..

1a000040 <g_pfnVendorVectors>:
1a000040:	0d 33 00 1a 2b 02 00 1a 2b 02 00 1a 00 00 00 00     .3..+...+.......
1a000050:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a000060:	a5 51 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     .Q..+...+...+...
1a000070:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a000080:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a000090:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a0000a0:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a0000b0:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a0000c0:	8d 0b 00 1a ed 0b 00 1a 4d 0c 00 1a ad 0c 00 1a     ........M.......
1a0000d0:	0d 0d 00 1a 6d 0d 00 1a cd 0d 00 1a 2d 0e 00 1a     ....m.......-...
1a0000e0:	2b 02 00 1a 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     +...+...+...+...
1a0000f0:	00 00 00 00 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     ....+...+...+...
1a000100:	00 00 00 00 2b 02 00 1a 2b 02 00 1a 2b 02 00 1a     ....+...+...+...
1a000110:	2b 02 00 1a                                         +...

1a000114 <__data_section_table>:
1a000114:	1a00b408 	.word	0x1a00b408
1a000118:	10000000 	.word	0x10000000
1a00011c:	000009ec 	.word	0x000009ec
1a000120:	1a00b408 	.word	0x1a00b408
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00b408 	.word	0x1a00b408
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00b408 	.word	0x1a00b408
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00b408 	.word	0x1a00b408
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100009ec 	.word	0x100009ec
1a000154:	00002200 	.word	0x00002200
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <data_init>:
    PendSV_Handler,                 // The PendSV handler
    SysTick_Handler,                // The SysTick handler
};

__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000178:	b480      	push	{r7}
1a00017a:	b089      	sub	sp, #36	; 0x24
1a00017c:	af00      	add	r7, sp, #0
1a00017e:	60f8      	str	r0, [r7, #12]
1a000180:	60b9      	str	r1, [r7, #8]
1a000182:	607a      	str	r2, [r7, #4]
    unsigned int *pulDest = (unsigned int*) start;
1a000184:	68bb      	ldr	r3, [r7, #8]
1a000186:	61fb      	str	r3, [r7, #28]
    unsigned int *pulSrc = (unsigned int*) romstart;
1a000188:	68fb      	ldr	r3, [r7, #12]
1a00018a:	61bb      	str	r3, [r7, #24]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	617b      	str	r3, [r7, #20]
1a000190:	e00a      	b.n	1a0001a8 <data_init+0x30>
        *pulDest++ = *pulSrc++;
1a000192:	69ba      	ldr	r2, [r7, #24]
1a000194:	1d13      	adds	r3, r2, #4
1a000196:	61bb      	str	r3, [r7, #24]
1a000198:	69fb      	ldr	r3, [r7, #28]
1a00019a:	1d19      	adds	r1, r3, #4
1a00019c:	61f9      	str	r1, [r7, #28]
1a00019e:	6812      	ldr	r2, [r2, #0]
1a0001a0:	601a      	str	r2, [r3, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	697b      	ldr	r3, [r7, #20]
1a0001a4:	3304      	adds	r3, #4
1a0001a6:	617b      	str	r3, [r7, #20]
1a0001a8:	697a      	ldr	r2, [r7, #20]
1a0001aa:	687b      	ldr	r3, [r7, #4]
1a0001ac:	429a      	cmp	r2, r3
1a0001ae:	d3f0      	bcc.n	1a000192 <data_init+0x1a>
}
1a0001b0:	bf00      	nop
1a0001b2:	3724      	adds	r7, #36	; 0x24
1a0001b4:	46bd      	mov	sp, r7
1a0001b6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0001ba:	4770      	bx	lr

1a0001bc <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
1a0001bc:	b480      	push	{r7}
1a0001be:	b085      	sub	sp, #20
1a0001c0:	af00      	add	r7, sp, #0
1a0001c2:	6078      	str	r0, [r7, #4]
1a0001c4:	6039      	str	r1, [r7, #0]
    unsigned int *pulDest = (unsigned int*) start;
1a0001c6:	687b      	ldr	r3, [r7, #4]
1a0001c8:	60fb      	str	r3, [r7, #12]
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ca:	2300      	movs	r3, #0
1a0001cc:	60bb      	str	r3, [r7, #8]
1a0001ce:	e007      	b.n	1a0001e0 <bss_init+0x24>
        *pulDest++ = 0;
1a0001d0:	68fb      	ldr	r3, [r7, #12]
1a0001d2:	1d1a      	adds	r2, r3, #4
1a0001d4:	60fa      	str	r2, [r7, #12]
1a0001d6:	2200      	movs	r2, #0
1a0001d8:	601a      	str	r2, [r3, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001da:	68bb      	ldr	r3, [r7, #8]
1a0001dc:	3304      	adds	r3, #4
1a0001de:	60bb      	str	r3, [r7, #8]
1a0001e0:	68ba      	ldr	r2, [r7, #8]
1a0001e2:	683b      	ldr	r3, [r7, #0]
1a0001e4:	429a      	cmp	r2, r3
1a0001e6:	d3f3      	bcc.n	1a0001d0 <bss_init+0x14>
}
1a0001e8:	bf00      	nop
1a0001ea:	3714      	adds	r7, #20
1a0001ec:	46bd      	mov	sp, r7
1a0001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0001f2:	4770      	bx	lr

1a0001f4 <NMI_Handler>:


}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a0001f4:	b480      	push	{r7}
1a0001f6:	af00      	add	r7, sp, #0
    while (1) {
1a0001f8:	e7fe      	b.n	1a0001f8 <NMI_Handler+0x4>

1a0001fa <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a0001fa:	b480      	push	{r7}
1a0001fc:	af00      	add	r7, sp, #0
    while (1) {
1a0001fe:	e7fe      	b.n	1a0001fe <HardFault_Handler+0x4>

1a000200 <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a000200:	b480      	push	{r7}
1a000202:	af00      	add	r7, sp, #0
    while (1) {
1a000204:	e7fe      	b.n	1a000204 <MemManage_Handler+0x4>

1a000206 <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a000206:	b480      	push	{r7}
1a000208:	af00      	add	r7, sp, #0
    while (1) {
1a00020a:	e7fe      	b.n	1a00020a <BusFault_Handler+0x4>

1a00020c <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a00020c:	b480      	push	{r7}
1a00020e:	af00      	add	r7, sp, #0
    while (1) {
1a000210:	e7fe      	b.n	1a000210 <UsageFault_Handler+0x4>
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000212:	b480      	push	{r7}
1a000214:	af00      	add	r7, sp, #0
    while (1) {
1a000216:	e7fe      	b.n	1a000216 <UsageFault_Handler+0xa>

1a000218 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000218:	b480      	push	{r7}
1a00021a:	af00      	add	r7, sp, #0
    while (1) {
1a00021c:	e7fe      	b.n	1a00021c <DebugMon_Handler+0x4>
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a00021e:	b480      	push	{r7}
1a000220:	af00      	add	r7, sp, #0
    while (1) {
1a000222:	e7fe      	b.n	1a000222 <DebugMon_Handler+0xa>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000224:	b480      	push	{r7}
1a000226:	af00      	add	r7, sp, #0
    while (1) {
1a000228:	e7fe      	b.n	1a000228 <DebugMon_Handler+0x10>

1a00022a <ADC0_IRQHandler>:
    QEI_IRQHandler,           // 68
};
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00022a:	b480      	push	{r7}
1a00022c:	af00      	add	r7, sp, #0
    while (1) {
1a00022e:	e7fe      	b.n	1a00022e <ADC0_IRQHandler+0x4>
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
1a000300:	b480      	push	{r7}
1a000302:	b083      	sub	sp, #12
1a000304:	af00      	add	r7, sp, #0
1a000306:	4603      	mov	r3, r0
1a000308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
1a00030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a00030e:	2b00      	cmp	r3, #0
1a000310:	db0b      	blt.n	1a00032a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000312:	79fb      	ldrb	r3, [r7, #7]
1a000314:	f003 021f 	and.w	r2, r3, #31
1a000318:	4907      	ldr	r1, [pc, #28]	; (1a000338 <__NVIC_EnableIRQ+0x38>)
1a00031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a00031e:	095b      	lsrs	r3, r3, #5
1a000320:	2001      	movs	r0, #1
1a000322:	fa00 f202 	lsl.w	r2, r0, r2
1a000326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
1a00032a:	bf00      	nop
1a00032c:	370c      	adds	r7, #12
1a00032e:	46bd      	mov	sp, r7
1a000330:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000334:	4770      	bx	lr
1a000336:	bf00      	nop
1a000338:	e000e100 	.word	0xe000e100

1a00033c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1a00033c:	b480      	push	{r7}
1a00033e:	b083      	sub	sp, #12
1a000340:	af00      	add	r7, sp, #0
1a000342:	4603      	mov	r3, r0
1a000344:	6039      	str	r1, [r7, #0]
1a000346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
1a000348:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a00034c:	2b00      	cmp	r3, #0
1a00034e:	db0a      	blt.n	1a000366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000350:	683b      	ldr	r3, [r7, #0]
1a000352:	b2da      	uxtb	r2, r3
1a000354:	490c      	ldr	r1, [pc, #48]	; (1a000388 <__NVIC_SetPriority+0x4c>)
1a000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a00035a:	0152      	lsls	r2, r2, #5
1a00035c:	b2d2      	uxtb	r2, r2
1a00035e:	440b      	add	r3, r1
1a000360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
1a000364:	e00a      	b.n	1a00037c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000366:	683b      	ldr	r3, [r7, #0]
1a000368:	b2da      	uxtb	r2, r3
1a00036a:	4908      	ldr	r1, [pc, #32]	; (1a00038c <__NVIC_SetPriority+0x50>)
1a00036c:	79fb      	ldrb	r3, [r7, #7]
1a00036e:	f003 030f 	and.w	r3, r3, #15
1a000372:	3b04      	subs	r3, #4
1a000374:	0152      	lsls	r2, r2, #5
1a000376:	b2d2      	uxtb	r2, r2
1a000378:	440b      	add	r3, r1
1a00037a:	761a      	strb	r2, [r3, #24]
}
1a00037c:	bf00      	nop
1a00037e:	370c      	adds	r7, #12
1a000380:	46bd      	mov	sp, r7
1a000382:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000386:	4770      	bx	lr
1a000388:	e000e100 	.word	0xe000e100
1a00038c:	e000ed00 	.word	0xe000ed00

1a000390 <Chip_SCU_GPIOIntPinSel>:
 * @param	PortNum	: GPIO port number interrupt, should be: 0 to 7
 * @param	PinNum	: GPIO pin number Interrupt , should be: 0 to 31
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_GPIOIntPinSel(uint8_t PortSel, uint8_t PortNum, uint8_t PinNum)
{
1a000390:	b480      	push	{r7}
1a000392:	b085      	sub	sp, #20
1a000394:	af00      	add	r7, sp, #0
1a000396:	4603      	mov	r3, r0
1a000398:	71fb      	strb	r3, [r7, #7]
1a00039a:	460b      	mov	r3, r1
1a00039c:	71bb      	strb	r3, [r7, #6]
1a00039e:	4613      	mov	r3, r2
1a0003a0:	717b      	strb	r3, [r7, #5]
	int32_t of = (PortSel & 3) << 3;
1a0003a2:	79fb      	ldrb	r3, [r7, #7]
1a0003a4:	00db      	lsls	r3, r3, #3
1a0003a6:	f003 0318 	and.w	r3, r3, #24
1a0003aa:	60fb      	str	r3, [r7, #12]
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
1a0003ac:	79bb      	ldrb	r3, [r7, #6]
1a0003ae:	015b      	lsls	r3, r3, #5
1a0003b0:	b2da      	uxtb	r2, r3
1a0003b2:	797b      	ldrb	r3, [r7, #5]
1a0003b4:	f003 031f 	and.w	r3, r3, #31
1a0003b8:	431a      	orrs	r2, r3
1a0003ba:	68fb      	ldr	r3, [r7, #12]
1a0003bc:	fa02 f303 	lsl.w	r3, r2, r3
1a0003c0:	60bb      	str	r3, [r7, #8]
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a0003c2:	4a0f      	ldr	r2, [pc, #60]	; (1a000400 <Chip_SCU_GPIOIntPinSel+0x70>)
1a0003c4:	79fb      	ldrb	r3, [r7, #7]
1a0003c6:	089b      	lsrs	r3, r3, #2
1a0003c8:	b2db      	uxtb	r3, r3
1a0003ca:	f503 7360 	add.w	r3, r3, #896	; 0x380
1a0003ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0003d2:	21ff      	movs	r1, #255	; 0xff
1a0003d4:	68fa      	ldr	r2, [r7, #12]
1a0003d6:	fa01 f202 	lsl.w	r2, r1, r2
1a0003da:	43d2      	mvns	r2, r2
1a0003dc:	401a      	ands	r2, r3
1a0003de:	4908      	ldr	r1, [pc, #32]	; (1a000400 <Chip_SCU_GPIOIntPinSel+0x70>)
1a0003e0:	79fb      	ldrb	r3, [r7, #7]
1a0003e2:	089b      	lsrs	r3, r3, #2
1a0003e4:	b2db      	uxtb	r3, r3
1a0003e6:	4618      	mov	r0, r3
1a0003e8:	68bb      	ldr	r3, [r7, #8]
1a0003ea:	431a      	orrs	r2, r3
1a0003ec:	f500 7360 	add.w	r3, r0, #896	; 0x380
1a0003f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a0003f4:	bf00      	nop
1a0003f6:	3714      	adds	r7, #20
1a0003f8:	46bd      	mov	sp, r7
1a0003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0003fe:	4770      	bx	lr
1a000400:	40086000 	.word	0x40086000

1a000404 <Chip_PININT_Init>:
 * @brief	Initialize Pin interrupt block
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	Nothing
 * @note	This function should be used after the Chip_GPIO_Init() function.
 */
STATIC INLINE void Chip_PININT_Init(LPC_PIN_INT_T *pPININT) {}
1a000404:	b480      	push	{r7}
1a000406:	b083      	sub	sp, #12
1a000408:	af00      	add	r7, sp, #0
1a00040a:	6078      	str	r0, [r7, #4]
1a00040c:	bf00      	nop
1a00040e:	370c      	adds	r7, #12
1a000410:	46bd      	mov	sp, r7
1a000412:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000416:	4770      	bx	lr

1a000418 <Chip_PININT_SetPinModeEdge>:
 * @param	pPININT	: The base address of Pin interrupt block
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
1a000418:	b480      	push	{r7}
1a00041a:	b083      	sub	sp, #12
1a00041c:	af00      	add	r7, sp, #0
1a00041e:	6078      	str	r0, [r7, #4]
1a000420:	6039      	str	r1, [r7, #0]
	pPININT->ISEL &= ~pins;
1a000422:	687b      	ldr	r3, [r7, #4]
1a000424:	681a      	ldr	r2, [r3, #0]
1a000426:	683b      	ldr	r3, [r7, #0]
1a000428:	43db      	mvns	r3, r3
1a00042a:	401a      	ands	r2, r3
1a00042c:	687b      	ldr	r3, [r7, #4]
1a00042e:	601a      	str	r2, [r3, #0]
}
1a000430:	bf00      	nop
1a000432:	370c      	adds	r7, #12
1a000434:	46bd      	mov	sp, r7
1a000436:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00043a:	4770      	bx	lr

1a00043c <Chip_PININT_EnableIntHigh>:
 * @param	pPININT	: The base address of Pin interrupt block
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntHigh(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
1a00043c:	b480      	push	{r7}
1a00043e:	b083      	sub	sp, #12
1a000440:	af00      	add	r7, sp, #0
1a000442:	6078      	str	r0, [r7, #4]
1a000444:	6039      	str	r1, [r7, #0]
	pPININT->SIENR = pins;
1a000446:	687b      	ldr	r3, [r7, #4]
1a000448:	683a      	ldr	r2, [r7, #0]
1a00044a:	609a      	str	r2, [r3, #8]
}
1a00044c:	bf00      	nop
1a00044e:	370c      	adds	r7, #12
1a000450:	46bd      	mov	sp, r7
1a000452:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000456:	4770      	bx	lr

1a000458 <Chip_PININT_EnableIntLow>:
 * @param	pPININT	: The base address of Pin interrupt block
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
1a000458:	b480      	push	{r7}
1a00045a:	b083      	sub	sp, #12
1a00045c:	af00      	add	r7, sp, #0
1a00045e:	6078      	str	r0, [r7, #4]
1a000460:	6039      	str	r1, [r7, #0]
	pPININT->SIENF = pins;
1a000462:	687b      	ldr	r3, [r7, #4]
1a000464:	683a      	ldr	r2, [r7, #0]
1a000466:	615a      	str	r2, [r3, #20]
}
1a000468:	bf00      	nop
1a00046a:	370c      	adds	r7, #12
1a00046c:	46bd      	mov	sp, r7
1a00046e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a000472:	4770      	bx	lr

1a000474 <Chip_PININT_GetRiseStates>:
 * @brief	Return pin states that have a detected latched high edge (RISE) state
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
1a000474:	b480      	push	{r7}
1a000476:	b083      	sub	sp, #12
1a000478:	af00      	add	r7, sp, #0
1a00047a:	6078      	str	r0, [r7, #4]
	return pPININT->RISE;
1a00047c:	687b      	ldr	r3, [r7, #4]
1a00047e:	69db      	ldr	r3, [r3, #28]
}
1a000480:	4618      	mov	r0, r3
1a000482:	370c      	adds	r7, #12
1a000484:	46bd      	mov	sp, r7
1a000486:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00048a:	4770      	bx	lr

1a00048c <Chip_PININT_GetFallStates>:
 * @brief	Return pin states that have a detected latched falling edge (FALL) state
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetFallStates(LPC_PIN_INT_T *pPININT)
{
1a00048c:	b480      	push	{r7}
1a00048e:	b083      	sub	sp, #12
1a000490:	af00      	add	r7, sp, #0
1a000492:	6078      	str	r0, [r7, #4]
	return pPININT->FALL;
1a000494:	687b      	ldr	r3, [r7, #4]
1a000496:	6a1b      	ldr	r3, [r3, #32]
}
1a000498:	4618      	mov	r0, r3
1a00049a:	370c      	adds	r7, #12
1a00049c:	46bd      	mov	sp, r7
1a00049e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0004a2:	4770      	bx	lr

1a0004a4 <Chip_PININT_ClearIntStatus>:
 * @param	pPININT	: The base address of Pin interrupt block
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
1a0004a4:	b480      	push	{r7}
1a0004a6:	b083      	sub	sp, #12
1a0004a8:	af00      	add	r7, sp, #0
1a0004aa:	6078      	str	r0, [r7, #4]
1a0004ac:	6039      	str	r1, [r7, #0]
	pPININT->IST = pins;
1a0004ae:	687b      	ldr	r3, [r7, #4]
1a0004b0:	683a      	ldr	r2, [r7, #0]
1a0004b2:	625a      	str	r2, [r3, #36]	; 0x24
}
1a0004b4:	bf00      	nop
1a0004b6:	370c      	adds	r7, #12
1a0004b8:	46bd      	mov	sp, r7
1a0004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0004be:	4770      	bx	lr

1a0004c0 <get_diff>:
void task_tecla3( void* taskParmPtr );
void task_tecla4( void* taskParmPtr );

/*=====[Implementations of public functions]=================================*/
TickType_t get_diff(uint32_t index)
{
1a0004c0:	b580      	push	{r7, lr}
1a0004c2:	b084      	sub	sp, #16
1a0004c4:	af00      	add	r7, sp, #0
1a0004c6:	6078      	str	r0, [r7, #4]
    TickType_t tiempo;

    taskENTER_CRITICAL();
1a0004c8:	f002 fde8 	bl	1a00309c <vPortEnterCritical>
    tiempo = keys_data[index].time_diff;
1a0004cc:	4908      	ldr	r1, [pc, #32]	; (1a0004f0 <get_diff+0x30>)
1a0004ce:	687a      	ldr	r2, [r7, #4]
1a0004d0:	4613      	mov	r3, r2
1a0004d2:	005b      	lsls	r3, r3, #1
1a0004d4:	4413      	add	r3, r2
1a0004d6:	00db      	lsls	r3, r3, #3
1a0004d8:	440b      	add	r3, r1
1a0004da:	330c      	adds	r3, #12
1a0004dc:	681b      	ldr	r3, [r3, #0]
1a0004de:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
1a0004e0:	f002 fe0a 	bl	1a0030f8 <vPortExitCritical>

    return tiempo;
1a0004e4:	68fb      	ldr	r3, [r7, #12]
}
1a0004e6:	4618      	mov	r0, r3
1a0004e8:	3710      	adds	r7, #16
1a0004ea:	46bd      	mov	sp, r7
1a0004ec:	bd80      	pop	{r7, pc}
1a0004ee:	bf00      	nop
1a0004f0:	10002b60 	.word	0x10002b60

1a0004f4 <key_pressed>:
    taskEXIT_CRITICAL();
}

/* funcion no bloqueante que consulta si la tecla fue pulsada. */
int key_pressed( uint32_t index )
{
1a0004f4:	b580      	push	{r7, lr}
1a0004f6:	b084      	sub	sp, #16
1a0004f8:	af00      	add	r7, sp, #0
1a0004fa:	6078      	str	r0, [r7, #4]
    BaseType_t signaled = xSemaphoreTake( keys_data[index].pressed_signal, 0 );
1a0004fc:	490b      	ldr	r1, [pc, #44]	; (1a00052c <key_pressed+0x38>)
1a0004fe:	687a      	ldr	r2, [r7, #4]
1a000500:	4613      	mov	r3, r2
1a000502:	005b      	lsls	r3, r3, #1
1a000504:	4413      	add	r3, r2
1a000506:	00db      	lsls	r3, r3, #3
1a000508:	440b      	add	r3, r1
1a00050a:	3314      	adds	r3, #20
1a00050c:	681b      	ldr	r3, [r3, #0]
1a00050e:	2100      	movs	r1, #0
1a000510:	4618      	mov	r0, r3
1a000512:	f001 f9bf 	bl	1a001894 <xQueueSemaphoreTake>
1a000516:	60f8      	str	r0, [r7, #12]
    if ( signaled == pdPASS )
1a000518:	68fb      	ldr	r3, [r7, #12]
1a00051a:	2b01      	cmp	r3, #1
1a00051c:	d101      	bne.n	1a000522 <key_pressed+0x2e>
    {
        return 1;
1a00051e:	2301      	movs	r3, #1
1a000520:	e000      	b.n	1a000524 <key_pressed+0x30>
    }
    else
    {
        return 0;
1a000522:	2300      	movs	r3, #0
    }
}
1a000524:	4618      	mov	r0, r3
1a000526:	3710      	adds	r7, #16
1a000528:	46bd      	mov	sp, r7
1a00052a:	bd80      	pop	{r7, pc}
1a00052c:	10002b60 	.word	0x10002b60

1a000530 <keys_Init>:

void keys_Init( void )
{
1a000530:	b580      	push	{r7, lr}
1a000532:	b08a      	sub	sp, #40	; 0x28
1a000534:	af02      	add	r7, sp, #8
    BaseType_t res;

    for(int i=0; i<4; i++ ){
1a000536:	2300      	movs	r3, #0
1a000538:	61fb      	str	r3, [r7, #28]
1a00053a:	e072      	b.n	1a000622 <keys_Init+0xf2>
    	keys_data[i].state          = BUTTON_UP;  // Set initial state
1a00053c:	496d      	ldr	r1, [pc, #436]	; (1a0006f4 <keys_Init+0x1c4>)
1a00053e:	69fa      	ldr	r2, [r7, #28]
1a000540:	4613      	mov	r3, r2
1a000542:	005b      	lsls	r3, r3, #1
1a000544:	4413      	add	r3, r2
1a000546:	00db      	lsls	r3, r3, #3
1a000548:	440b      	add	r3, r1
1a00054a:	2200      	movs	r2, #0
1a00054c:	701a      	strb	r2, [r3, #0]
		keys_data[i].time_down      = KEYS_INVALID_TIME;
1a00054e:	4969      	ldr	r1, [pc, #420]	; (1a0006f4 <keys_Init+0x1c4>)
1a000550:	69fa      	ldr	r2, [r7, #28]
1a000552:	4613      	mov	r3, r2
1a000554:	005b      	lsls	r3, r3, #1
1a000556:	4413      	add	r3, r2
1a000558:	00db      	lsls	r3, r3, #3
1a00055a:	440b      	add	r3, r1
1a00055c:	3304      	adds	r3, #4
1a00055e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000562:	601a      	str	r2, [r3, #0]
		keys_data[i].time_up        = KEYS_INVALID_TIME;
1a000564:	4963      	ldr	r1, [pc, #396]	; (1a0006f4 <keys_Init+0x1c4>)
1a000566:	69fa      	ldr	r2, [r7, #28]
1a000568:	4613      	mov	r3, r2
1a00056a:	005b      	lsls	r3, r3, #1
1a00056c:	4413      	add	r3, r2
1a00056e:	00db      	lsls	r3, r3, #3
1a000570:	440b      	add	r3, r1
1a000572:	3308      	adds	r3, #8
1a000574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000578:	601a      	str	r2, [r3, #0]
		keys_data[i].time_diff      = KEYS_INVALID_TIME;
1a00057a:	495e      	ldr	r1, [pc, #376]	; (1a0006f4 <keys_Init+0x1c4>)
1a00057c:	69fa      	ldr	r2, [r7, #28]
1a00057e:	4613      	mov	r3, r2
1a000580:	005b      	lsls	r3, r3, #1
1a000582:	4413      	add	r3, r2
1a000584:	00db      	lsls	r3, r3, #3
1a000586:	440b      	add	r3, r1
1a000588:	330c      	adds	r3, #12
1a00058a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00058e:	601a      	str	r2, [r3, #0]

		keys_data[i].isr_signal    = xSemaphoreCreateBinary();
1a000590:	2203      	movs	r2, #3
1a000592:	2100      	movs	r1, #0
1a000594:	2001      	movs	r0, #1
1a000596:	f000 ffb7 	bl	1a001508 <xQueueGenericCreate>
1a00059a:	4956      	ldr	r1, [pc, #344]	; (1a0006f4 <keys_Init+0x1c4>)
1a00059c:	69fa      	ldr	r2, [r7, #28]
1a00059e:	4613      	mov	r3, r2
1a0005a0:	005b      	lsls	r3, r3, #1
1a0005a2:	4413      	add	r3, r2
1a0005a4:	00db      	lsls	r3, r3, #3
1a0005a6:	440b      	add	r3, r1
1a0005a8:	3310      	adds	r3, #16
1a0005aa:	6018      	str	r0, [r3, #0]
		keys_data[i].pressed_signal    = xSemaphoreCreateBinary();
1a0005ac:	2203      	movs	r2, #3
1a0005ae:	2100      	movs	r1, #0
1a0005b0:	2001      	movs	r0, #1
1a0005b2:	f000 ffa9 	bl	1a001508 <xQueueGenericCreate>
1a0005b6:	494f      	ldr	r1, [pc, #316]	; (1a0006f4 <keys_Init+0x1c4>)
1a0005b8:	69fa      	ldr	r2, [r7, #28]
1a0005ba:	4613      	mov	r3, r2
1a0005bc:	005b      	lsls	r3, r3, #1
1a0005be:	4413      	add	r3, r2
1a0005c0:	00db      	lsls	r3, r3, #3
1a0005c2:	440b      	add	r3, r1
1a0005c4:	3314      	adds	r3, #20
1a0005c6:	6018      	str	r0, [r3, #0]

		configASSERT( keys_data[i].isr_signal != NULL );
1a0005c8:	494a      	ldr	r1, [pc, #296]	; (1a0006f4 <keys_Init+0x1c4>)
1a0005ca:	69fa      	ldr	r2, [r7, #28]
1a0005cc:	4613      	mov	r3, r2
1a0005ce:	005b      	lsls	r3, r3, #1
1a0005d0:	4413      	add	r3, r2
1a0005d2:	00db      	lsls	r3, r3, #3
1a0005d4:	440b      	add	r3, r1
1a0005d6:	3310      	adds	r3, #16
1a0005d8:	681b      	ldr	r3, [r3, #0]
1a0005da:	2b00      	cmp	r3, #0
1a0005dc:	d109      	bne.n	1a0005f2 <keys_Init+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0005de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0005e2:	f383 8811 	msr	BASEPRI, r3
1a0005e6:	f3bf 8f6f 	isb	sy
1a0005ea:	f3bf 8f4f 	dsb	sy
1a0005ee:	617b      	str	r3, [r7, #20]
1a0005f0:	e7fe      	b.n	1a0005f0 <keys_Init+0xc0>
		configASSERT( keys_data[i].pressed_signal != NULL );
1a0005f2:	4940      	ldr	r1, [pc, #256]	; (1a0006f4 <keys_Init+0x1c4>)
1a0005f4:	69fa      	ldr	r2, [r7, #28]
1a0005f6:	4613      	mov	r3, r2
1a0005f8:	005b      	lsls	r3, r3, #1
1a0005fa:	4413      	add	r3, r2
1a0005fc:	00db      	lsls	r3, r3, #3
1a0005fe:	440b      	add	r3, r1
1a000600:	3314      	adds	r3, #20
1a000602:	681b      	ldr	r3, [r3, #0]
1a000604:	2b00      	cmp	r3, #0
1a000606:	d109      	bne.n	1a00061c <keys_Init+0xec>
1a000608:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00060c:	f383 8811 	msr	BASEPRI, r3
1a000610:	f3bf 8f6f 	isb	sy
1a000614:	f3bf 8f4f 	dsb	sy
1a000618:	613b      	str	r3, [r7, #16]
1a00061a:	e7fe      	b.n	1a00061a <keys_Init+0xea>
    for(int i=0; i<4; i++ ){
1a00061c:	69fb      	ldr	r3, [r7, #28]
1a00061e:	3301      	adds	r3, #1
1a000620:	61fb      	str	r3, [r7, #28]
1a000622:	69fb      	ldr	r3, [r7, #28]
1a000624:	2b03      	cmp	r3, #3
1a000626:	dd89      	ble.n	1a00053c <keys_Init+0xc>
    }


    // Crear tareas en freeRTOS
    res = xTaskCreate (
1a000628:	2300      	movs	r3, #0
1a00062a:	9301      	str	r3, [sp, #4]
1a00062c:	2301      	movs	r3, #1
1a00062e:	9300      	str	r3, [sp, #0]
1a000630:	2300      	movs	r3, #0
1a000632:	22b4      	movs	r2, #180	; 0xb4
1a000634:	4930      	ldr	r1, [pc, #192]	; (1a0006f8 <keys_Init+0x1c8>)
1a000636:	4831      	ldr	r0, [pc, #196]	; (1a0006fc <keys_Init+0x1cc>)
1a000638:	f001 fc08 	bl	1a001e4c <xTaskCreate>
1a00063c:	61b8      	str	r0, [r7, #24]
              0,							// Parametros de tarea
              tskIDLE_PRIORITY+1,			// Prioridad de la tarea
              0							// Puntero a la tarea creada en el sistema
          );
    // Gestión de errores
    configASSERT( res == pdPASS );
1a00063e:	69bb      	ldr	r3, [r7, #24]
1a000640:	2b01      	cmp	r3, #1
1a000642:	d009      	beq.n	1a000658 <keys_Init+0x128>
1a000644:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000648:	f383 8811 	msr	BASEPRI, r3
1a00064c:	f3bf 8f6f 	isb	sy
1a000650:	f3bf 8f4f 	dsb	sy
1a000654:	60fb      	str	r3, [r7, #12]
1a000656:	e7fe      	b.n	1a000656 <keys_Init+0x126>

    res = xTaskCreate (
1a000658:	2300      	movs	r3, #0
1a00065a:	9301      	str	r3, [sp, #4]
1a00065c:	2301      	movs	r3, #1
1a00065e:	9300      	str	r3, [sp, #0]
1a000660:	2300      	movs	r3, #0
1a000662:	22b4      	movs	r2, #180	; 0xb4
1a000664:	4926      	ldr	r1, [pc, #152]	; (1a000700 <keys_Init+0x1d0>)
1a000666:	4827      	ldr	r0, [pc, #156]	; (1a000704 <keys_Init+0x1d4>)
1a000668:	f001 fbf0 	bl	1a001e4c <xTaskCreate>
1a00066c:	61b8      	str	r0, [r7, #24]
				 0,							// Parametros de tarea
				 tskIDLE_PRIORITY+1,			// Prioridad de la tarea
				 0							// Puntero a la tarea creada en el sistema
				);
	   // Gestión de errores
    configASSERT( res == pdPASS );
1a00066e:	69bb      	ldr	r3, [r7, #24]
1a000670:	2b01      	cmp	r3, #1
1a000672:	d009      	beq.n	1a000688 <keys_Init+0x158>
1a000674:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000678:	f383 8811 	msr	BASEPRI, r3
1a00067c:	f3bf 8f6f 	isb	sy
1a000680:	f3bf 8f4f 	dsb	sy
1a000684:	60bb      	str	r3, [r7, #8]
1a000686:	e7fe      	b.n	1a000686 <keys_Init+0x156>

    res = xTaskCreate (
1a000688:	2300      	movs	r3, #0
1a00068a:	9301      	str	r3, [sp, #4]
1a00068c:	2301      	movs	r3, #1
1a00068e:	9300      	str	r3, [sp, #0]
1a000690:	2300      	movs	r3, #0
1a000692:	22b4      	movs	r2, #180	; 0xb4
1a000694:	491c      	ldr	r1, [pc, #112]	; (1a000708 <keys_Init+0x1d8>)
1a000696:	481d      	ldr	r0, [pc, #116]	; (1a00070c <keys_Init+0x1dc>)
1a000698:	f001 fbd8 	bl	1a001e4c <xTaskCreate>
1a00069c:	61b8      	str	r0, [r7, #24]
				 0,							// Parametros de tarea
				 tskIDLE_PRIORITY+1,			// Prioridad de la tarea
				 0							// Puntero a la tarea creada en el sistema
				);
	   // Gestión de errores
    configASSERT( res == pdPASS );
1a00069e:	69bb      	ldr	r3, [r7, #24]
1a0006a0:	2b01      	cmp	r3, #1
1a0006a2:	d009      	beq.n	1a0006b8 <keys_Init+0x188>
1a0006a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006a8:	f383 8811 	msr	BASEPRI, r3
1a0006ac:	f3bf 8f6f 	isb	sy
1a0006b0:	f3bf 8f4f 	dsb	sy
1a0006b4:	607b      	str	r3, [r7, #4]
1a0006b6:	e7fe      	b.n	1a0006b6 <keys_Init+0x186>

    res = xTaskCreate (
1a0006b8:	2300      	movs	r3, #0
1a0006ba:	9301      	str	r3, [sp, #4]
1a0006bc:	2301      	movs	r3, #1
1a0006be:	9300      	str	r3, [sp, #0]
1a0006c0:	2300      	movs	r3, #0
1a0006c2:	22b4      	movs	r2, #180	; 0xb4
1a0006c4:	4912      	ldr	r1, [pc, #72]	; (1a000710 <keys_Init+0x1e0>)
1a0006c6:	4813      	ldr	r0, [pc, #76]	; (1a000714 <keys_Init+0x1e4>)
1a0006c8:	f001 fbc0 	bl	1a001e4c <xTaskCreate>
1a0006cc:	61b8      	str	r0, [r7, #24]
				 0,							// Parametros de tarea
				 tskIDLE_PRIORITY+1,			// Prioridad de la tarea
				 0							// Puntero a la tarea creada en el sistema
				);
	   // Gestión de errores
    configASSERT( res == pdPASS );
1a0006ce:	69bb      	ldr	r3, [r7, #24]
1a0006d0:	2b01      	cmp	r3, #1
1a0006d2:	d009      	beq.n	1a0006e8 <keys_Init+0x1b8>
1a0006d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006d8:	f383 8811 	msr	BASEPRI, r3
1a0006dc:	f3bf 8f6f 	isb	sy
1a0006e0:	f3bf 8f4f 	dsb	sy
1a0006e4:	603b      	str	r3, [r7, #0]
1a0006e6:	e7fe      	b.n	1a0006e6 <keys_Init+0x1b6>

    keys_isr_config();
1a0006e8:	f000 f956 	bl	1a000998 <keys_isr_config>
}
1a0006ec:	bf00      	nop
1a0006ee:	3720      	adds	r7, #32
1a0006f0:	46bd      	mov	sp, r7
1a0006f2:	bd80      	pop	{r7, pc}
1a0006f4:	10002b60 	.word	0x10002b60
1a0006f8:	1a00adb8 	.word	0x1a00adb8
1a0006fc:	1a000941 	.word	0x1a000941
1a000700:	1a00adc4 	.word	0x1a00adc4
1a000704:	1a000957 	.word	0x1a000957
1a000708:	1a00add0 	.word	0x1a00add0
1a00070c:	1a00096d 	.word	0x1a00096d
1a000710:	1a00addc 	.word	0x1a00addc
1a000714:	1a000983 	.word	0x1a000983

1a000718 <keys_Update_Isr>:

void keys_Update_Isr( uint32_t index )
{
1a000718:	b580      	push	{r7, lr}
1a00071a:	b082      	sub	sp, #8
1a00071c:	af00      	add	r7, sp, #0
1a00071e:	6078      	str	r0, [r7, #4]
    switch( keys_data[index].state )
1a000720:	4948      	ldr	r1, [pc, #288]	; (1a000844 <keys_Update_Isr+0x12c>)
1a000722:	687a      	ldr	r2, [r7, #4]
1a000724:	4613      	mov	r3, r2
1a000726:	005b      	lsls	r3, r3, #1
1a000728:	4413      	add	r3, r2
1a00072a:	00db      	lsls	r3, r3, #3
1a00072c:	440b      	add	r3, r1
1a00072e:	781b      	ldrb	r3, [r3, #0]
1a000730:	2b03      	cmp	r3, #3
1a000732:	d87f      	bhi.n	1a000834 <keys_Update_Isr+0x11c>
1a000734:	a201      	add	r2, pc, #4	; (adr r2, 1a00073c <keys_Update_Isr+0x24>)
1a000736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00073a:	bf00      	nop
1a00073c:	1a00074d 	.word	0x1a00074d
1a000740:	1a0007c1 	.word	0x1a0007c1
1a000744:	1a00077d 	.word	0x1a00077d
1a000748:	1a0007f1 	.word	0x1a0007f1
    {
        case STATE_BUTTON_UP:

            /* espero una señal de la tecla */
            xSemaphoreTake( keys_data[index].isr_signal, portMAX_DELAY );
1a00074c:	493d      	ldr	r1, [pc, #244]	; (1a000844 <keys_Update_Isr+0x12c>)
1a00074e:	687a      	ldr	r2, [r7, #4]
1a000750:	4613      	mov	r3, r2
1a000752:	005b      	lsls	r3, r3, #1
1a000754:	4413      	add	r3, r2
1a000756:	00db      	lsls	r3, r3, #3
1a000758:	440b      	add	r3, r1
1a00075a:	3310      	adds	r3, #16
1a00075c:	681b      	ldr	r3, [r3, #0]
1a00075e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000762:	4618      	mov	r0, r3
1a000764:	f001 f896 	bl	1a001894 <xQueueSemaphoreTake>

            /* la tecla se pulso */
            keys_data[index].state = STATE_BUTTON_FALLING;
1a000768:	4936      	ldr	r1, [pc, #216]	; (1a000844 <keys_Update_Isr+0x12c>)
1a00076a:	687a      	ldr	r2, [r7, #4]
1a00076c:	4613      	mov	r3, r2
1a00076e:	005b      	lsls	r3, r3, #1
1a000770:	4413      	add	r3, r2
1a000772:	00db      	lsls	r3, r3, #3
1a000774:	440b      	add	r3, r1
1a000776:	2202      	movs	r2, #2
1a000778:	701a      	strb	r2, [r3, #0]
            break;
1a00077a:	e05f      	b.n	1a00083c <keys_Update_Isr+0x124>

        case STATE_BUTTON_FALLING:
            /* ENTRY */

            /* CHECK TRANSITION CONDITIONS */
            if( !gpioRead( keys_config[index].tecla ) )
1a00077c:	4a32      	ldr	r2, [pc, #200]	; (1a000848 <keys_Update_Isr+0x130>)
1a00077e:	687b      	ldr	r3, [r7, #4]
1a000780:	4413      	add	r3, r2
1a000782:	f993 3000 	ldrsb.w	r3, [r3]
1a000786:	4618      	mov	r0, r3
1a000788:	f004 fcc8 	bl	1a00511c <gpioRead>
1a00078c:	4603      	mov	r3, r0
1a00078e:	2b00      	cmp	r3, #0
1a000790:	d10c      	bne.n	1a0007ac <keys_Update_Isr+0x94>
            {
                keys_data[index].state = STATE_BUTTON_DOWN;
1a000792:	492c      	ldr	r1, [pc, #176]	; (1a000844 <keys_Update_Isr+0x12c>)
1a000794:	687a      	ldr	r2, [r7, #4]
1a000796:	4613      	mov	r3, r2
1a000798:	005b      	lsls	r3, r3, #1
1a00079a:	4413      	add	r3, r2
1a00079c:	00db      	lsls	r3, r3, #3
1a00079e:	440b      	add	r3, r1
1a0007a0:	2201      	movs	r2, #1
1a0007a2:	701a      	strb	r2, [r3, #0]

                /* ACCION DEL EVENTO !*/
                buttonPressed( index );
1a0007a4:	6878      	ldr	r0, [r7, #4]
1a0007a6:	f000 f851 	bl	1a00084c <buttonPressed>
            {
                keys_data[index].state = STATE_BUTTON_UP;
            }

            /* LEAVE */
            break;
1a0007aa:	e047      	b.n	1a00083c <keys_Update_Isr+0x124>
                keys_data[index].state = STATE_BUTTON_UP;
1a0007ac:	4925      	ldr	r1, [pc, #148]	; (1a000844 <keys_Update_Isr+0x12c>)
1a0007ae:	687a      	ldr	r2, [r7, #4]
1a0007b0:	4613      	mov	r3, r2
1a0007b2:	005b      	lsls	r3, r3, #1
1a0007b4:	4413      	add	r3, r2
1a0007b6:	00db      	lsls	r3, r3, #3
1a0007b8:	440b      	add	r3, r1
1a0007ba:	2200      	movs	r2, #0
1a0007bc:	701a      	strb	r2, [r3, #0]
            break;
1a0007be:	e03d      	b.n	1a00083c <keys_Update_Isr+0x124>

        case STATE_BUTTON_DOWN:

            /* espero una señal de la tecla */
            xSemaphoreTake( keys_data[index].isr_signal, portMAX_DELAY );
1a0007c0:	4920      	ldr	r1, [pc, #128]	; (1a000844 <keys_Update_Isr+0x12c>)
1a0007c2:	687a      	ldr	r2, [r7, #4]
1a0007c4:	4613      	mov	r3, r2
1a0007c6:	005b      	lsls	r3, r3, #1
1a0007c8:	4413      	add	r3, r2
1a0007ca:	00db      	lsls	r3, r3, #3
1a0007cc:	440b      	add	r3, r1
1a0007ce:	3310      	adds	r3, #16
1a0007d0:	681b      	ldr	r3, [r3, #0]
1a0007d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0007d6:	4618      	mov	r0, r3
1a0007d8:	f001 f85c 	bl	1a001894 <xQueueSemaphoreTake>

            /* la tecla se pulsó */
            keys_data[index].state = STATE_BUTTON_RISING;
1a0007dc:	4919      	ldr	r1, [pc, #100]	; (1a000844 <keys_Update_Isr+0x12c>)
1a0007de:	687a      	ldr	r2, [r7, #4]
1a0007e0:	4613      	mov	r3, r2
1a0007e2:	005b      	lsls	r3, r3, #1
1a0007e4:	4413      	add	r3, r2
1a0007e6:	00db      	lsls	r3, r3, #3
1a0007e8:	440b      	add	r3, r1
1a0007ea:	2203      	movs	r2, #3
1a0007ec:	701a      	strb	r2, [r3, #0]

            break;
1a0007ee:	e025      	b.n	1a00083c <keys_Update_Isr+0x124>
        case STATE_BUTTON_RISING:
            /* ENTRY */

            /* CHECK TRANSITION CONDITIONS */

            if( gpioRead( keys_config[index].tecla ) )
1a0007f0:	4a15      	ldr	r2, [pc, #84]	; (1a000848 <keys_Update_Isr+0x130>)
1a0007f2:	687b      	ldr	r3, [r7, #4]
1a0007f4:	4413      	add	r3, r2
1a0007f6:	f993 3000 	ldrsb.w	r3, [r3]
1a0007fa:	4618      	mov	r0, r3
1a0007fc:	f004 fc8e 	bl	1a00511c <gpioRead>
1a000800:	4603      	mov	r3, r0
1a000802:	2b00      	cmp	r3, #0
1a000804:	d00c      	beq.n	1a000820 <keys_Update_Isr+0x108>
            {
                keys_data[index].state = STATE_BUTTON_UP;
1a000806:	490f      	ldr	r1, [pc, #60]	; (1a000844 <keys_Update_Isr+0x12c>)
1a000808:	687a      	ldr	r2, [r7, #4]
1a00080a:	4613      	mov	r3, r2
1a00080c:	005b      	lsls	r3, r3, #1
1a00080e:	4413      	add	r3, r2
1a000810:	00db      	lsls	r3, r3, #3
1a000812:	440b      	add	r3, r1
1a000814:	2200      	movs	r2, #0
1a000816:	701a      	strb	r2, [r3, #0]

                /* ACCION DEL EVENTO ! */
                buttonReleased( index );
1a000818:	6878      	ldr	r0, [r7, #4]
1a00081a:	f000 f833 	bl	1a000884 <buttonReleased>
            {
                keys_data[index].state = STATE_BUTTON_DOWN;
            }

            /* LEAVE */
            break;
1a00081e:	e00d      	b.n	1a00083c <keys_Update_Isr+0x124>
                keys_data[index].state = STATE_BUTTON_DOWN;
1a000820:	4908      	ldr	r1, [pc, #32]	; (1a000844 <keys_Update_Isr+0x12c>)
1a000822:	687a      	ldr	r2, [r7, #4]
1a000824:	4613      	mov	r3, r2
1a000826:	005b      	lsls	r3, r3, #1
1a000828:	4413      	add	r3, r2
1a00082a:	00db      	lsls	r3, r3, #3
1a00082c:	440b      	add	r3, r1
1a00082e:	2201      	movs	r2, #1
1a000830:	701a      	strb	r2, [r3, #0]
            break;
1a000832:	e003      	b.n	1a00083c <keys_Update_Isr+0x124>

        default:
            keys_ButtonError( index );
1a000834:	6878      	ldr	r0, [r7, #4]
1a000836:	f000 f86b 	bl	1a000910 <keys_ButtonError>
            break;
1a00083a:	bf00      	nop
    }
}
1a00083c:	bf00      	nop
1a00083e:	3708      	adds	r7, #8
1a000840:	46bd      	mov	sp, r7
1a000842:	bd80      	pop	{r7, pc}
1a000844:	10002b60 	.word	0x10002b60
1a000848:	1a00adb4 	.word	0x1a00adb4

1a00084c <buttonPressed>:
/*=====[Implementations of private functions]================================*/

/* accion de el evento de tecla pulsada */
static void buttonPressed( uint32_t index )
{
1a00084c:	b580      	push	{r7, lr}
1a00084e:	b084      	sub	sp, #16
1a000850:	af00      	add	r7, sp, #0
1a000852:	6078      	str	r0, [r7, #4]
    TickType_t current_tick_count = xTaskGetTickCount();
1a000854:	f001 fdcc 	bl	1a0023f0 <xTaskGetTickCount>
1a000858:	60f8      	str	r0, [r7, #12]

    taskENTER_CRITICAL();
1a00085a:	f002 fc1f 	bl	1a00309c <vPortEnterCritical>
    keys_data[index].time_down = current_tick_count;
1a00085e:	4908      	ldr	r1, [pc, #32]	; (1a000880 <buttonPressed+0x34>)
1a000860:	687a      	ldr	r2, [r7, #4]
1a000862:	4613      	mov	r3, r2
1a000864:	005b      	lsls	r3, r3, #1
1a000866:	4413      	add	r3, r2
1a000868:	00db      	lsls	r3, r3, #3
1a00086a:	440b      	add	r3, r1
1a00086c:	3304      	adds	r3, #4
1a00086e:	68fa      	ldr	r2, [r7, #12]
1a000870:	601a      	str	r2, [r3, #0]
    taskEXIT_CRITICAL();
1a000872:	f002 fc41 	bl	1a0030f8 <vPortExitCritical>
}
1a000876:	bf00      	nop
1a000878:	3710      	adds	r7, #16
1a00087a:	46bd      	mov	sp, r7
1a00087c:	bd80      	pop	{r7, pc}
1a00087e:	bf00      	nop
1a000880:	10002b60 	.word	0x10002b60

1a000884 <buttonReleased>:

/* accion de el evento de tecla liberada */
static void buttonReleased( uint32_t index )
{
1a000884:	b580      	push	{r7, lr}
1a000886:	b084      	sub	sp, #16
1a000888:	af00      	add	r7, sp, #0
1a00088a:	6078      	str	r0, [r7, #4]
    TickType_t current_tick_count = xTaskGetTickCount();
1a00088c:	f001 fdb0 	bl	1a0023f0 <xTaskGetTickCount>
1a000890:	60f8      	str	r0, [r7, #12]

    taskENTER_CRITICAL();
1a000892:	f002 fc03 	bl	1a00309c <vPortEnterCritical>
    keys_data[index].time_up    = current_tick_count;
1a000896:	491d      	ldr	r1, [pc, #116]	; (1a00090c <buttonReleased+0x88>)
1a000898:	687a      	ldr	r2, [r7, #4]
1a00089a:	4613      	mov	r3, r2
1a00089c:	005b      	lsls	r3, r3, #1
1a00089e:	4413      	add	r3, r2
1a0008a0:	00db      	lsls	r3, r3, #3
1a0008a2:	440b      	add	r3, r1
1a0008a4:	3308      	adds	r3, #8
1a0008a6:	68fa      	ldr	r2, [r7, #12]
1a0008a8:	601a      	str	r2, [r3, #0]
    keys_data[index].time_diff  = keys_data[index].time_up - keys_data[index].time_down;
1a0008aa:	4918      	ldr	r1, [pc, #96]	; (1a00090c <buttonReleased+0x88>)
1a0008ac:	687a      	ldr	r2, [r7, #4]
1a0008ae:	4613      	mov	r3, r2
1a0008b0:	005b      	lsls	r3, r3, #1
1a0008b2:	4413      	add	r3, r2
1a0008b4:	00db      	lsls	r3, r3, #3
1a0008b6:	440b      	add	r3, r1
1a0008b8:	3308      	adds	r3, #8
1a0008ba:	6819      	ldr	r1, [r3, #0]
1a0008bc:	4813      	ldr	r0, [pc, #76]	; (1a00090c <buttonReleased+0x88>)
1a0008be:	687a      	ldr	r2, [r7, #4]
1a0008c0:	4613      	mov	r3, r2
1a0008c2:	005b      	lsls	r3, r3, #1
1a0008c4:	4413      	add	r3, r2
1a0008c6:	00db      	lsls	r3, r3, #3
1a0008c8:	4403      	add	r3, r0
1a0008ca:	3304      	adds	r3, #4
1a0008cc:	681b      	ldr	r3, [r3, #0]
1a0008ce:	1ac9      	subs	r1, r1, r3
1a0008d0:	480e      	ldr	r0, [pc, #56]	; (1a00090c <buttonReleased+0x88>)
1a0008d2:	687a      	ldr	r2, [r7, #4]
1a0008d4:	4613      	mov	r3, r2
1a0008d6:	005b      	lsls	r3, r3, #1
1a0008d8:	4413      	add	r3, r2
1a0008da:	00db      	lsls	r3, r3, #3
1a0008dc:	4403      	add	r3, r0
1a0008de:	330c      	adds	r3, #12
1a0008e0:	6019      	str	r1, [r3, #0]
    taskEXIT_CRITICAL();
1a0008e2:	f002 fc09 	bl	1a0030f8 <vPortExitCritical>

    xSemaphoreGive( keys_data[index].pressed_signal ) ;
1a0008e6:	4909      	ldr	r1, [pc, #36]	; (1a00090c <buttonReleased+0x88>)
1a0008e8:	687a      	ldr	r2, [r7, #4]
1a0008ea:	4613      	mov	r3, r2
1a0008ec:	005b      	lsls	r3, r3, #1
1a0008ee:	4413      	add	r3, r2
1a0008f0:	00db      	lsls	r3, r3, #3
1a0008f2:	440b      	add	r3, r1
1a0008f4:	3314      	adds	r3, #20
1a0008f6:	6818      	ldr	r0, [r3, #0]
1a0008f8:	2300      	movs	r3, #0
1a0008fa:	2200      	movs	r2, #0
1a0008fc:	2100      	movs	r1, #0
1a0008fe:	f000 fe5b 	bl	1a0015b8 <xQueueGenericSend>
}
1a000902:	bf00      	nop
1a000904:	3710      	adds	r7, #16
1a000906:	46bd      	mov	sp, r7
1a000908:	bd80      	pop	{r7, pc}
1a00090a:	bf00      	nop
1a00090c:	10002b60 	.word	0x10002b60

1a000910 <keys_ButtonError>:

static void keys_ButtonError( uint32_t index )
{
1a000910:	b580      	push	{r7, lr}
1a000912:	b082      	sub	sp, #8
1a000914:	af00      	add	r7, sp, #0
1a000916:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
1a000918:	f002 fbc0 	bl	1a00309c <vPortEnterCritical>
    keys_data[index].state = BUTTON_UP;
1a00091c:	4907      	ldr	r1, [pc, #28]	; (1a00093c <keys_ButtonError+0x2c>)
1a00091e:	687a      	ldr	r2, [r7, #4]
1a000920:	4613      	mov	r3, r2
1a000922:	005b      	lsls	r3, r3, #1
1a000924:	4413      	add	r3, r2
1a000926:	00db      	lsls	r3, r3, #3
1a000928:	440b      	add	r3, r1
1a00092a:	2200      	movs	r2, #0
1a00092c:	701a      	strb	r2, [r3, #0]
    taskEXIT_CRITICAL();
1a00092e:	f002 fbe3 	bl	1a0030f8 <vPortExitCritical>
}
1a000932:	bf00      	nop
1a000934:	3708      	adds	r7, #8
1a000936:	46bd      	mov	sp, r7
1a000938:	bd80      	pop	{r7, pc}
1a00093a:	bf00      	nop
1a00093c:	10002b60 	.word	0x10002b60

1a000940 <task_tecla1>:

/*=====[Implementations of private functions]=================================*/
void task_tecla1( void* taskParmPtr )
{
1a000940:	b580      	push	{r7, lr}
1a000942:	b082      	sub	sp, #8
1a000944:	af00      	add	r7, sp, #0
1a000946:	6078      	str	r0, [r7, #4]
    while( 1 )
    {
        keys_Update_Isr( TEC1_INDEX );
1a000948:	2000      	movs	r0, #0
1a00094a:	f7ff fee5 	bl	1a000718 <keys_Update_Isr>
        vTaskDelay( DEBOUNCE_TIME / portTICK_RATE_MS );
1a00094e:	2028      	movs	r0, #40	; 0x28
1a000950:	f001 fc2a 	bl	1a0021a8 <vTaskDelay>
        keys_Update_Isr( TEC1_INDEX );
1a000954:	e7f8      	b.n	1a000948 <task_tecla1+0x8>

1a000956 <task_tecla2>:
    }
}

void task_tecla2( void* taskParmPtr )
{
1a000956:	b580      	push	{r7, lr}
1a000958:	b082      	sub	sp, #8
1a00095a:	af00      	add	r7, sp, #0
1a00095c:	6078      	str	r0, [r7, #4]
    while( 1 )
    {
        keys_Update_Isr( TEC2_INDEX );
1a00095e:	2001      	movs	r0, #1
1a000960:	f7ff feda 	bl	1a000718 <keys_Update_Isr>
        vTaskDelay( DEBOUNCE_TIME / portTICK_RATE_MS );
1a000964:	2028      	movs	r0, #40	; 0x28
1a000966:	f001 fc1f 	bl	1a0021a8 <vTaskDelay>
        keys_Update_Isr( TEC2_INDEX );
1a00096a:	e7f8      	b.n	1a00095e <task_tecla2+0x8>

1a00096c <task_tecla3>:
    }
}

void task_tecla3( void* taskParmPtr )
{
1a00096c:	b580      	push	{r7, lr}
1a00096e:	b082      	sub	sp, #8
1a000970:	af00      	add	r7, sp, #0
1a000972:	6078      	str	r0, [r7, #4]
    while( 1 )
    {
        keys_Update_Isr( TEC3_INDEX );
1a000974:	2002      	movs	r0, #2
1a000976:	f7ff fecf 	bl	1a000718 <keys_Update_Isr>
        vTaskDelay( DEBOUNCE_TIME / portTICK_RATE_MS );
1a00097a:	2028      	movs	r0, #40	; 0x28
1a00097c:	f001 fc14 	bl	1a0021a8 <vTaskDelay>
        keys_Update_Isr( TEC3_INDEX );
1a000980:	e7f8      	b.n	1a000974 <task_tecla3+0x8>

1a000982 <task_tecla4>:
    }
}

void task_tecla4( void* taskParmPtr )
{
1a000982:	b580      	push	{r7, lr}
1a000984:	b082      	sub	sp, #8
1a000986:	af00      	add	r7, sp, #0
1a000988:	6078      	str	r0, [r7, #4]
    while( 1 )
    {
        keys_Update_Isr( TEC4_INDEX );
1a00098a:	2003      	movs	r0, #3
1a00098c:	f7ff fec4 	bl	1a000718 <keys_Update_Isr>
        vTaskDelay( DEBOUNCE_TIME / portTICK_RATE_MS );
1a000990:	2028      	movs	r0, #40	; 0x28
1a000992:	f001 fc09 	bl	1a0021a8 <vTaskDelay>
        keys_Update_Isr( TEC4_INDEX );
1a000996:	e7f8      	b.n	1a00098a <task_tecla4+0x8>

1a000998 <keys_isr_config>:
/**
   @brief   Inicializa las interrupciones asociadas al driver keys.c
			Se realiza sobre las cuatro teclas de la EDUCIAA
 */
void keys_isr_config( void )
{
1a000998:	b580      	push	{r7, lr}
1a00099a:	af00      	add	r7, sp, #0
    //Inicializamos las interrupciones (LPCopen)
    Chip_PININT_Init( LPC_GPIO_PIN_INT );
1a00099c:	4852      	ldr	r0, [pc, #328]	; (1a000ae8 <keys_isr_config+0x150>)
1a00099e:	f7ff fd31 	bl	1a000404 <Chip_PININT_Init>
    Chip_PININT_EnableIntLow( LPC_GPIO_PIN_INT, PININTCH( j ) );                        // INTj //Selecciona activo por flanco descendente
    Chip_PININT_EnableIntHigh( LPC_GPIO_PIN_INT, PININTCH( j ) );                       // INTj //Selecciona activo por flanco ascendente
    */

    // TEC1 FALL
    Chip_SCU_GPIOIntPinSel( 0, 0, 4 ); 	//(Canal 0 a 7, Puerto GPIO, Pin GPIO)
1a0009a2:	2204      	movs	r2, #4
1a0009a4:	2100      	movs	r1, #0
1a0009a6:	2000      	movs	r0, #0
1a0009a8:	f7ff fcf2 	bl	1a000390 <Chip_SCU_GPIOIntPinSel>
    Chip_PININT_SetPinModeEdge( LPC_GPIO_PIN_INT, PININTCH0 ); //Se configura el canal para que se active por flanco
1a0009ac:	2101      	movs	r1, #1
1a0009ae:	484e      	ldr	r0, [pc, #312]	; (1a000ae8 <keys_isr_config+0x150>)
1a0009b0:	f7ff fd32 	bl	1a000418 <Chip_PININT_SetPinModeEdge>
    Chip_PININT_EnableIntLow( LPC_GPIO_PIN_INT, PININTCH0 ); //Se configura para que el flanco sea el de bajada
1a0009b4:	2101      	movs	r1, #1
1a0009b6:	484c      	ldr	r0, [pc, #304]	; (1a000ae8 <keys_isr_config+0x150>)
1a0009b8:	f7ff fd4e 	bl	1a000458 <Chip_PININT_EnableIntLow>

    // TEC1 RISE
    Chip_SCU_GPIOIntPinSel( 1, 0, 4 );	//(Canal 0 a 7, Puerto GPIO, Pin GPIO)
1a0009bc:	2204      	movs	r2, #4
1a0009be:	2100      	movs	r1, #0
1a0009c0:	2001      	movs	r0, #1
1a0009c2:	f7ff fce5 	bl	1a000390 <Chip_SCU_GPIOIntPinSel>
    Chip_PININT_SetPinModeEdge( LPC_GPIO_PIN_INT, PININTCH1 ); //Se configura el canal para que se active por flanco
1a0009c6:	2102      	movs	r1, #2
1a0009c8:	4847      	ldr	r0, [pc, #284]	; (1a000ae8 <keys_isr_config+0x150>)
1a0009ca:	f7ff fd25 	bl	1a000418 <Chip_PININT_SetPinModeEdge>
    Chip_PININT_EnableIntHigh( LPC_GPIO_PIN_INT, PININTCH1 ); //En este caso el flanco es de subida
1a0009ce:	2102      	movs	r1, #2
1a0009d0:	4845      	ldr	r0, [pc, #276]	; (1a000ae8 <keys_isr_config+0x150>)
1a0009d2:	f7ff fd33 	bl	1a00043c <Chip_PININT_EnableIntHigh>

    // TEC2 FALL
    Chip_SCU_GPIOIntPinSel( 2, 0, 8 );
1a0009d6:	2208      	movs	r2, #8
1a0009d8:	2100      	movs	r1, #0
1a0009da:	2002      	movs	r0, #2
1a0009dc:	f7ff fcd8 	bl	1a000390 <Chip_SCU_GPIOIntPinSel>
    Chip_PININT_SetPinModeEdge( LPC_GPIO_PIN_INT, PININTCH2 );
1a0009e0:	2104      	movs	r1, #4
1a0009e2:	4841      	ldr	r0, [pc, #260]	; (1a000ae8 <keys_isr_config+0x150>)
1a0009e4:	f7ff fd18 	bl	1a000418 <Chip_PININT_SetPinModeEdge>
    Chip_PININT_EnableIntLow( LPC_GPIO_PIN_INT, PININTCH2 );
1a0009e8:	2104      	movs	r1, #4
1a0009ea:	483f      	ldr	r0, [pc, #252]	; (1a000ae8 <keys_isr_config+0x150>)
1a0009ec:	f7ff fd34 	bl	1a000458 <Chip_PININT_EnableIntLow>

    // TEC1 RISE
    Chip_SCU_GPIOIntPinSel( 3, 0, 8 );
1a0009f0:	2208      	movs	r2, #8
1a0009f2:	2100      	movs	r1, #0
1a0009f4:	2003      	movs	r0, #3
1a0009f6:	f7ff fccb 	bl	1a000390 <Chip_SCU_GPIOIntPinSel>
    Chip_PININT_SetPinModeEdge( LPC_GPIO_PIN_INT, PININTCH3 );
1a0009fa:	2108      	movs	r1, #8
1a0009fc:	483a      	ldr	r0, [pc, #232]	; (1a000ae8 <keys_isr_config+0x150>)
1a0009fe:	f7ff fd0b 	bl	1a000418 <Chip_PININT_SetPinModeEdge>
    Chip_PININT_EnableIntHigh( LPC_GPIO_PIN_INT, PININTCH3 );
1a000a02:	2108      	movs	r1, #8
1a000a04:	4838      	ldr	r0, [pc, #224]	; (1a000ae8 <keys_isr_config+0x150>)
1a000a06:	f7ff fd19 	bl	1a00043c <Chip_PININT_EnableIntHigh>

    // TEC3 FALL
    Chip_SCU_GPIOIntPinSel( 4, 0, 9 );
1a000a0a:	2209      	movs	r2, #9
1a000a0c:	2100      	movs	r1, #0
1a000a0e:	2004      	movs	r0, #4
1a000a10:	f7ff fcbe 	bl	1a000390 <Chip_SCU_GPIOIntPinSel>
    Chip_PININT_SetPinModeEdge( LPC_GPIO_PIN_INT, PININTCH4 );
1a000a14:	2110      	movs	r1, #16
1a000a16:	4834      	ldr	r0, [pc, #208]	; (1a000ae8 <keys_isr_config+0x150>)
1a000a18:	f7ff fcfe 	bl	1a000418 <Chip_PININT_SetPinModeEdge>
    Chip_PININT_EnableIntLow( LPC_GPIO_PIN_INT, PININTCH4 );
1a000a1c:	2110      	movs	r1, #16
1a000a1e:	4832      	ldr	r0, [pc, #200]	; (1a000ae8 <keys_isr_config+0x150>)
1a000a20:	f7ff fd1a 	bl	1a000458 <Chip_PININT_EnableIntLow>

    // TEC1 RISE
    Chip_SCU_GPIOIntPinSel( 5, 0, 9 );
1a000a24:	2209      	movs	r2, #9
1a000a26:	2100      	movs	r1, #0
1a000a28:	2005      	movs	r0, #5
1a000a2a:	f7ff fcb1 	bl	1a000390 <Chip_SCU_GPIOIntPinSel>
    Chip_PININT_SetPinModeEdge( LPC_GPIO_PIN_INT, PININTCH5 );
1a000a2e:	2120      	movs	r1, #32
1a000a30:	482d      	ldr	r0, [pc, #180]	; (1a000ae8 <keys_isr_config+0x150>)
1a000a32:	f7ff fcf1 	bl	1a000418 <Chip_PININT_SetPinModeEdge>
    Chip_PININT_EnableIntHigh( LPC_GPIO_PIN_INT, PININTCH5 );
1a000a36:	2120      	movs	r1, #32
1a000a38:	482b      	ldr	r0, [pc, #172]	; (1a000ae8 <keys_isr_config+0x150>)
1a000a3a:	f7ff fcff 	bl	1a00043c <Chip_PININT_EnableIntHigh>

    // TEC4 FALL
    Chip_SCU_GPIOIntPinSel( 6, 1, 9 );
1a000a3e:	2209      	movs	r2, #9
1a000a40:	2101      	movs	r1, #1
1a000a42:	2006      	movs	r0, #6
1a000a44:	f7ff fca4 	bl	1a000390 <Chip_SCU_GPIOIntPinSel>
    Chip_PININT_SetPinModeEdge( LPC_GPIO_PIN_INT, PININTCH6 );
1a000a48:	2140      	movs	r1, #64	; 0x40
1a000a4a:	4827      	ldr	r0, [pc, #156]	; (1a000ae8 <keys_isr_config+0x150>)
1a000a4c:	f7ff fce4 	bl	1a000418 <Chip_PININT_SetPinModeEdge>
    Chip_PININT_EnableIntLow( LPC_GPIO_PIN_INT, PININTCH6 );
1a000a50:	2140      	movs	r1, #64	; 0x40
1a000a52:	4825      	ldr	r0, [pc, #148]	; (1a000ae8 <keys_isr_config+0x150>)
1a000a54:	f7ff fd00 	bl	1a000458 <Chip_PININT_EnableIntLow>

    // TEC4 RISE
    Chip_SCU_GPIOIntPinSel( 7, 1, 9 );
1a000a58:	2209      	movs	r2, #9
1a000a5a:	2101      	movs	r1, #1
1a000a5c:	2007      	movs	r0, #7
1a000a5e:	f7ff fc97 	bl	1a000390 <Chip_SCU_GPIOIntPinSel>
    Chip_PININT_SetPinModeEdge( LPC_GPIO_PIN_INT, PININTCH7 );
1a000a62:	2180      	movs	r1, #128	; 0x80
1a000a64:	4820      	ldr	r0, [pc, #128]	; (1a000ae8 <keys_isr_config+0x150>)
1a000a66:	f7ff fcd7 	bl	1a000418 <Chip_PININT_SetPinModeEdge>
    Chip_PININT_EnableIntHigh( LPC_GPIO_PIN_INT, PININTCH7 );
1a000a6a:	2180      	movs	r1, #128	; 0x80
1a000a6c:	481e      	ldr	r0, [pc, #120]	; (1a000ae8 <keys_isr_config+0x150>)
1a000a6e:	f7ff fce5 	bl	1a00043c <Chip_PININT_EnableIntHigh>

    //Una vez que se han configurado los eventos para cada canal de interrupcion
    //Se activan las interrupciones para que comiencen a llamar al handler
    NVIC_SetPriority( PIN_INT0_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
1a000a72:	2105      	movs	r1, #5
1a000a74:	2020      	movs	r0, #32
1a000a76:	f7ff fc61 	bl	1a00033c <__NVIC_SetPriority>
    NVIC_EnableIRQ( PIN_INT0_IRQn );
1a000a7a:	2020      	movs	r0, #32
1a000a7c:	f7ff fc40 	bl	1a000300 <__NVIC_EnableIRQ>
    NVIC_SetPriority( PIN_INT1_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
1a000a80:	2105      	movs	r1, #5
1a000a82:	2021      	movs	r0, #33	; 0x21
1a000a84:	f7ff fc5a 	bl	1a00033c <__NVIC_SetPriority>
    NVIC_EnableIRQ( PIN_INT1_IRQn );
1a000a88:	2021      	movs	r0, #33	; 0x21
1a000a8a:	f7ff fc39 	bl	1a000300 <__NVIC_EnableIRQ>
    NVIC_SetPriority( PIN_INT2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
1a000a8e:	2105      	movs	r1, #5
1a000a90:	2022      	movs	r0, #34	; 0x22
1a000a92:	f7ff fc53 	bl	1a00033c <__NVIC_SetPriority>
    NVIC_EnableIRQ( PIN_INT2_IRQn );
1a000a96:	2022      	movs	r0, #34	; 0x22
1a000a98:	f7ff fc32 	bl	1a000300 <__NVIC_EnableIRQ>
    NVIC_SetPriority( PIN_INT3_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
1a000a9c:	2105      	movs	r1, #5
1a000a9e:	2023      	movs	r0, #35	; 0x23
1a000aa0:	f7ff fc4c 	bl	1a00033c <__NVIC_SetPriority>
    NVIC_EnableIRQ( PIN_INT3_IRQn );
1a000aa4:	2023      	movs	r0, #35	; 0x23
1a000aa6:	f7ff fc2b 	bl	1a000300 <__NVIC_EnableIRQ>
    NVIC_SetPriority( PIN_INT4_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
1a000aaa:	2105      	movs	r1, #5
1a000aac:	2024      	movs	r0, #36	; 0x24
1a000aae:	f7ff fc45 	bl	1a00033c <__NVIC_SetPriority>
    NVIC_EnableIRQ( PIN_INT4_IRQn );
1a000ab2:	2024      	movs	r0, #36	; 0x24
1a000ab4:	f7ff fc24 	bl	1a000300 <__NVIC_EnableIRQ>
    NVIC_SetPriority( PIN_INT5_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
1a000ab8:	2105      	movs	r1, #5
1a000aba:	2025      	movs	r0, #37	; 0x25
1a000abc:	f7ff fc3e 	bl	1a00033c <__NVIC_SetPriority>
    NVIC_EnableIRQ( PIN_INT5_IRQn );
1a000ac0:	2025      	movs	r0, #37	; 0x25
1a000ac2:	f7ff fc1d 	bl	1a000300 <__NVIC_EnableIRQ>
    NVIC_SetPriority( PIN_INT6_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
1a000ac6:	2105      	movs	r1, #5
1a000ac8:	2026      	movs	r0, #38	; 0x26
1a000aca:	f7ff fc37 	bl	1a00033c <__NVIC_SetPriority>
    NVIC_EnableIRQ( PIN_INT6_IRQn );
1a000ace:	2026      	movs	r0, #38	; 0x26
1a000ad0:	f7ff fc16 	bl	1a000300 <__NVIC_EnableIRQ>
    NVIC_SetPriority( PIN_INT7_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
1a000ad4:	2105      	movs	r1, #5
1a000ad6:	2027      	movs	r0, #39	; 0x27
1a000ad8:	f7ff fc30 	bl	1a00033c <__NVIC_SetPriority>
    NVIC_EnableIRQ( PIN_INT7_IRQn );
1a000adc:	2027      	movs	r0, #39	; 0x27
1a000ade:	f7ff fc0f 	bl	1a000300 <__NVIC_EnableIRQ>
}
1a000ae2:	bf00      	nop
1a000ae4:	bd80      	pop	{r7, pc}
1a000ae6:	bf00      	nop
1a000ae8:	40087000 	.word	0x40087000

1a000aec <keys_isr_fall>:
   @brief handler de evento de tecla pulsada

   @param index
 */
void keys_isr_fall( uint32_t index )
{
1a000aec:	b580      	push	{r7, lr}
1a000aee:	b086      	sub	sp, #24
1a000af0:	af00      	add	r7, sp, #0
1a000af2:	6078      	str	r0, [r7, #4]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000af4:	f3ef 8211 	mrs	r2, BASEPRI
1a000af8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000afc:	f383 8811 	msr	BASEPRI, r3
1a000b00:	f3bf 8f6f 	isb	sy
1a000b04:	f3bf 8f4f 	dsb	sy
1a000b08:	60fa      	str	r2, [r7, #12]
1a000b0a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
1a000b0c:	68fb      	ldr	r3, [r7, #12]
    UBaseType_t uxSavedInterruptStatus;

    /* esta operacion debe realizarse en zona critica. Recordar que el objeto global puede estar leyendose
       o escribiendose en otro contexto  */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
1a000b0e:	617b      	str	r3, [r7, #20]
    keys_data[index].time_down = xTaskGetTickCountFromISR();
1a000b10:	f001 fc7e 	bl	1a002410 <xTaskGetTickCountFromISR>
1a000b14:	4908      	ldr	r1, [pc, #32]	; (1a000b38 <keys_isr_fall+0x4c>)
1a000b16:	687a      	ldr	r2, [r7, #4]
1a000b18:	4613      	mov	r3, r2
1a000b1a:	005b      	lsls	r3, r3, #1
1a000b1c:	4413      	add	r3, r2
1a000b1e:	00db      	lsls	r3, r3, #3
1a000b20:	440b      	add	r3, r1
1a000b22:	3304      	adds	r3, #4
1a000b24:	6018      	str	r0, [r3, #0]
1a000b26:	697b      	ldr	r3, [r7, #20]
1a000b28:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000b2a:	693b      	ldr	r3, [r7, #16]
1a000b2c:	f383 8811 	msr	BASEPRI, r3
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

}
1a000b30:	bf00      	nop
1a000b32:	3718      	adds	r7, #24
1a000b34:	46bd      	mov	sp, r7
1a000b36:	bd80      	pop	{r7, pc}
1a000b38:	10002b60 	.word	0x10002b60

1a000b3c <keys_isr_rise>:
   @brief handler de evento de tecla liberada

   @param index
 */
void keys_isr_rise( uint32_t index )
{
1a000b3c:	b580      	push	{r7, lr}
1a000b3e:	b086      	sub	sp, #24
1a000b40:	af00      	add	r7, sp, #0
1a000b42:	6078      	str	r0, [r7, #4]
	__asm volatile
1a000b44:	f3ef 8211 	mrs	r2, BASEPRI
1a000b48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b4c:	f383 8811 	msr	BASEPRI, r3
1a000b50:	f3bf 8f6f 	isb	sy
1a000b54:	f3bf 8f4f 	dsb	sy
1a000b58:	60fa      	str	r2, [r7, #12]
1a000b5a:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
1a000b5c:	68fb      	ldr	r3, [r7, #12]
    UBaseType_t uxSavedInterruptStatus;

    /* esta operacion debe realizarse en zona critica. Recordar que el objeto global puede estar leyendose
       o escribiendose en otro contexto  */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
1a000b5e:	617b      	str	r3, [r7, #20]
    keys_data[index].time_up = xTaskGetTickCountFromISR();
1a000b60:	f001 fc56 	bl	1a002410 <xTaskGetTickCountFromISR>
1a000b64:	4908      	ldr	r1, [pc, #32]	; (1a000b88 <keys_isr_rise+0x4c>)
1a000b66:	687a      	ldr	r2, [r7, #4]
1a000b68:	4613      	mov	r3, r2
1a000b6a:	005b      	lsls	r3, r3, #1
1a000b6c:	4413      	add	r3, r2
1a000b6e:	00db      	lsls	r3, r3, #3
1a000b70:	440b      	add	r3, r1
1a000b72:	3308      	adds	r3, #8
1a000b74:	6018      	str	r0, [r3, #0]
1a000b76:	697b      	ldr	r3, [r7, #20]
1a000b78:	613b      	str	r3, [r7, #16]
	__asm volatile
1a000b7a:	693b      	ldr	r3, [r7, #16]
1a000b7c:	f383 8811 	msr	BASEPRI, r3
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
}
1a000b80:	bf00      	nop
1a000b82:	3718      	adds	r7, #24
1a000b84:	46bd      	mov	sp, r7
1a000b86:	bd80      	pop	{r7, pc}
1a000b88:	10002b60 	.word	0x10002b60

1a000b8c <GPIO0_IRQHandler>:

void GPIO0_IRQHandler( void )   //asociado a tec1
{
1a000b8c:	b580      	push	{r7, lr}
1a000b8e:	b082      	sub	sp, #8
1a000b90:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000b92:	2300      	movs	r3, #0
1a000b94:	607b      	str	r3, [r7, #4]

    if ( Chip_PININT_GetFallStates( LPC_GPIO_PIN_INT ) & PININTCH0 ) //Verificamos que la interrupciÃ³n es la esperada
1a000b96:	4812      	ldr	r0, [pc, #72]	; (1a000be0 <GPIO0_IRQHandler+0x54>)
1a000b98:	f7ff fc78 	bl	1a00048c <Chip_PININT_GetFallStates>
1a000b9c:	4603      	mov	r3, r0
1a000b9e:	f003 0301 	and.w	r3, r3, #1
1a000ba2:	2b00      	cmp	r3, #0
1a000ba4:	d00d      	beq.n	1a000bc2 <GPIO0_IRQHandler+0x36>
    {
        Chip_PININT_ClearIntStatus( LPC_GPIO_PIN_INT, PININTCH0 ); //Borramos el flag de interrupciÃ³n
1a000ba6:	2101      	movs	r1, #1
1a000ba8:	480d      	ldr	r0, [pc, #52]	; (1a000be0 <GPIO0_IRQHandler+0x54>)
1a000baa:	f7ff fc7b 	bl	1a0004a4 <Chip_PININT_ClearIntStatus>

        keys_isr_fall( TEC1_INDEX );
1a000bae:	2000      	movs	r0, #0
1a000bb0:	f7ff ff9c 	bl	1a000aec <keys_isr_fall>

        xSemaphoreGiveFromISR( keys_data[TEC1_INDEX].isr_signal, &xHigherPriorityTaskWoken );
1a000bb4:	4b0b      	ldr	r3, [pc, #44]	; (1a000be4 <GPIO0_IRQHandler+0x58>)
1a000bb6:	691b      	ldr	r3, [r3, #16]
1a000bb8:	1d3a      	adds	r2, r7, #4
1a000bba:	4611      	mov	r1, r2
1a000bbc:	4618      	mov	r0, r3
1a000bbe:	f000 fddf 	bl	1a001780 <xQueueGiveFromISR>
    }

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000bc2:	687b      	ldr	r3, [r7, #4]
1a000bc4:	2b00      	cmp	r3, #0
1a000bc6:	d007      	beq.n	1a000bd8 <GPIO0_IRQHandler+0x4c>
1a000bc8:	4b07      	ldr	r3, [pc, #28]	; (1a000be8 <GPIO0_IRQHandler+0x5c>)
1a000bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bce:	601a      	str	r2, [r3, #0]
1a000bd0:	f3bf 8f4f 	dsb	sy
1a000bd4:	f3bf 8f6f 	isb	sy
}
1a000bd8:	bf00      	nop
1a000bda:	3708      	adds	r7, #8
1a000bdc:	46bd      	mov	sp, r7
1a000bde:	bd80      	pop	{r7, pc}
1a000be0:	40087000 	.word	0x40087000
1a000be4:	10002b60 	.word	0x10002b60
1a000be8:	e000ed04 	.word	0xe000ed04

1a000bec <GPIO1_IRQHandler>:

void GPIO1_IRQHandler( void )  //asociado a tec1
{
1a000bec:	b580      	push	{r7, lr}
1a000bee:	b082      	sub	sp, #8
1a000bf0:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000bf2:	2300      	movs	r3, #0
1a000bf4:	607b      	str	r3, [r7, #4]

    if ( Chip_PININT_GetRiseStates( LPC_GPIO_PIN_INT ) & PININTCH1 )
1a000bf6:	4812      	ldr	r0, [pc, #72]	; (1a000c40 <GPIO1_IRQHandler+0x54>)
1a000bf8:	f7ff fc3c 	bl	1a000474 <Chip_PININT_GetRiseStates>
1a000bfc:	4603      	mov	r3, r0
1a000bfe:	f003 0302 	and.w	r3, r3, #2
1a000c02:	2b00      	cmp	r3, #0
1a000c04:	d00d      	beq.n	1a000c22 <GPIO1_IRQHandler+0x36>
    {
        Chip_PININT_ClearIntStatus( LPC_GPIO_PIN_INT, PININTCH1 );
1a000c06:	2102      	movs	r1, #2
1a000c08:	480d      	ldr	r0, [pc, #52]	; (1a000c40 <GPIO1_IRQHandler+0x54>)
1a000c0a:	f7ff fc4b 	bl	1a0004a4 <Chip_PININT_ClearIntStatus>

        keys_isr_rise( TEC1_INDEX );
1a000c0e:	2000      	movs	r0, #0
1a000c10:	f7ff ff94 	bl	1a000b3c <keys_isr_rise>

        xSemaphoreGiveFromISR( keys_data[TEC1_INDEX].isr_signal, &xHigherPriorityTaskWoken );
1a000c14:	4b0b      	ldr	r3, [pc, #44]	; (1a000c44 <GPIO1_IRQHandler+0x58>)
1a000c16:	691b      	ldr	r3, [r3, #16]
1a000c18:	1d3a      	adds	r2, r7, #4
1a000c1a:	4611      	mov	r1, r2
1a000c1c:	4618      	mov	r0, r3
1a000c1e:	f000 fdaf 	bl	1a001780 <xQueueGiveFromISR>
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000c22:	687b      	ldr	r3, [r7, #4]
1a000c24:	2b00      	cmp	r3, #0
1a000c26:	d007      	beq.n	1a000c38 <GPIO1_IRQHandler+0x4c>
1a000c28:	4b07      	ldr	r3, [pc, #28]	; (1a000c48 <GPIO1_IRQHandler+0x5c>)
1a000c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c2e:	601a      	str	r2, [r3, #0]
1a000c30:	f3bf 8f4f 	dsb	sy
1a000c34:	f3bf 8f6f 	isb	sy
}
1a000c38:	bf00      	nop
1a000c3a:	3708      	adds	r7, #8
1a000c3c:	46bd      	mov	sp, r7
1a000c3e:	bd80      	pop	{r7, pc}
1a000c40:	40087000 	.word	0x40087000
1a000c44:	10002b60 	.word	0x10002b60
1a000c48:	e000ed04 	.word	0xe000ed04

1a000c4c <GPIO2_IRQHandler>:

void GPIO2_IRQHandler( void )
{
1a000c4c:	b580      	push	{r7, lr}
1a000c4e:	b082      	sub	sp, #8
1a000c50:	af00      	add	r7, sp, #0
    UBaseType_t uxSavedInterruptStatus;
    BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000c52:	2300      	movs	r3, #0
1a000c54:	607b      	str	r3, [r7, #4]

    if ( Chip_PININT_GetFallStates( LPC_GPIO_PIN_INT ) & PININTCH2 ) //Verificamos que la interrupciÃ³n es la esperada
1a000c56:	4812      	ldr	r0, [pc, #72]	; (1a000ca0 <GPIO2_IRQHandler+0x54>)
1a000c58:	f7ff fc18 	bl	1a00048c <Chip_PININT_GetFallStates>
1a000c5c:	4603      	mov	r3, r0
1a000c5e:	f003 0304 	and.w	r3, r3, #4
1a000c62:	2b00      	cmp	r3, #0
1a000c64:	d00d      	beq.n	1a000c82 <GPIO2_IRQHandler+0x36>
    {
        Chip_PININT_ClearIntStatus( LPC_GPIO_PIN_INT, PININTCH2 ); //Borramos el flag de interrupciÃ³n
1a000c66:	2104      	movs	r1, #4
1a000c68:	480d      	ldr	r0, [pc, #52]	; (1a000ca0 <GPIO2_IRQHandler+0x54>)
1a000c6a:	f7ff fc1b 	bl	1a0004a4 <Chip_PININT_ClearIntStatus>

        keys_isr_fall( TEC2_INDEX );
1a000c6e:	2001      	movs	r0, #1
1a000c70:	f7ff ff3c 	bl	1a000aec <keys_isr_fall>

        xSemaphoreGiveFromISR( keys_data[TEC2_INDEX].isr_signal, &xHigherPriorityTaskWoken );
1a000c74:	4b0b      	ldr	r3, [pc, #44]	; (1a000ca4 <GPIO2_IRQHandler+0x58>)
1a000c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a000c78:	1d3a      	adds	r2, r7, #4
1a000c7a:	4611      	mov	r1, r2
1a000c7c:	4618      	mov	r0, r3
1a000c7e:	f000 fd7f 	bl	1a001780 <xQueueGiveFromISR>
    }

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000c82:	687b      	ldr	r3, [r7, #4]
1a000c84:	2b00      	cmp	r3, #0
1a000c86:	d007      	beq.n	1a000c98 <GPIO2_IRQHandler+0x4c>
1a000c88:	4b07      	ldr	r3, [pc, #28]	; (1a000ca8 <GPIO2_IRQHandler+0x5c>)
1a000c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c8e:	601a      	str	r2, [r3, #0]
1a000c90:	f3bf 8f4f 	dsb	sy
1a000c94:	f3bf 8f6f 	isb	sy
}
1a000c98:	bf00      	nop
1a000c9a:	3708      	adds	r7, #8
1a000c9c:	46bd      	mov	sp, r7
1a000c9e:	bd80      	pop	{r7, pc}
1a000ca0:	40087000 	.word	0x40087000
1a000ca4:	10002b60 	.word	0x10002b60
1a000ca8:	e000ed04 	.word	0xe000ed04

1a000cac <GPIO3_IRQHandler>:



void GPIO3_IRQHandler( void )
{
1a000cac:	b580      	push	{r7, lr}
1a000cae:	b082      	sub	sp, #8
1a000cb0:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000cb2:	2300      	movs	r3, #0
1a000cb4:	607b      	str	r3, [r7, #4]

    if ( Chip_PININT_GetRiseStates( LPC_GPIO_PIN_INT ) & PININTCH3 )
1a000cb6:	4812      	ldr	r0, [pc, #72]	; (1a000d00 <GPIO3_IRQHandler+0x54>)
1a000cb8:	f7ff fbdc 	bl	1a000474 <Chip_PININT_GetRiseStates>
1a000cbc:	4603      	mov	r3, r0
1a000cbe:	f003 0308 	and.w	r3, r3, #8
1a000cc2:	2b00      	cmp	r3, #0
1a000cc4:	d00d      	beq.n	1a000ce2 <GPIO3_IRQHandler+0x36>
    {
        Chip_PININT_ClearIntStatus( LPC_GPIO_PIN_INT, PININTCH3 );
1a000cc6:	2108      	movs	r1, #8
1a000cc8:	480d      	ldr	r0, [pc, #52]	; (1a000d00 <GPIO3_IRQHandler+0x54>)
1a000cca:	f7ff fbeb 	bl	1a0004a4 <Chip_PININT_ClearIntStatus>
        //codigo a ejecutar si ocurriÃ³ la interrupciÃ³n
        keys_isr_rise( TEC2_INDEX );
1a000cce:	2001      	movs	r0, #1
1a000cd0:	f7ff ff34 	bl	1a000b3c <keys_isr_rise>

        xSemaphoreGiveFromISR( keys_data[TEC2_INDEX].isr_signal, &xHigherPriorityTaskWoken );
1a000cd4:	4b0b      	ldr	r3, [pc, #44]	; (1a000d04 <GPIO3_IRQHandler+0x58>)
1a000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a000cd8:	1d3a      	adds	r2, r7, #4
1a000cda:	4611      	mov	r1, r2
1a000cdc:	4618      	mov	r0, r3
1a000cde:	f000 fd4f 	bl	1a001780 <xQueueGiveFromISR>
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000ce2:	687b      	ldr	r3, [r7, #4]
1a000ce4:	2b00      	cmp	r3, #0
1a000ce6:	d007      	beq.n	1a000cf8 <GPIO3_IRQHandler+0x4c>
1a000ce8:	4b07      	ldr	r3, [pc, #28]	; (1a000d08 <GPIO3_IRQHandler+0x5c>)
1a000cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000cee:	601a      	str	r2, [r3, #0]
1a000cf0:	f3bf 8f4f 	dsb	sy
1a000cf4:	f3bf 8f6f 	isb	sy
}
1a000cf8:	bf00      	nop
1a000cfa:	3708      	adds	r7, #8
1a000cfc:	46bd      	mov	sp, r7
1a000cfe:	bd80      	pop	{r7, pc}
1a000d00:	40087000 	.word	0x40087000
1a000d04:	10002b60 	.word	0x10002b60
1a000d08:	e000ed04 	.word	0xe000ed04

1a000d0c <GPIO4_IRQHandler>:

void GPIO4_IRQHandler( void )
{
1a000d0c:	b580      	push	{r7, lr}
1a000d0e:	b082      	sub	sp, #8
1a000d10:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000d12:	2300      	movs	r3, #0
1a000d14:	607b      	str	r3, [r7, #4]


    if ( Chip_PININT_GetFallStates( LPC_GPIO_PIN_INT ) & PININTCH4 ) //Verificamos que la interrupciÃ³n es la esperada
1a000d16:	4812      	ldr	r0, [pc, #72]	; (1a000d60 <GPIO4_IRQHandler+0x54>)
1a000d18:	f7ff fbb8 	bl	1a00048c <Chip_PININT_GetFallStates>
1a000d1c:	4603      	mov	r3, r0
1a000d1e:	f003 0310 	and.w	r3, r3, #16
1a000d22:	2b00      	cmp	r3, #0
1a000d24:	d00d      	beq.n	1a000d42 <GPIO4_IRQHandler+0x36>
    {
        Chip_PININT_ClearIntStatus( LPC_GPIO_PIN_INT, PININTCH4 ); //Borramos el flag de interrupciÃ³n
1a000d26:	2110      	movs	r1, #16
1a000d28:	480d      	ldr	r0, [pc, #52]	; (1a000d60 <GPIO4_IRQHandler+0x54>)
1a000d2a:	f7ff fbbb 	bl	1a0004a4 <Chip_PININT_ClearIntStatus>

        keys_isr_fall( TEC3_INDEX );
1a000d2e:	2002      	movs	r0, #2
1a000d30:	f7ff fedc 	bl	1a000aec <keys_isr_fall>

        xSemaphoreGiveFromISR( keys_data[TEC3_INDEX].isr_signal, &xHigherPriorityTaskWoken );
1a000d34:	4b0b      	ldr	r3, [pc, #44]	; (1a000d64 <GPIO4_IRQHandler+0x58>)
1a000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a000d38:	1d3a      	adds	r2, r7, #4
1a000d3a:	4611      	mov	r1, r2
1a000d3c:	4618      	mov	r0, r3
1a000d3e:	f000 fd1f 	bl	1a001780 <xQueueGiveFromISR>
    }

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000d42:	687b      	ldr	r3, [r7, #4]
1a000d44:	2b00      	cmp	r3, #0
1a000d46:	d007      	beq.n	1a000d58 <GPIO4_IRQHandler+0x4c>
1a000d48:	4b07      	ldr	r3, [pc, #28]	; (1a000d68 <GPIO4_IRQHandler+0x5c>)
1a000d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d4e:	601a      	str	r2, [r3, #0]
1a000d50:	f3bf 8f4f 	dsb	sy
1a000d54:	f3bf 8f6f 	isb	sy
}
1a000d58:	bf00      	nop
1a000d5a:	3708      	adds	r7, #8
1a000d5c:	46bd      	mov	sp, r7
1a000d5e:	bd80      	pop	{r7, pc}
1a000d60:	40087000 	.word	0x40087000
1a000d64:	10002b60 	.word	0x10002b60
1a000d68:	e000ed04 	.word	0xe000ed04

1a000d6c <GPIO5_IRQHandler>:

void GPIO5_IRQHandler( void )
{
1a000d6c:	b580      	push	{r7, lr}
1a000d6e:	b082      	sub	sp, #8
1a000d70:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000d72:	2300      	movs	r3, #0
1a000d74:	607b      	str	r3, [r7, #4]

    if ( Chip_PININT_GetRiseStates( LPC_GPIO_PIN_INT ) & PININTCH5 )
1a000d76:	4812      	ldr	r0, [pc, #72]	; (1a000dc0 <GPIO5_IRQHandler+0x54>)
1a000d78:	f7ff fb7c 	bl	1a000474 <Chip_PININT_GetRiseStates>
1a000d7c:	4603      	mov	r3, r0
1a000d7e:	f003 0320 	and.w	r3, r3, #32
1a000d82:	2b00      	cmp	r3, #0
1a000d84:	d00d      	beq.n	1a000da2 <GPIO5_IRQHandler+0x36>
    {
        Chip_PININT_ClearIntStatus( LPC_GPIO_PIN_INT, PININTCH5 );
1a000d86:	2120      	movs	r1, #32
1a000d88:	480d      	ldr	r0, [pc, #52]	; (1a000dc0 <GPIO5_IRQHandler+0x54>)
1a000d8a:	f7ff fb8b 	bl	1a0004a4 <Chip_PININT_ClearIntStatus>

        keys_isr_rise( TEC3_INDEX );
1a000d8e:	2002      	movs	r0, #2
1a000d90:	f7ff fed4 	bl	1a000b3c <keys_isr_rise>

        xSemaphoreGiveFromISR( keys_data[TEC3_INDEX].isr_signal, &xHigherPriorityTaskWoken );
1a000d94:	4b0b      	ldr	r3, [pc, #44]	; (1a000dc4 <GPIO5_IRQHandler+0x58>)
1a000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a000d98:	1d3a      	adds	r2, r7, #4
1a000d9a:	4611      	mov	r1, r2
1a000d9c:	4618      	mov	r0, r3
1a000d9e:	f000 fcef 	bl	1a001780 <xQueueGiveFromISR>
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000da2:	687b      	ldr	r3, [r7, #4]
1a000da4:	2b00      	cmp	r3, #0
1a000da6:	d007      	beq.n	1a000db8 <GPIO5_IRQHandler+0x4c>
1a000da8:	4b07      	ldr	r3, [pc, #28]	; (1a000dc8 <GPIO5_IRQHandler+0x5c>)
1a000daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000dae:	601a      	str	r2, [r3, #0]
1a000db0:	f3bf 8f4f 	dsb	sy
1a000db4:	f3bf 8f6f 	isb	sy
}
1a000db8:	bf00      	nop
1a000dba:	3708      	adds	r7, #8
1a000dbc:	46bd      	mov	sp, r7
1a000dbe:	bd80      	pop	{r7, pc}
1a000dc0:	40087000 	.word	0x40087000
1a000dc4:	10002b60 	.word	0x10002b60
1a000dc8:	e000ed04 	.word	0xe000ed04

1a000dcc <GPIO6_IRQHandler>:

void GPIO6_IRQHandler( void )
{
1a000dcc:	b580      	push	{r7, lr}
1a000dce:	b082      	sub	sp, #8
1a000dd0:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000dd2:	2300      	movs	r3, #0
1a000dd4:	607b      	str	r3, [r7, #4]

    if ( Chip_PININT_GetFallStates( LPC_GPIO_PIN_INT ) & PININTCH6 ) //Verificamos que la interrupciÃ³n es la esperada
1a000dd6:	4812      	ldr	r0, [pc, #72]	; (1a000e20 <GPIO6_IRQHandler+0x54>)
1a000dd8:	f7ff fb58 	bl	1a00048c <Chip_PININT_GetFallStates>
1a000ddc:	4603      	mov	r3, r0
1a000dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a000de2:	2b00      	cmp	r3, #0
1a000de4:	d00d      	beq.n	1a000e02 <GPIO6_IRQHandler+0x36>
    {
        Chip_PININT_ClearIntStatus( LPC_GPIO_PIN_INT, PININTCH6 ); //Borramos el flag de interrupciÃ³n
1a000de6:	2140      	movs	r1, #64	; 0x40
1a000de8:	480d      	ldr	r0, [pc, #52]	; (1a000e20 <GPIO6_IRQHandler+0x54>)
1a000dea:	f7ff fb5b 	bl	1a0004a4 <Chip_PININT_ClearIntStatus>

        keys_isr_fall( TEC4_INDEX );
1a000dee:	2003      	movs	r0, #3
1a000df0:	f7ff fe7c 	bl	1a000aec <keys_isr_fall>

        xSemaphoreGiveFromISR( keys_data[TEC4_INDEX].isr_signal, &xHigherPriorityTaskWoken );
1a000df4:	4b0b      	ldr	r3, [pc, #44]	; (1a000e24 <GPIO6_IRQHandler+0x58>)
1a000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1a000df8:	1d3a      	adds	r2, r7, #4
1a000dfa:	4611      	mov	r1, r2
1a000dfc:	4618      	mov	r0, r3
1a000dfe:	f000 fcbf 	bl	1a001780 <xQueueGiveFromISR>
    }

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000e02:	687b      	ldr	r3, [r7, #4]
1a000e04:	2b00      	cmp	r3, #0
1a000e06:	d007      	beq.n	1a000e18 <GPIO6_IRQHandler+0x4c>
1a000e08:	4b07      	ldr	r3, [pc, #28]	; (1a000e28 <GPIO6_IRQHandler+0x5c>)
1a000e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e0e:	601a      	str	r2, [r3, #0]
1a000e10:	f3bf 8f4f 	dsb	sy
1a000e14:	f3bf 8f6f 	isb	sy
}
1a000e18:	bf00      	nop
1a000e1a:	3708      	adds	r7, #8
1a000e1c:	46bd      	mov	sp, r7
1a000e1e:	bd80      	pop	{r7, pc}
1a000e20:	40087000 	.word	0x40087000
1a000e24:	10002b60 	.word	0x10002b60
1a000e28:	e000ed04 	.word	0xe000ed04

1a000e2c <GPIO7_IRQHandler>:

void GPIO7_IRQHandler( void )
{
1a000e2c:	b580      	push	{r7, lr}
1a000e2e:	b082      	sub	sp, #8
1a000e30:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
1a000e32:	2300      	movs	r3, #0
1a000e34:	607b      	str	r3, [r7, #4]

    if ( Chip_PININT_GetRiseStates( LPC_GPIO_PIN_INT ) & PININTCH7 )
1a000e36:	4812      	ldr	r0, [pc, #72]	; (1a000e80 <GPIO7_IRQHandler+0x54>)
1a000e38:	f7ff fb1c 	bl	1a000474 <Chip_PININT_GetRiseStates>
1a000e3c:	4603      	mov	r3, r0
1a000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a000e42:	2b00      	cmp	r3, #0
1a000e44:	d00d      	beq.n	1a000e62 <GPIO7_IRQHandler+0x36>
    {
        Chip_PININT_ClearIntStatus( LPC_GPIO_PIN_INT, PININTCH7 );
1a000e46:	2180      	movs	r1, #128	; 0x80
1a000e48:	480d      	ldr	r0, [pc, #52]	; (1a000e80 <GPIO7_IRQHandler+0x54>)
1a000e4a:	f7ff fb2b 	bl	1a0004a4 <Chip_PININT_ClearIntStatus>

        keys_isr_rise( TEC4_INDEX );
1a000e4e:	2003      	movs	r0, #3
1a000e50:	f7ff fe74 	bl	1a000b3c <keys_isr_rise>

        xSemaphoreGiveFromISR( keys_data[TEC4_INDEX].isr_signal, &xHigherPriorityTaskWoken );
1a000e54:	4b0b      	ldr	r3, [pc, #44]	; (1a000e84 <GPIO7_IRQHandler+0x58>)
1a000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1a000e58:	1d3a      	adds	r2, r7, #4
1a000e5a:	4611      	mov	r1, r2
1a000e5c:	4618      	mov	r0, r3
1a000e5e:	f000 fc8f 	bl	1a001780 <xQueueGiveFromISR>
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000e62:	687b      	ldr	r3, [r7, #4]
1a000e64:	2b00      	cmp	r3, #0
1a000e66:	d007      	beq.n	1a000e78 <GPIO7_IRQHandler+0x4c>
1a000e68:	4b07      	ldr	r3, [pc, #28]	; (1a000e88 <GPIO7_IRQHandler+0x5c>)
1a000e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e6e:	601a      	str	r2, [r3, #0]
1a000e70:	f3bf 8f4f 	dsb	sy
1a000e74:	f3bf 8f6f 	isb	sy
}
1a000e78:	bf00      	nop
1a000e7a:	3708      	adds	r7, #8
1a000e7c:	46bd      	mov	sp, r7
1a000e7e:	bd80      	pop	{r7, pc}
1a000e80:	40087000 	.word	0x40087000
1a000e84:	10002b60 	.word	0x10002b60
1a000e88:	e000ed04 	.word	0xe000ed04

1a000e8c <main>:
/*=====[Definitions of public global variables]==============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a000e8c:	b580      	push	{r7, lr}
1a000e8e:	b086      	sub	sp, #24
1a000e90:	af02      	add	r7, sp, #8
    BaseType_t res;

    // ---------- CONFIGURACIONES ------------------------------
    boardConfig();  // Inicializar y configurar la plataforma
1a000e92:	f004 f997 	bl	1a0051c4 <boardInit>

    printf( "Ejercicio F2\n" );
1a000e96:	482b      	ldr	r0, [pc, #172]	; (1a000f44 <main+0xb8>)
1a000e98:	f005 ff1a 	bl	1a006cd0 <puts>

    // Crear tareas en freeRTOS
    res = xTaskCreate (
1a000e9c:	2300      	movs	r3, #0
1a000e9e:	9301      	str	r3, [sp, #4]
1a000ea0:	2301      	movs	r3, #1
1a000ea2:	9300      	str	r3, [sp, #0]
1a000ea4:	2300      	movs	r3, #0
1a000ea6:	22b4      	movs	r2, #180	; 0xb4
1a000ea8:	4927      	ldr	r1, [pc, #156]	; (1a000f48 <main+0xbc>)
1a000eaa:	4828      	ldr	r0, [pc, #160]	; (1a000f4c <main+0xc0>)
1a000eac:	f000 ffce 	bl	1a001e4c <xTaskCreate>
1a000eb0:	60f8      	str	r0, [r7, #12]
              0,							// Parametros de tarea
              tskIDLE_PRIORITY+1,			// Prioridad de la tarea
              0							// Puntero a la tarea creada en el sistema
          );
    // Gestión de errores
    configASSERT( res == pdPASS );
1a000eb2:	68fb      	ldr	r3, [r7, #12]
1a000eb4:	2b01      	cmp	r3, #1
1a000eb6:	d009      	beq.n	1a000ecc <main+0x40>
	__asm volatile
1a000eb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ebc:	f383 8811 	msr	BASEPRI, r3
1a000ec0:	f3bf 8f6f 	isb	sy
1a000ec4:	f3bf 8f4f 	dsb	sy
1a000ec8:	60bb      	str	r3, [r7, #8]
1a000eca:	e7fe      	b.n	1a000eca <main+0x3e>

    res = xTaskCreate (
1a000ecc:	2300      	movs	r3, #0
1a000ece:	9301      	str	r3, [sp, #4]
1a000ed0:	2301      	movs	r3, #1
1a000ed2:	9300      	str	r3, [sp, #0]
1a000ed4:	2300      	movs	r3, #0
1a000ed6:	22b4      	movs	r2, #180	; 0xb4
1a000ed8:	491d      	ldr	r1, [pc, #116]	; (1a000f50 <main+0xc4>)
1a000eda:	481e      	ldr	r0, [pc, #120]	; (1a000f54 <main+0xc8>)
1a000edc:	f000 ffb6 	bl	1a001e4c <xTaskCreate>
1a000ee0:	60f8      	str	r0, [r7, #12]
              configMINIMAL_STACK_SIZE*2,	// Cantidad de stack de la tarea
              0,							// Parametros de tarea
              tskIDLE_PRIORITY+1,			// Prioridad de la tarea
              0							// Puntero a la tarea creada en el sistema
          );
    res = xTaskCreate (
1a000ee2:	2300      	movs	r3, #0
1a000ee4:	9301      	str	r3, [sp, #4]
1a000ee6:	2301      	movs	r3, #1
1a000ee8:	9300      	str	r3, [sp, #0]
1a000eea:	2300      	movs	r3, #0
1a000eec:	22b4      	movs	r2, #180	; 0xb4
1a000eee:	491a      	ldr	r1, [pc, #104]	; (1a000f58 <main+0xcc>)
1a000ef0:	481a      	ldr	r0, [pc, #104]	; (1a000f5c <main+0xd0>)
1a000ef2:	f000 ffab 	bl	1a001e4c <xTaskCreate>
1a000ef6:	60f8      	str	r0, [r7, #12]
              configMINIMAL_STACK_SIZE*2,	// Cantidad de stack de la tarea
              0,							// Parametros de tarea
              tskIDLE_PRIORITY+1,			// Prioridad de la tarea
              0							// Puntero a la tarea creada en el sistema
          );
    res = xTaskCreate (
1a000ef8:	2300      	movs	r3, #0
1a000efa:	9301      	str	r3, [sp, #4]
1a000efc:	2301      	movs	r3, #1
1a000efe:	9300      	str	r3, [sp, #0]
1a000f00:	2300      	movs	r3, #0
1a000f02:	22b4      	movs	r2, #180	; 0xb4
1a000f04:	4916      	ldr	r1, [pc, #88]	; (1a000f60 <main+0xd4>)
1a000f06:	4817      	ldr	r0, [pc, #92]	; (1a000f64 <main+0xd8>)
1a000f08:	f000 ffa0 	bl	1a001e4c <xTaskCreate>
1a000f0c:	60f8      	str	r0, [r7, #12]
              0,							// Parametros de tarea
              tskIDLE_PRIORITY+1,			// Prioridad de la tarea
              0							// Puntero a la tarea creada en el sistema
          );
    // Gestión de errores
    configASSERT( res == pdPASS );
1a000f0e:	68fb      	ldr	r3, [r7, #12]
1a000f10:	2b01      	cmp	r3, #1
1a000f12:	d009      	beq.n	1a000f28 <main+0x9c>
1a000f14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f18:	f383 8811 	msr	BASEPRI, r3
1a000f1c:	f3bf 8f6f 	isb	sy
1a000f20:	f3bf 8f4f 	dsb	sy
1a000f24:	607b      	str	r3, [r7, #4]
1a000f26:	e7fe      	b.n	1a000f26 <main+0x9a>

    /* inicializo driver de teclas */
    keys_Init();
1a000f28:	f7ff fb02 	bl	1a000530 <keys_Init>

    // Iniciar scheduler
    vTaskStartScheduler();					// Enciende tick | Crea idle y pone en ready | Evalua las tareas creadas | Prioridad mas alta pasa a running
1a000f2c:	f001 f970 	bl	1a002210 <vTaskStartScheduler>
1a000f30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f34:	f383 8811 	msr	BASEPRI, r3
1a000f38:	f3bf 8f6f 	isb	sy
1a000f3c:	f3bf 8f4f 	dsb	sy
1a000f40:	603b      	str	r3, [r7, #0]

    /* realizar un assert con "false" es equivalente al while(1) */
    configASSERT( 0 );
1a000f42:	e7fe      	b.n	1a000f42 <main+0xb6>
1a000f44:	1a00ade8 	.word	0x1a00ade8
1a000f48:	1a00adf8 	.word	0x1a00adf8
1a000f4c:	1a000f69 	.word	0x1a000f69
1a000f50:	1a00ae04 	.word	0x1a00ae04
1a000f54:	1a000fc1 	.word	0x1a000fc1
1a000f58:	1a00ae10 	.word	0x1a00ae10
1a000f5c:	1a001019 	.word	0x1a001019
1a000f60:	1a00ae1c 	.word	0x1a00ae1c
1a000f64:	1a001071 	.word	0x1a001071

1a000f68 <task_led1>:
    return 0;
}

void task_led1( void* taskParmPtr )
{
1a000f68:	b580      	push	{r7, lr}
1a000f6a:	b086      	sub	sp, #24
1a000f6c:	af00      	add	r7, sp, #0
1a000f6e:	6078      	str	r0, [r7, #4]
    TickType_t dif =   pdMS_TO_TICKS( 500 );
1a000f70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a000f74:	617b      	str	r3, [r7, #20]
    int tecla_presionada;
    TickType_t xPeriodicity = pdMS_TO_TICKS( 1000 ); // Tarea periodica cada 1000 ms
1a000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000f7a:	613b      	str	r3, [r7, #16]

    TickType_t xLastWakeTime = xTaskGetTickCount();
1a000f7c:	f001 fa38 	bl	1a0023f0 <xTaskGetTickCount>
1a000f80:	4603      	mov	r3, r0
1a000f82:	60fb      	str	r3, [r7, #12]

    while( 1 )
    {
        if( key_pressed( TEC1_INDEX ) )
1a000f84:	2000      	movs	r0, #0
1a000f86:	f7ff fab5 	bl	1a0004f4 <key_pressed>
1a000f8a:	4603      	mov	r3, r0
1a000f8c:	2b00      	cmp	r3, #0
1a000f8e:	d003      	beq.n	1a000f98 <task_led1+0x30>
        {
            dif = get_diff(TEC1_INDEX);
1a000f90:	2000      	movs	r0, #0
1a000f92:	f7ff fa95 	bl	1a0004c0 <get_diff>
1a000f96:	6178      	str	r0, [r7, #20]
        }

        gpioWrite( LEDB, ON );
1a000f98:	2101      	movs	r1, #1
1a000f9a:	202a      	movs	r0, #42	; 0x2a
1a000f9c:	f004 f874 	bl	1a005088 <gpioWrite>
        vTaskDelay( dif );
1a000fa0:	6978      	ldr	r0, [r7, #20]
1a000fa2:	f001 f901 	bl	1a0021a8 <vTaskDelay>
        gpioWrite( LEDB, OFF );
1a000fa6:	2100      	movs	r1, #0
1a000fa8:	202a      	movs	r0, #42	; 0x2a
1a000faa:	f004 f86d 	bl	1a005088 <gpioWrite>


        // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
        vTaskDelayUntil( &xLastWakeTime, 2*dif );
1a000fae:	697b      	ldr	r3, [r7, #20]
1a000fb0:	005a      	lsls	r2, r3, #1
1a000fb2:	f107 030c 	add.w	r3, r7, #12
1a000fb6:	4611      	mov	r1, r2
1a000fb8:	4618      	mov	r0, r3
1a000fba:	f001 f87b 	bl	1a0020b4 <vTaskDelayUntil>
        if( key_pressed( TEC1_INDEX ) )
1a000fbe:	e7e1      	b.n	1a000f84 <task_led1+0x1c>

1a000fc0 <task_led2>:
    }
}

void task_led2( void* taskParmPtr )
{
1a000fc0:	b580      	push	{r7, lr}
1a000fc2:	b086      	sub	sp, #24
1a000fc4:	af00      	add	r7, sp, #0
1a000fc6:	6078      	str	r0, [r7, #4]
    TickType_t dif =   pdMS_TO_TICKS( 500 );
1a000fc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a000fcc:	617b      	str	r3, [r7, #20]
    int tecla_presionada;
    TickType_t xPeriodicity = pdMS_TO_TICKS( 1000 ); // Tarea periodica cada 1000 ms
1a000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000fd2:	613b      	str	r3, [r7, #16]

    TickType_t xLastWakeTime = xTaskGetTickCount();
1a000fd4:	f001 fa0c 	bl	1a0023f0 <xTaskGetTickCount>
1a000fd8:	4603      	mov	r3, r0
1a000fda:	60fb      	str	r3, [r7, #12]

    while( 1 )
    {
        if( key_pressed( TEC2_INDEX ) )
1a000fdc:	2001      	movs	r0, #1
1a000fde:	f7ff fa89 	bl	1a0004f4 <key_pressed>
1a000fe2:	4603      	mov	r3, r0
1a000fe4:	2b00      	cmp	r3, #0
1a000fe6:	d003      	beq.n	1a000ff0 <task_led2+0x30>
        {
            dif = get_diff(TEC2_INDEX);
1a000fe8:	2001      	movs	r0, #1
1a000fea:	f7ff fa69 	bl	1a0004c0 <get_diff>
1a000fee:	6178      	str	r0, [r7, #20]
        }

        gpioWrite( LED1, ON );
1a000ff0:	2101      	movs	r1, #1
1a000ff2:	202b      	movs	r0, #43	; 0x2b
1a000ff4:	f004 f848 	bl	1a005088 <gpioWrite>
        vTaskDelay( dif );
1a000ff8:	6978      	ldr	r0, [r7, #20]
1a000ffa:	f001 f8d5 	bl	1a0021a8 <vTaskDelay>
        gpioWrite( LED1, OFF );
1a000ffe:	2100      	movs	r1, #0
1a001000:	202b      	movs	r0, #43	; 0x2b
1a001002:	f004 f841 	bl	1a005088 <gpioWrite>


        // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
        vTaskDelayUntil( &xLastWakeTime, 2*dif );
1a001006:	697b      	ldr	r3, [r7, #20]
1a001008:	005a      	lsls	r2, r3, #1
1a00100a:	f107 030c 	add.w	r3, r7, #12
1a00100e:	4611      	mov	r1, r2
1a001010:	4618      	mov	r0, r3
1a001012:	f001 f84f 	bl	1a0020b4 <vTaskDelayUntil>
        if( key_pressed( TEC2_INDEX ) )
1a001016:	e7e1      	b.n	1a000fdc <task_led2+0x1c>

1a001018 <task_led3>:
    }
}

void task_led3( void* taskParmPtr )
{
1a001018:	b580      	push	{r7, lr}
1a00101a:	b086      	sub	sp, #24
1a00101c:	af00      	add	r7, sp, #0
1a00101e:	6078      	str	r0, [r7, #4]
    TickType_t dif =   pdMS_TO_TICKS( 500 );
1a001020:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a001024:	617b      	str	r3, [r7, #20]
    int tecla_presionada;
    TickType_t xPeriodicity = pdMS_TO_TICKS( 1000 ); // Tarea periodica cada 1000 ms
1a001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00102a:	613b      	str	r3, [r7, #16]

    TickType_t xLastWakeTime = xTaskGetTickCount();
1a00102c:	f001 f9e0 	bl	1a0023f0 <xTaskGetTickCount>
1a001030:	4603      	mov	r3, r0
1a001032:	60fb      	str	r3, [r7, #12]

    while( 1 )
    {
        if( key_pressed( TEC3_INDEX ) )
1a001034:	2002      	movs	r0, #2
1a001036:	f7ff fa5d 	bl	1a0004f4 <key_pressed>
1a00103a:	4603      	mov	r3, r0
1a00103c:	2b00      	cmp	r3, #0
1a00103e:	d003      	beq.n	1a001048 <task_led3+0x30>
        {
            dif = get_diff(TEC3_INDEX);
1a001040:	2002      	movs	r0, #2
1a001042:	f7ff fa3d 	bl	1a0004c0 <get_diff>
1a001046:	6178      	str	r0, [r7, #20]
        }

        gpioWrite( LED2, ON );
1a001048:	2101      	movs	r1, #1
1a00104a:	202c      	movs	r0, #44	; 0x2c
1a00104c:	f004 f81c 	bl	1a005088 <gpioWrite>
        vTaskDelay( dif );
1a001050:	6978      	ldr	r0, [r7, #20]
1a001052:	f001 f8a9 	bl	1a0021a8 <vTaskDelay>
        gpioWrite( LED2, OFF );
1a001056:	2100      	movs	r1, #0
1a001058:	202c      	movs	r0, #44	; 0x2c
1a00105a:	f004 f815 	bl	1a005088 <gpioWrite>


        // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
        vTaskDelayUntil( &xLastWakeTime, 2*dif );
1a00105e:	697b      	ldr	r3, [r7, #20]
1a001060:	005a      	lsls	r2, r3, #1
1a001062:	f107 030c 	add.w	r3, r7, #12
1a001066:	4611      	mov	r1, r2
1a001068:	4618      	mov	r0, r3
1a00106a:	f001 f823 	bl	1a0020b4 <vTaskDelayUntil>
        if( key_pressed( TEC3_INDEX ) )
1a00106e:	e7e1      	b.n	1a001034 <task_led3+0x1c>

1a001070 <task_led4>:
    }
}

void task_led4( void* taskParmPtr )
{
1a001070:	b580      	push	{r7, lr}
1a001072:	b086      	sub	sp, #24
1a001074:	af00      	add	r7, sp, #0
1a001076:	6078      	str	r0, [r7, #4]
    TickType_t dif =   pdMS_TO_TICKS( 500 );
1a001078:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a00107c:	617b      	str	r3, [r7, #20]
    int tecla_presionada;
    TickType_t xPeriodicity = pdMS_TO_TICKS( 1000 ); // Tarea periodica cada 1000 ms
1a00107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001082:	613b      	str	r3, [r7, #16]

    TickType_t xLastWakeTime = xTaskGetTickCount();
1a001084:	f001 f9b4 	bl	1a0023f0 <xTaskGetTickCount>
1a001088:	4603      	mov	r3, r0
1a00108a:	60fb      	str	r3, [r7, #12]

    while( 1 )
    {
        if( key_pressed( TEC4_INDEX ) )
1a00108c:	2003      	movs	r0, #3
1a00108e:	f7ff fa31 	bl	1a0004f4 <key_pressed>
1a001092:	4603      	mov	r3, r0
1a001094:	2b00      	cmp	r3, #0
1a001096:	d003      	beq.n	1a0010a0 <task_led4+0x30>
        {
            dif = get_diff(TEC4_INDEX);
1a001098:	2003      	movs	r0, #3
1a00109a:	f7ff fa11 	bl	1a0004c0 <get_diff>
1a00109e:	6178      	str	r0, [r7, #20]
        }

        gpioWrite( LED3, ON );
1a0010a0:	2101      	movs	r1, #1
1a0010a2:	202d      	movs	r0, #45	; 0x2d
1a0010a4:	f003 fff0 	bl	1a005088 <gpioWrite>
        vTaskDelay( dif );
1a0010a8:	6978      	ldr	r0, [r7, #20]
1a0010aa:	f001 f87d 	bl	1a0021a8 <vTaskDelay>
        gpioWrite( LED3, OFF );
1a0010ae:	2100      	movs	r1, #0
1a0010b0:	202d      	movs	r0, #45	; 0x2d
1a0010b2:	f003 ffe9 	bl	1a005088 <gpioWrite>


        // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
        vTaskDelayUntil( &xLastWakeTime, 2*dif );
1a0010b6:	697b      	ldr	r3, [r7, #20]
1a0010b8:	005a      	lsls	r2, r3, #1
1a0010ba:	f107 030c 	add.w	r3, r7, #12
1a0010be:	4611      	mov	r1, r2
1a0010c0:	4618      	mov	r0, r3
1a0010c2:	f000 fff7 	bl	1a0020b4 <vTaskDelayUntil>
        if( key_pressed( TEC4_INDEX ) )
1a0010c6:	e7e1      	b.n	1a00108c <task_led4+0x1c>

1a0010c8 <vApplicationMallocFailedHook>:
    }
}
/* hook que se ejecuta si al necesitar un objeto dinamico, no hay memoria disponible */
void vApplicationMallocFailedHook()
{
1a0010c8:	b580      	push	{r7, lr}
1a0010ca:	b082      	sub	sp, #8
1a0010cc:	af00      	add	r7, sp, #0
    printf( "Malloc Failed Hook!\n" );
1a0010ce:	4806      	ldr	r0, [pc, #24]	; (1a0010e8 <vApplicationMallocFailedHook+0x20>)
1a0010d0:	f005 fdfe 	bl	1a006cd0 <puts>
1a0010d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010d8:	f383 8811 	msr	BASEPRI, r3
1a0010dc:	f3bf 8f6f 	isb	sy
1a0010e0:	f3bf 8f4f 	dsb	sy
1a0010e4:	607b      	str	r3, [r7, #4]
    configASSERT( 0 );
1a0010e6:	e7fe      	b.n	1a0010e6 <vApplicationMallocFailedHook+0x1e>
1a0010e8:	1a00ae28 	.word	0x1a00ae28

1a0010ec <initialise_monitor_handles>:
{
1a0010ec:	b480      	push	{r7}
1a0010ee:	af00      	add	r7, sp, #0
}
1a0010f0:	bf00      	nop
1a0010f2:	46bd      	mov	sp, r7
1a0010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0010f8:	4770      	bx	lr

1a0010fa <_fini>:
void _fini(void) {}
1a0010fa:	b480      	push	{r7}
1a0010fc:	af00      	add	r7, sp, #0
1a0010fe:	bf00      	nop
1a001100:	46bd      	mov	sp, r7
1a001102:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001106:	4770      	bx	lr

1a001108 <_init>:
void _init(void) {}
1a001108:	b480      	push	{r7}
1a00110a:	af00      	add	r7, sp, #0
1a00110c:	bf00      	nop
1a00110e:	46bd      	mov	sp, r7
1a001110:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001114:	4770      	bx	lr
1a001116:	Address 0x000000001a001116 is out of bounds.


1a001118 <Reset_Handler>:
void Reset_Handler(void) {
1a001118:	b580      	push	{r7, lr}
1a00111a:	b088      	sub	sp, #32
1a00111c:	af00      	add	r7, sp, #0
    __asm__ volatile("cpsid i");
1a00111e:	b672      	cpsid	i
    volatile unsigned int *RESET_CONTROL = (unsigned int *) 0x40053100;
1a001120:	4b29      	ldr	r3, [pc, #164]	; (1a0011c8 <Reset_Handler+0xb0>)
1a001122:	617b      	str	r3, [r7, #20]
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001124:	697b      	ldr	r3, [r7, #20]
1a001126:	4a29      	ldr	r2, [pc, #164]	; (1a0011cc <Reset_Handler+0xb4>)
1a001128:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00112a:	697b      	ldr	r3, [r7, #20]
1a00112c:	3304      	adds	r3, #4
1a00112e:	4a28      	ldr	r2, [pc, #160]	; (1a0011d0 <Reset_Handler+0xb8>)
1a001130:	601a      	str	r2, [r3, #0]
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
1a001132:	4b28      	ldr	r3, [pc, #160]	; (1a0011d4 <Reset_Handler+0xbc>)
1a001134:	613b      	str	r3, [r7, #16]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001136:	2300      	movs	r3, #0
1a001138:	61fb      	str	r3, [r7, #28]
1a00113a:	e009      	b.n	1a001150 <Reset_Handler+0x38>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00113c:	69fb      	ldr	r3, [r7, #28]
1a00113e:	009b      	lsls	r3, r3, #2
1a001140:	693a      	ldr	r2, [r7, #16]
1a001142:	4413      	add	r3, r2
1a001144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001148:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00114a:	69fb      	ldr	r3, [r7, #28]
1a00114c:	3301      	adds	r3, #1
1a00114e:	61fb      	str	r3, [r7, #28]
1a001150:	69fb      	ldr	r3, [r7, #28]
1a001152:	2b07      	cmp	r3, #7
1a001154:	d9f2      	bls.n	1a00113c <Reset_Handler+0x24>
    __asm__ volatile("cpsie i");
1a001156:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a001158:	4b1f      	ldr	r3, [pc, #124]	; (1a0011d8 <Reset_Handler+0xc0>)
1a00115a:	61bb      	str	r3, [r7, #24]
    while (SectionTableAddr < &__data_section_table_end) {
1a00115c:	e013      	b.n	1a001186 <Reset_Handler+0x6e>
        LoadAddr = *SectionTableAddr++;
1a00115e:	69bb      	ldr	r3, [r7, #24]
1a001160:	1d1a      	adds	r2, r3, #4
1a001162:	61ba      	str	r2, [r7, #24]
1a001164:	681b      	ldr	r3, [r3, #0]
1a001166:	60fb      	str	r3, [r7, #12]
        ExeAddr = *SectionTableAddr++;
1a001168:	69bb      	ldr	r3, [r7, #24]
1a00116a:	1d1a      	adds	r2, r3, #4
1a00116c:	61ba      	str	r2, [r7, #24]
1a00116e:	681b      	ldr	r3, [r3, #0]
1a001170:	60bb      	str	r3, [r7, #8]
        SectionLen = *SectionTableAddr++;
1a001172:	69bb      	ldr	r3, [r7, #24]
1a001174:	1d1a      	adds	r2, r3, #4
1a001176:	61ba      	str	r2, [r7, #24]
1a001178:	681b      	ldr	r3, [r3, #0]
1a00117a:	607b      	str	r3, [r7, #4]
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00117c:	687a      	ldr	r2, [r7, #4]
1a00117e:	68b9      	ldr	r1, [r7, #8]
1a001180:	68f8      	ldr	r0, [r7, #12]
1a001182:	f7fe fff9 	bl	1a000178 <data_init>
    while (SectionTableAddr < &__data_section_table_end) {
1a001186:	69bb      	ldr	r3, [r7, #24]
1a001188:	4a14      	ldr	r2, [pc, #80]	; (1a0011dc <Reset_Handler+0xc4>)
1a00118a:	4293      	cmp	r3, r2
1a00118c:	d3e7      	bcc.n	1a00115e <Reset_Handler+0x46>
    while (SectionTableAddr < &__bss_section_table_end) {
1a00118e:	e00d      	b.n	1a0011ac <Reset_Handler+0x94>
        ExeAddr = *SectionTableAddr++;
1a001190:	69bb      	ldr	r3, [r7, #24]
1a001192:	1d1a      	adds	r2, r3, #4
1a001194:	61ba      	str	r2, [r7, #24]
1a001196:	681b      	ldr	r3, [r3, #0]
1a001198:	60bb      	str	r3, [r7, #8]
        SectionLen = *SectionTableAddr++;
1a00119a:	69bb      	ldr	r3, [r7, #24]
1a00119c:	1d1a      	adds	r2, r3, #4
1a00119e:	61ba      	str	r2, [r7, #24]
1a0011a0:	681b      	ldr	r3, [r3, #0]
1a0011a2:	607b      	str	r3, [r7, #4]
        bss_init(ExeAddr, SectionLen);
1a0011a4:	6879      	ldr	r1, [r7, #4]
1a0011a6:	68b8      	ldr	r0, [r7, #8]
1a0011a8:	f7ff f808 	bl	1a0001bc <bss_init>
    while (SectionTableAddr < &__bss_section_table_end) {
1a0011ac:	69bb      	ldr	r3, [r7, #24]
1a0011ae:	4a0c      	ldr	r2, [pc, #48]	; (1a0011e0 <Reset_Handler+0xc8>)
1a0011b0:	4293      	cmp	r3, r2
1a0011b2:	d3ed      	bcc.n	1a001190 <Reset_Handler+0x78>
    SystemInit();
1a0011b4:	f003 fd6a 	bl	1a004c8c <SystemInit>
    __libc_init_array();
1a0011b8:	f005 f94e 	bl	1a006458 <__libc_init_array>
    initialise_monitor_handles();
1a0011bc:	f7ff ff96 	bl	1a0010ec <initialise_monitor_handles>
    main();
1a0011c0:	f7ff fe64 	bl	1a000e8c <main>
        __asm__ volatile("wfi");
1a0011c4:	bf30      	wfi
1a0011c6:	e7fd      	b.n	1a0011c4 <Reset_Handler+0xac>
1a0011c8:	40053100 	.word	0x40053100
1a0011cc:	10df1000 	.word	0x10df1000
1a0011d0:	01dff7ff 	.word	0x01dff7ff
1a0011d4:	e000e280 	.word	0xe000e280
1a0011d8:	1a000114 	.word	0x1a000114
1a0011dc:	1a000150 	.word	0x1a000150
1a0011e0:	1a000178 	.word	0x1a000178

1a0011e4 <_close_r>:
       __asm__ __volatile__("bkpt 0");

   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
1a0011e4:	b480      	push	{r7}
1a0011e6:	b083      	sub	sp, #12
1a0011e8:	af00      	add	r7, sp, #0
1a0011ea:	6078      	str	r0, [r7, #4]
1a0011ec:	6039      	str	r1, [r7, #0]
   UNUSED(fd);
   SET_ERR(EBADF);
1a0011ee:	687b      	ldr	r3, [r7, #4]
1a0011f0:	2209      	movs	r2, #9
1a0011f2:	601a      	str	r2, [r3, #0]
   return -1;
1a0011f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
1a0011f8:	4618      	mov	r0, r3
1a0011fa:	370c      	adds	r7, #12
1a0011fc:	46bd      	mov	sp, r7
1a0011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001202:	4770      	bx	lr

1a001204 <_fstat_r>:
USED int _fork_r(struct _reent *r) {
   SET_ERR(ENOSYS);
   return -1;
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
1a001204:	b480      	push	{r7}
1a001206:	b085      	sub	sp, #20
1a001208:	af00      	add	r7, sp, #0
1a00120a:	60f8      	str	r0, [r7, #12]
1a00120c:	60b9      	str	r1, [r7, #8]
1a00120e:	607a      	str	r2, [r7, #4]
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a001210:	68fb      	ldr	r3, [r7, #12]
1a001212:	2258      	movs	r2, #88	; 0x58
1a001214:	601a      	str	r2, [r3, #0]
   return -1;
1a001216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
1a00121a:	4618      	mov	r0, r3
1a00121c:	3714      	adds	r7, #20
1a00121e:	46bd      	mov	sp, r7
1a001220:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001224:	4770      	bx	lr

1a001226 <_isatty_r>:
USED int _getpid_r(struct _reent *r) {
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
1a001226:	b480      	push	{r7}
1a001228:	b083      	sub	sp, #12
1a00122a:	af00      	add	r7, sp, #0
1a00122c:	6078      	str	r0, [r7, #4]
1a00122e:	6039      	str	r1, [r7, #0]
1a001230:	683b      	ldr	r3, [r7, #0]
   switch (fd) {
1a001232:	2b02      	cmp	r3, #2
1a001234:	d801      	bhi.n	1a00123a <_isatty_r+0x14>
   case 0:
   case 1:
   case 2:
       return 1;
1a001236:	2301      	movs	r3, #1
1a001238:	e004      	b.n	1a001244 <_isatty_r+0x1e>
   default:
       SET_ERR(EBADF);
1a00123a:	687b      	ldr	r3, [r7, #4]
1a00123c:	2209      	movs	r2, #9
1a00123e:	601a      	str	r2, [r3, #0]
       return -1;
1a001240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   }
}
1a001244:	4618      	mov	r0, r3
1a001246:	370c      	adds	r7, #12
1a001248:	46bd      	mov	sp, r7
1a00124a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00124e:	4770      	bx	lr

1a001250 <_lseek_r>:
   UNUSED(newf);
   SET_ERR(ENOSYS);
   return -1;
}

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
1a001250:	b480      	push	{r7}
1a001252:	b085      	sub	sp, #20
1a001254:	af00      	add	r7, sp, #0
1a001256:	60f8      	str	r0, [r7, #12]
1a001258:	60b9      	str	r1, [r7, #8]
1a00125a:	607a      	str	r2, [r7, #4]
1a00125c:	603b      	str	r3, [r7, #0]
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00125e:	68fb      	ldr	r3, [r7, #12]
1a001260:	2258      	movs	r2, #88	; 0x58
1a001262:	601a      	str	r2, [r3, #0]
   return -1;
1a001264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
1a001268:	4618      	mov	r0, r3
1a00126a:	3714      	adds	r7, #20
1a00126c:	46bd      	mov	sp, r7
1a00126e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001272:	4770      	bx	lr

1a001274 <_read_r>:
       SET_ERR(ENODEV);
       return -1;
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a001274:	b580      	push	{r7, lr}
1a001276:	b086      	sub	sp, #24
1a001278:	af00      	add	r7, sp, #0
1a00127a:	60f8      	str	r0, [r7, #12]
1a00127c:	60b9      	str	r1, [r7, #8]
1a00127e:	607a      	str	r2, [r7, #4]
1a001280:	603b      	str	r3, [r7, #0]
  size_t i = 0;
1a001282:	2300      	movs	r3, #0
1a001284:	617b      	str	r3, [r7, #20]
1a001286:	68bb      	ldr	r3, [r7, #8]
  switch (fd) {
1a001288:	2b02      	cmp	r3, #2
1a00128a:	d823      	bhi.n	1a0012d4 <_read_r+0x60>
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a00128c:	e018      	b.n	1a0012c0 <_read_r+0x4c>
         int c = __stdio_getchar();
1a00128e:	f002 fa5c 	bl	1a00374a <__stdio_getchar>
1a001292:	6138      	str	r0, [r7, #16]
         if( c != -1 ){
1a001294:	693b      	ldr	r3, [r7, #16]
1a001296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00129a:	d011      	beq.n	1a0012c0 <_read_r+0x4c>
            ((char*) b)[i++] = (char) c;
1a00129c:	697b      	ldr	r3, [r7, #20]
1a00129e:	1c5a      	adds	r2, r3, #1
1a0012a0:	617a      	str	r2, [r7, #20]
1a0012a2:	687a      	ldr	r2, [r7, #4]
1a0012a4:	4413      	add	r3, r2
1a0012a6:	693a      	ldr	r2, [r7, #16]
1a0012a8:	b2d2      	uxtb	r2, r2
1a0012aa:	701a      	strb	r2, [r3, #0]
            if( c == '\r' || c == '\n' ){
1a0012ac:	693b      	ldr	r3, [r7, #16]
1a0012ae:	2b0d      	cmp	r3, #13
1a0012b0:	d002      	beq.n	1a0012b8 <_read_r+0x44>
1a0012b2:	693b      	ldr	r3, [r7, #16]
1a0012b4:	2b0a      	cmp	r3, #10
1a0012b6:	d103      	bne.n	1a0012c0 <_read_r+0x4c>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0012b8:	f002 fa47 	bl	1a00374a <__stdio_getchar>
               return i;
1a0012bc:	697b      	ldr	r3, [r7, #20]
1a0012be:	e00e      	b.n	1a0012de <_read_r+0x6a>
      while( i < n ){
1a0012c0:	697a      	ldr	r2, [r7, #20]
1a0012c2:	683b      	ldr	r3, [r7, #0]
1a0012c4:	429a      	cmp	r2, r3
1a0012c6:	d3e2      	bcc.n	1a00128e <_read_r+0x1a>
            }
         }
      }
      SET_ERR(ENODEV);
1a0012c8:	68fb      	ldr	r3, [r7, #12]
1a0012ca:	2213      	movs	r2, #19
1a0012cc:	601a      	str	r2, [r3, #0]
      return -1;
1a0012ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0012d2:	e004      	b.n	1a0012de <_read_r+0x6a>
  default:
      SET_ERR(ENODEV);
1a0012d4:	68fb      	ldr	r3, [r7, #12]
1a0012d6:	2213      	movs	r2, #19
1a0012d8:	601a      	str	r2, [r3, #0]
      return -1;
1a0012da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
1a0012de:	4618      	mov	r0, r3
1a0012e0:	3718      	adds	r7, #24
1a0012e2:	46bd      	mov	sp, r7
1a0012e4:	bd80      	pop	{r7, pc}

1a0012e6 <_write_r>:
   UNUSED(st);
   SET_ERR(ENOSYS);
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0012e6:	b580      	push	{r7, lr}
1a0012e8:	b086      	sub	sp, #24
1a0012ea:	af00      	add	r7, sp, #0
1a0012ec:	60f8      	str	r0, [r7, #12]
1a0012ee:	60b9      	str	r1, [r7, #8]
1a0012f0:	607a      	str	r2, [r7, #4]
1a0012f2:	603b      	str	r3, [r7, #0]
1a0012f4:	68bb      	ldr	r3, [r7, #8]
   size_t i;
   switch (fd) {
1a0012f6:	2b02      	cmp	r3, #2
1a0012f8:	d812      	bhi.n	1a001320 <_write_r+0x3a>
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0012fa:	2300      	movs	r3, #0
1a0012fc:	617b      	str	r3, [r7, #20]
1a0012fe:	e009      	b.n	1a001314 <_write_r+0x2e>
           __stdio_putchar(((char*) b)[i]);
1a001300:	687a      	ldr	r2, [r7, #4]
1a001302:	697b      	ldr	r3, [r7, #20]
1a001304:	4413      	add	r3, r2
1a001306:	781b      	ldrb	r3, [r3, #0]
1a001308:	4618      	mov	r0, r3
1a00130a:	f002 fa11 	bl	1a003730 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a00130e:	697b      	ldr	r3, [r7, #20]
1a001310:	3301      	adds	r3, #1
1a001312:	617b      	str	r3, [r7, #20]
1a001314:	697a      	ldr	r2, [r7, #20]
1a001316:	683b      	ldr	r3, [r7, #0]
1a001318:	429a      	cmp	r2, r3
1a00131a:	d3f1      	bcc.n	1a001300 <_write_r+0x1a>
       return n;
1a00131c:	683b      	ldr	r3, [r7, #0]
1a00131e:	e004      	b.n	1a00132a <_write_r+0x44>
   default:
       SET_ERR(ENODEV);
1a001320:	68fb      	ldr	r3, [r7, #12]
1a001322:	2213      	movs	r2, #19
1a001324:	601a      	str	r2, [r3, #0]
       return -1;
1a001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   }
}
1a00132a:	4618      	mov	r0, r3
1a00132c:	3718      	adds	r7, #24
1a00132e:	46bd      	mov	sp, r7
1a001330:	bd80      	pop	{r7, pc}
1a001332:	Address 0x000000001a001332 is out of bounds.


1a001334 <_sbrk_r>:
   return -1;
}

#endif

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
1a001334:	b480      	push	{r7}
1a001336:	b085      	sub	sp, #20
1a001338:	af00      	add	r7, sp, #0
1a00133a:	6078      	str	r0, [r7, #4]
1a00133c:	6039      	str	r1, [r7, #0]
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00133e:	4b0b      	ldr	r3, [pc, #44]	; (1a00136c <_sbrk_r+0x38>)
1a001340:	681b      	ldr	r3, [r3, #0]
1a001342:	2b00      	cmp	r3, #0
1a001344:	d102      	bne.n	1a00134c <_sbrk_r+0x18>
       heap_end = &_pvHeapStart;
1a001346:	4b09      	ldr	r3, [pc, #36]	; (1a00136c <_sbrk_r+0x38>)
1a001348:	4a09      	ldr	r2, [pc, #36]	; (1a001370 <_sbrk_r+0x3c>)
1a00134a:	601a      	str	r2, [r3, #0]
   }
   prev_heap_end = heap_end;
1a00134c:	4b07      	ldr	r3, [pc, #28]	; (1a00136c <_sbrk_r+0x38>)
1a00134e:	681b      	ldr	r3, [r3, #0]
1a001350:	60fb      	str	r3, [r7, #12]
   heap_end += incr;
1a001352:	4b06      	ldr	r3, [pc, #24]	; (1a00136c <_sbrk_r+0x38>)
1a001354:	681a      	ldr	r2, [r3, #0]
1a001356:	683b      	ldr	r3, [r7, #0]
1a001358:	4413      	add	r3, r2
1a00135a:	4a04      	ldr	r2, [pc, #16]	; (1a00136c <_sbrk_r+0x38>)
1a00135c:	6013      	str	r3, [r2, #0]
   return prev_heap_end;
1a00135e:	68fb      	ldr	r3, [r7, #12]
}
1a001360:	4618      	mov	r0, r3
1a001362:	3714      	adds	r7, #20
1a001364:	46bd      	mov	sp, r7
1a001366:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00136a:	4770      	bx	lr
1a00136c:	100009ec 	.word	0x100009ec
1a001370:	10002bec 	.word	0x10002bec

1a001374 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a001374:	b580      	push	{r7, lr}
1a001376:	b084      	sub	sp, #16
1a001378:	af00      	add	r7, sp, #0
1a00137a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
1a00137c:	2300      	movs	r3, #0
1a00137e:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a001380:	687b      	ldr	r3, [r7, #4]
1a001382:	f003 0307 	and.w	r3, r3, #7
1a001386:	2b00      	cmp	r3, #0
1a001388:	d004      	beq.n	1a001394 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00138a:	687b      	ldr	r3, [r7, #4]
1a00138c:	f023 0307 	bic.w	r3, r3, #7
1a001390:	3308      	adds	r3, #8
1a001392:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
1a001394:	f000 ff82 	bl	1a00229c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a001398:	4b18      	ldr	r3, [pc, #96]	; (1a0013fc <pvPortMalloc+0x88>)
1a00139a:	681b      	ldr	r3, [r3, #0]
1a00139c:	2b00      	cmp	r3, #0
1a00139e:	d105      	bne.n	1a0013ac <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a0013a0:	4b17      	ldr	r3, [pc, #92]	; (1a001400 <pvPortMalloc+0x8c>)
1a0013a2:	f023 0307 	bic.w	r3, r3, #7
1a0013a6:	461a      	mov	r2, r3
1a0013a8:	4b14      	ldr	r3, [pc, #80]	; (1a0013fc <pvPortMalloc+0x88>)
1a0013aa:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0013ac:	4b15      	ldr	r3, [pc, #84]	; (1a001404 <pvPortMalloc+0x90>)
1a0013ae:	681a      	ldr	r2, [r3, #0]
1a0013b0:	687b      	ldr	r3, [r7, #4]
1a0013b2:	4413      	add	r3, r2
1a0013b4:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a0013b8:	4293      	cmp	r3, r2
1a0013ba:	d813      	bhi.n	1a0013e4 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
1a0013bc:	4b11      	ldr	r3, [pc, #68]	; (1a001404 <pvPortMalloc+0x90>)
1a0013be:	681a      	ldr	r2, [r3, #0]
1a0013c0:	687b      	ldr	r3, [r7, #4]
1a0013c2:	441a      	add	r2, r3
1a0013c4:	4b0f      	ldr	r3, [pc, #60]	; (1a001404 <pvPortMalloc+0x90>)
1a0013c6:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a0013c8:	429a      	cmp	r2, r3
1a0013ca:	d90b      	bls.n	1a0013e4 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a0013cc:	4b0b      	ldr	r3, [pc, #44]	; (1a0013fc <pvPortMalloc+0x88>)
1a0013ce:	681a      	ldr	r2, [r3, #0]
1a0013d0:	4b0c      	ldr	r3, [pc, #48]	; (1a001404 <pvPortMalloc+0x90>)
1a0013d2:	681b      	ldr	r3, [r3, #0]
1a0013d4:	4413      	add	r3, r2
1a0013d6:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
1a0013d8:	4b0a      	ldr	r3, [pc, #40]	; (1a001404 <pvPortMalloc+0x90>)
1a0013da:	681a      	ldr	r2, [r3, #0]
1a0013dc:	687b      	ldr	r3, [r7, #4]
1a0013de:	4413      	add	r3, r2
1a0013e0:	4a08      	ldr	r2, [pc, #32]	; (1a001404 <pvPortMalloc+0x90>)
1a0013e2:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a0013e4:	f000 ff68 	bl	1a0022b8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
1a0013e8:	68fb      	ldr	r3, [r7, #12]
1a0013ea:	2b00      	cmp	r3, #0
1a0013ec:	d101      	bne.n	1a0013f2 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a0013ee:	f7ff fe6b 	bl	1a0010c8 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
1a0013f2:	68fb      	ldr	r3, [r7, #12]
}
1a0013f4:	4618      	mov	r0, r3
1a0013f6:	3710      	adds	r7, #16
1a0013f8:	46bd      	mov	sp, r7
1a0013fa:	bd80      	pop	{r7, pc}
1a0013fc:	100029f4 	.word	0x100029f4
1a001400:	100009f8 	.word	0x100009f8
1a001404:	100029f0 	.word	0x100029f0

1a001408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
1a001408:	b480      	push	{r7}
1a00140a:	b085      	sub	sp, #20
1a00140c:	af00      	add	r7, sp, #0
1a00140e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a001410:	687b      	ldr	r3, [r7, #4]
1a001412:	2b00      	cmp	r3, #0
1a001414:	d009      	beq.n	1a00142a <vPortFree+0x22>
1a001416:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00141a:	f383 8811 	msr	BASEPRI, r3
1a00141e:	f3bf 8f6f 	isb	sy
1a001422:	f3bf 8f4f 	dsb	sy
1a001426:	60fb      	str	r3, [r7, #12]
1a001428:	e7fe      	b.n	1a001428 <vPortFree+0x20>
}
1a00142a:	bf00      	nop
1a00142c:	3714      	adds	r7, #20
1a00142e:	46bd      	mov	sp, r7
1a001430:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001434:	4770      	bx	lr
1a001436:	Address 0x000000001a001436 is out of bounds.


1a001438 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
1a001438:	b580      	push	{r7, lr}
1a00143a:	b084      	sub	sp, #16
1a00143c:	af00      	add	r7, sp, #0
1a00143e:	6078      	str	r0, [r7, #4]
1a001440:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1a001442:	687b      	ldr	r3, [r7, #4]
1a001444:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
1a001446:	68fb      	ldr	r3, [r7, #12]
1a001448:	2b00      	cmp	r3, #0
1a00144a:	d109      	bne.n	1a001460 <xQueueGenericReset+0x28>
1a00144c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001450:	f383 8811 	msr	BASEPRI, r3
1a001454:	f3bf 8f6f 	isb	sy
1a001458:	f3bf 8f4f 	dsb	sy
1a00145c:	60bb      	str	r3, [r7, #8]
1a00145e:	e7fe      	b.n	1a00145e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
1a001460:	f001 fe1c 	bl	1a00309c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a001464:	68fb      	ldr	r3, [r7, #12]
1a001466:	681a      	ldr	r2, [r3, #0]
1a001468:	68fb      	ldr	r3, [r7, #12]
1a00146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1a00146c:	68f9      	ldr	r1, [r7, #12]
1a00146e:	6c09      	ldr	r1, [r1, #64]	; 0x40
1a001470:	fb01 f303 	mul.w	r3, r1, r3
1a001474:	441a      	add	r2, r3
1a001476:	68fb      	ldr	r3, [r7, #12]
1a001478:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a00147a:	68fb      	ldr	r3, [r7, #12]
1a00147c:	2200      	movs	r2, #0
1a00147e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a001480:	68fb      	ldr	r3, [r7, #12]
1a001482:	681a      	ldr	r2, [r3, #0]
1a001484:	68fb      	ldr	r3, [r7, #12]
1a001486:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a001488:	68fb      	ldr	r3, [r7, #12]
1a00148a:	681a      	ldr	r2, [r3, #0]
1a00148c:	68fb      	ldr	r3, [r7, #12]
1a00148e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1a001490:	3b01      	subs	r3, #1
1a001492:	68f9      	ldr	r1, [r7, #12]
1a001494:	6c09      	ldr	r1, [r1, #64]	; 0x40
1a001496:	fb01 f303 	mul.w	r3, r1, r3
1a00149a:	441a      	add	r2, r3
1a00149c:	68fb      	ldr	r3, [r7, #12]
1a00149e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0014a0:	68fb      	ldr	r3, [r7, #12]
1a0014a2:	22ff      	movs	r2, #255	; 0xff
1a0014a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0014a8:	68fb      	ldr	r3, [r7, #12]
1a0014aa:	22ff      	movs	r2, #255	; 0xff
1a0014ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
1a0014b0:	683b      	ldr	r3, [r7, #0]
1a0014b2:	2b00      	cmp	r3, #0
1a0014b4:	d114      	bne.n	1a0014e0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0014b6:	68fb      	ldr	r3, [r7, #12]
1a0014b8:	691b      	ldr	r3, [r3, #16]
1a0014ba:	2b00      	cmp	r3, #0
1a0014bc:	d01a      	beq.n	1a0014f4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0014be:	68fb      	ldr	r3, [r7, #12]
1a0014c0:	3310      	adds	r3, #16
1a0014c2:	4618      	mov	r0, r3
1a0014c4:	f001 f916 	bl	1a0026f4 <xTaskRemoveFromEventList>
1a0014c8:	4603      	mov	r3, r0
1a0014ca:	2b00      	cmp	r3, #0
1a0014cc:	d012      	beq.n	1a0014f4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
1a0014ce:	4b0d      	ldr	r3, [pc, #52]	; (1a001504 <xQueueGenericReset+0xcc>)
1a0014d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0014d4:	601a      	str	r2, [r3, #0]
1a0014d6:	f3bf 8f4f 	dsb	sy
1a0014da:	f3bf 8f6f 	isb	sy
1a0014de:	e009      	b.n	1a0014f4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0014e0:	68fb      	ldr	r3, [r7, #12]
1a0014e2:	3310      	adds	r3, #16
1a0014e4:	4618      	mov	r0, r3
1a0014e6:	f000 fbc7 	bl	1a001c78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0014ea:	68fb      	ldr	r3, [r7, #12]
1a0014ec:	3324      	adds	r3, #36	; 0x24
1a0014ee:	4618      	mov	r0, r3
1a0014f0:	f000 fbc2 	bl	1a001c78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
1a0014f4:	f001 fe00 	bl	1a0030f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
1a0014f8:	2301      	movs	r3, #1
}
1a0014fa:	4618      	mov	r0, r3
1a0014fc:	3710      	adds	r7, #16
1a0014fe:	46bd      	mov	sp, r7
1a001500:	bd80      	pop	{r7, pc}
1a001502:	bf00      	nop
1a001504:	e000ed04 	.word	0xe000ed04

1a001508 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
1a001508:	b580      	push	{r7, lr}
1a00150a:	b08a      	sub	sp, #40	; 0x28
1a00150c:	af02      	add	r7, sp, #8
1a00150e:	60f8      	str	r0, [r7, #12]
1a001510:	60b9      	str	r1, [r7, #8]
1a001512:	4613      	mov	r3, r2
1a001514:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a001516:	68fb      	ldr	r3, [r7, #12]
1a001518:	2b00      	cmp	r3, #0
1a00151a:	d109      	bne.n	1a001530 <xQueueGenericCreate+0x28>
1a00151c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001520:	f383 8811 	msr	BASEPRI, r3
1a001524:	f3bf 8f6f 	isb	sy
1a001528:	f3bf 8f4f 	dsb	sy
1a00152c:	613b      	str	r3, [r7, #16]
1a00152e:	e7fe      	b.n	1a00152e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
1a001530:	68bb      	ldr	r3, [r7, #8]
1a001532:	2b00      	cmp	r3, #0
1a001534:	d102      	bne.n	1a00153c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
1a001536:	2300      	movs	r3, #0
1a001538:	61fb      	str	r3, [r7, #28]
1a00153a:	e004      	b.n	1a001546 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00153c:	68fb      	ldr	r3, [r7, #12]
1a00153e:	68ba      	ldr	r2, [r7, #8]
1a001540:	fb02 f303 	mul.w	r3, r2, r3
1a001544:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a001546:	69fb      	ldr	r3, [r7, #28]
1a001548:	3348      	adds	r3, #72	; 0x48
1a00154a:	4618      	mov	r0, r3
1a00154c:	f7ff ff12 	bl	1a001374 <pvPortMalloc>
1a001550:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
1a001552:	69bb      	ldr	r3, [r7, #24]
1a001554:	2b00      	cmp	r3, #0
1a001556:	d00b      	beq.n	1a001570 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
1a001558:	69bb      	ldr	r3, [r7, #24]
1a00155a:	3348      	adds	r3, #72	; 0x48
1a00155c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00155e:	79fa      	ldrb	r2, [r7, #7]
1a001560:	69bb      	ldr	r3, [r7, #24]
1a001562:	9300      	str	r3, [sp, #0]
1a001564:	4613      	mov	r3, r2
1a001566:	697a      	ldr	r2, [r7, #20]
1a001568:	68b9      	ldr	r1, [r7, #8]
1a00156a:	68f8      	ldr	r0, [r7, #12]
1a00156c:	f000 f805 	bl	1a00157a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
1a001570:	69bb      	ldr	r3, [r7, #24]
	}
1a001572:	4618      	mov	r0, r3
1a001574:	3720      	adds	r7, #32
1a001576:	46bd      	mov	sp, r7
1a001578:	bd80      	pop	{r7, pc}

1a00157a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1a00157a:	b580      	push	{r7, lr}
1a00157c:	b084      	sub	sp, #16
1a00157e:	af00      	add	r7, sp, #0
1a001580:	60f8      	str	r0, [r7, #12]
1a001582:	60b9      	str	r1, [r7, #8]
1a001584:	607a      	str	r2, [r7, #4]
1a001586:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1a001588:	68bb      	ldr	r3, [r7, #8]
1a00158a:	2b00      	cmp	r3, #0
1a00158c:	d103      	bne.n	1a001596 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a00158e:	69bb      	ldr	r3, [r7, #24]
1a001590:	69ba      	ldr	r2, [r7, #24]
1a001592:	601a      	str	r2, [r3, #0]
1a001594:	e002      	b.n	1a00159c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a001596:	69bb      	ldr	r3, [r7, #24]
1a001598:	687a      	ldr	r2, [r7, #4]
1a00159a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1a00159c:	69bb      	ldr	r3, [r7, #24]
1a00159e:	68fa      	ldr	r2, [r7, #12]
1a0015a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0015a2:	69bb      	ldr	r3, [r7, #24]
1a0015a4:	68ba      	ldr	r2, [r7, #8]
1a0015a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0015a8:	2101      	movs	r1, #1
1a0015aa:	69b8      	ldr	r0, [r7, #24]
1a0015ac:	f7ff ff44 	bl	1a001438 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
1a0015b0:	bf00      	nop
1a0015b2:	3710      	adds	r7, #16
1a0015b4:	46bd      	mov	sp, r7
1a0015b6:	bd80      	pop	{r7, pc}

1a0015b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
1a0015b8:	b580      	push	{r7, lr}
1a0015ba:	b08c      	sub	sp, #48	; 0x30
1a0015bc:	af00      	add	r7, sp, #0
1a0015be:	60f8      	str	r0, [r7, #12]
1a0015c0:	60b9      	str	r1, [r7, #8]
1a0015c2:	607a      	str	r2, [r7, #4]
1a0015c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
1a0015c6:	2300      	movs	r3, #0
1a0015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1a0015ca:	68fb      	ldr	r3, [r7, #12]
1a0015cc:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
1a0015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0015d0:	2b00      	cmp	r3, #0
1a0015d2:	d109      	bne.n	1a0015e8 <xQueueGenericSend+0x30>
1a0015d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015d8:	f383 8811 	msr	BASEPRI, r3
1a0015dc:	f3bf 8f6f 	isb	sy
1a0015e0:	f3bf 8f4f 	dsb	sy
1a0015e4:	623b      	str	r3, [r7, #32]
1a0015e6:	e7fe      	b.n	1a0015e6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0015e8:	68bb      	ldr	r3, [r7, #8]
1a0015ea:	2b00      	cmp	r3, #0
1a0015ec:	d103      	bne.n	1a0015f6 <xQueueGenericSend+0x3e>
1a0015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a0015f2:	2b00      	cmp	r3, #0
1a0015f4:	d101      	bne.n	1a0015fa <xQueueGenericSend+0x42>
1a0015f6:	2301      	movs	r3, #1
1a0015f8:	e000      	b.n	1a0015fc <xQueueGenericSend+0x44>
1a0015fa:	2300      	movs	r3, #0
1a0015fc:	2b00      	cmp	r3, #0
1a0015fe:	d109      	bne.n	1a001614 <xQueueGenericSend+0x5c>
1a001600:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001604:	f383 8811 	msr	BASEPRI, r3
1a001608:	f3bf 8f6f 	isb	sy
1a00160c:	f3bf 8f4f 	dsb	sy
1a001610:	61fb      	str	r3, [r7, #28]
1a001612:	e7fe      	b.n	1a001612 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001614:	683b      	ldr	r3, [r7, #0]
1a001616:	2b02      	cmp	r3, #2
1a001618:	d103      	bne.n	1a001622 <xQueueGenericSend+0x6a>
1a00161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a00161c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1a00161e:	2b01      	cmp	r3, #1
1a001620:	d101      	bne.n	1a001626 <xQueueGenericSend+0x6e>
1a001622:	2301      	movs	r3, #1
1a001624:	e000      	b.n	1a001628 <xQueueGenericSend+0x70>
1a001626:	2300      	movs	r3, #0
1a001628:	2b00      	cmp	r3, #0
1a00162a:	d109      	bne.n	1a001640 <xQueueGenericSend+0x88>
1a00162c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001630:	f383 8811 	msr	BASEPRI, r3
1a001634:	f3bf 8f6f 	isb	sy
1a001638:	f3bf 8f4f 	dsb	sy
1a00163c:	61bb      	str	r3, [r7, #24]
1a00163e:	e7fe      	b.n	1a00163e <xQueueGenericSend+0x86>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
1a001640:	f001 fd2c 	bl	1a00309c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a00164a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1a00164c:	429a      	cmp	r2, r3
1a00164e:	d302      	bcc.n	1a001656 <xQueueGenericSend+0x9e>
1a001650:	683b      	ldr	r3, [r7, #0]
1a001652:	2b02      	cmp	r3, #2
1a001654:	d129      	bne.n	1a0016aa <xQueueGenericSend+0xf2>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001656:	683a      	ldr	r2, [r7, #0]
1a001658:	68b9      	ldr	r1, [r7, #8]
1a00165a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1a00165c:	f000 fa22 	bl	1a001aa4 <prvCopyDataToQueue>
1a001660:	6278      	str	r0, [r7, #36]	; 0x24
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001662:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a001666:	2b00      	cmp	r3, #0
1a001668:	d010      	beq.n	1a00168c <xQueueGenericSend+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a00166c:	3324      	adds	r3, #36	; 0x24
1a00166e:	4618      	mov	r0, r3
1a001670:	f001 f840 	bl	1a0026f4 <xTaskRemoveFromEventList>
1a001674:	4603      	mov	r3, r0
1a001676:	2b00      	cmp	r3, #0
1a001678:	d013      	beq.n	1a0016a2 <xQueueGenericSend+0xea>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
1a00167a:	4b40      	ldr	r3, [pc, #256]	; (1a00177c <xQueueGenericSend+0x1c4>)
1a00167c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001680:	601a      	str	r2, [r3, #0]
1a001682:	f3bf 8f4f 	dsb	sy
1a001686:	f3bf 8f6f 	isb	sy
1a00168a:	e00a      	b.n	1a0016a2 <xQueueGenericSend+0xea>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
1a00168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00168e:	2b00      	cmp	r3, #0
1a001690:	d007      	beq.n	1a0016a2 <xQueueGenericSend+0xea>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
1a001692:	4b3a      	ldr	r3, [pc, #232]	; (1a00177c <xQueueGenericSend+0x1c4>)
1a001694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001698:	601a      	str	r2, [r3, #0]
1a00169a:	f3bf 8f4f 	dsb	sy
1a00169e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
1a0016a2:	f001 fd29 	bl	1a0030f8 <vPortExitCritical>
				return pdPASS;
1a0016a6:	2301      	movs	r3, #1
1a0016a8:	e063      	b.n	1a001772 <xQueueGenericSend+0x1ba>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a0016aa:	687b      	ldr	r3, [r7, #4]
1a0016ac:	2b00      	cmp	r3, #0
1a0016ae:	d103      	bne.n	1a0016b8 <xQueueGenericSend+0x100>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a0016b0:	f001 fd22 	bl	1a0030f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
1a0016b4:	2300      	movs	r3, #0
1a0016b6:	e05c      	b.n	1a001772 <xQueueGenericSend+0x1ba>
				}
				else if( xEntryTimeSet == pdFALSE )
1a0016b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0016ba:	2b00      	cmp	r3, #0
1a0016bc:	d106      	bne.n	1a0016cc <xQueueGenericSend+0x114>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0016be:	f107 0310 	add.w	r3, r7, #16
1a0016c2:	4618      	mov	r0, r3
1a0016c4:	f001 f878 	bl	1a0027b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0016c8:	2301      	movs	r3, #1
1a0016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a0016cc:	f001 fd14 	bl	1a0030f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a0016d0:	f000 fde4 	bl	1a00229c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0016d4:	f001 fce2 	bl	1a00309c <vPortEnterCritical>
1a0016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0016da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
1a0016de:	b25b      	sxtb	r3, r3
1a0016e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0016e4:	d103      	bne.n	1a0016ee <xQueueGenericSend+0x136>
1a0016e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0016e8:	2200      	movs	r2, #0
1a0016ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
1a0016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0016f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
1a0016f4:	b25b      	sxtb	r3, r3
1a0016f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0016fa:	d103      	bne.n	1a001704 <xQueueGenericSend+0x14c>
1a0016fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a0016fe:	2200      	movs	r2, #0
1a001700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
1a001704:	f001 fcf8 	bl	1a0030f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001708:	1d3a      	adds	r2, r7, #4
1a00170a:	f107 0310 	add.w	r3, r7, #16
1a00170e:	4611      	mov	r1, r2
1a001710:	4618      	mov	r0, r3
1a001712:	f001 f867 	bl	1a0027e4 <xTaskCheckForTimeOut>
1a001716:	4603      	mov	r3, r0
1a001718:	2b00      	cmp	r3, #0
1a00171a:	d124      	bne.n	1a001766 <xQueueGenericSend+0x1ae>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00171c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1a00171e:	f000 fa93 	bl	1a001c48 <prvIsQueueFull>
1a001722:	4603      	mov	r3, r0
1a001724:	2b00      	cmp	r3, #0
1a001726:	d018      	beq.n	1a00175a <xQueueGenericSend+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a00172a:	3310      	adds	r3, #16
1a00172c:	687a      	ldr	r2, [r7, #4]
1a00172e:	4611      	mov	r1, r2
1a001730:	4618      	mov	r0, r3
1a001732:	f000 ffbb 	bl	1a0026ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
1a001736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1a001738:	f000 fa1e 	bl	1a001b78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
1a00173c:	f000 fdbc 	bl	1a0022b8 <xTaskResumeAll>
1a001740:	4603      	mov	r3, r0
1a001742:	2b00      	cmp	r3, #0
1a001744:	f47f af7c 	bne.w	1a001640 <xQueueGenericSend+0x88>
				{
					portYIELD_WITHIN_API();
1a001748:	4b0c      	ldr	r3, [pc, #48]	; (1a00177c <xQueueGenericSend+0x1c4>)
1a00174a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00174e:	601a      	str	r2, [r3, #0]
1a001750:	f3bf 8f4f 	dsb	sy
1a001754:	f3bf 8f6f 	isb	sy
1a001758:	e772      	b.n	1a001640 <xQueueGenericSend+0x88>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
1a00175a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1a00175c:	f000 fa0c 	bl	1a001b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001760:	f000 fdaa 	bl	1a0022b8 <xTaskResumeAll>
1a001764:	e76c      	b.n	1a001640 <xQueueGenericSend+0x88>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
1a001766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1a001768:	f000 fa06 	bl	1a001b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00176c:	f000 fda4 	bl	1a0022b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
1a001770:	2300      	movs	r3, #0
		}
	}
}
1a001772:	4618      	mov	r0, r3
1a001774:	3730      	adds	r7, #48	; 0x30
1a001776:	46bd      	mov	sp, r7
1a001778:	bd80      	pop	{r7, pc}
1a00177a:	bf00      	nop
1a00177c:	e000ed04 	.word	0xe000ed04

1a001780 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
1a001780:	b580      	push	{r7, lr}
1a001782:	b08e      	sub	sp, #56	; 0x38
1a001784:	af00      	add	r7, sp, #0
1a001786:	6078      	str	r0, [r7, #4]
1a001788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1a00178a:	687b      	ldr	r3, [r7, #4]
1a00178c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
1a00178e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001790:	2b00      	cmp	r3, #0
1a001792:	d109      	bne.n	1a0017a8 <xQueueGiveFromISR+0x28>
1a001794:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001798:	f383 8811 	msr	BASEPRI, r3
1a00179c:	f3bf 8f6f 	isb	sy
1a0017a0:	f3bf 8f4f 	dsb	sy
1a0017a4:	623b      	str	r3, [r7, #32]
1a0017a6:	e7fe      	b.n	1a0017a6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
1a0017a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a0017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a0017ac:	2b00      	cmp	r3, #0
1a0017ae:	d009      	beq.n	1a0017c4 <xQueueGiveFromISR+0x44>
1a0017b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017b4:	f383 8811 	msr	BASEPRI, r3
1a0017b8:	f3bf 8f6f 	isb	sy
1a0017bc:	f3bf 8f4f 	dsb	sy
1a0017c0:	61fb      	str	r3, [r7, #28]
1a0017c2:	e7fe      	b.n	1a0017c2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
1a0017c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a0017c6:	681b      	ldr	r3, [r3, #0]
1a0017c8:	2b00      	cmp	r3, #0
1a0017ca:	d103      	bne.n	1a0017d4 <xQueueGiveFromISR+0x54>
1a0017cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a0017ce:	685b      	ldr	r3, [r3, #4]
1a0017d0:	2b00      	cmp	r3, #0
1a0017d2:	d101      	bne.n	1a0017d8 <xQueueGiveFromISR+0x58>
1a0017d4:	2301      	movs	r3, #1
1a0017d6:	e000      	b.n	1a0017da <xQueueGiveFromISR+0x5a>
1a0017d8:	2300      	movs	r3, #0
1a0017da:	2b00      	cmp	r3, #0
1a0017dc:	d109      	bne.n	1a0017f2 <xQueueGiveFromISR+0x72>
1a0017de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017e2:	f383 8811 	msr	BASEPRI, r3
1a0017e6:	f3bf 8f6f 	isb	sy
1a0017ea:	f3bf 8f4f 	dsb	sy
1a0017ee:	61bb      	str	r3, [r7, #24]
1a0017f0:	e7fe      	b.n	1a0017f0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0017f2:	f001 fd2f 	bl	1a003254 <vPortValidateInterruptPriority>
	__asm volatile
1a0017f6:	f3ef 8211 	mrs	r2, BASEPRI
1a0017fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017fe:	f383 8811 	msr	BASEPRI, r3
1a001802:	f3bf 8f6f 	isb	sy
1a001806:	f3bf 8f4f 	dsb	sy
1a00180a:	617a      	str	r2, [r7, #20]
1a00180c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
1a00180e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1a001810:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a001816:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
1a001818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a00181a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1a00181c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a00181e:	429a      	cmp	r2, r3
1a001820:	d22b      	bcs.n	1a00187a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
1a001822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
1a001828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a00182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a00182e:	1c5a      	adds	r2, r3, #1
1a001830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001832:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1a001834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
1a001838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00183c:	d112      	bne.n	1a001864 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a001842:	2b00      	cmp	r3, #0
1a001844:	d016      	beq.n	1a001874 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001848:	3324      	adds	r3, #36	; 0x24
1a00184a:	4618      	mov	r0, r3
1a00184c:	f000 ff52 	bl	1a0026f4 <xTaskRemoveFromEventList>
1a001850:	4603      	mov	r3, r0
1a001852:	2b00      	cmp	r3, #0
1a001854:	d00e      	beq.n	1a001874 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1a001856:	683b      	ldr	r3, [r7, #0]
1a001858:	2b00      	cmp	r3, #0
1a00185a:	d00b      	beq.n	1a001874 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00185c:	683b      	ldr	r3, [r7, #0]
1a00185e:	2201      	movs	r2, #1
1a001860:	601a      	str	r2, [r3, #0]
1a001862:	e007      	b.n	1a001874 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
1a001868:	3301      	adds	r3, #1
1a00186a:	b2db      	uxtb	r3, r3
1a00186c:	b25a      	sxtb	r2, r3
1a00186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
1a001874:	2301      	movs	r3, #1
1a001876:	637b      	str	r3, [r7, #52]	; 0x34
1a001878:	e001      	b.n	1a00187e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
1a00187a:	2300      	movs	r3, #0
1a00187c:	637b      	str	r3, [r7, #52]	; 0x34
1a00187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001880:	60fb      	str	r3, [r7, #12]
	__asm volatile
1a001882:	68fb      	ldr	r3, [r7, #12]
1a001884:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
1a001888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
1a00188a:	4618      	mov	r0, r3
1a00188c:	3738      	adds	r7, #56	; 0x38
1a00188e:	46bd      	mov	sp, r7
1a001890:	bd80      	pop	{r7, pc}
1a001892:	Address 0x000000001a001892 is out of bounds.


1a001894 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
1a001894:	b580      	push	{r7, lr}
1a001896:	b08c      	sub	sp, #48	; 0x30
1a001898:	af00      	add	r7, sp, #0
1a00189a:	6078      	str	r0, [r7, #4]
1a00189c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
1a00189e:	2300      	movs	r3, #0
1a0018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1a0018a2:	687b      	ldr	r3, [r7, #4]
1a0018a4:	627b      	str	r3, [r7, #36]	; 0x24

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
1a0018a6:	2300      	movs	r3, #0
1a0018a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
1a0018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0018ac:	2b00      	cmp	r3, #0
1a0018ae:	d109      	bne.n	1a0018c4 <xQueueSemaphoreTake+0x30>
	__asm volatile
1a0018b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018b4:	f383 8811 	msr	BASEPRI, r3
1a0018b8:	f3bf 8f6f 	isb	sy
1a0018bc:	f3bf 8f4f 	dsb	sy
1a0018c0:	61bb      	str	r3, [r7, #24]
1a0018c2:	e7fe      	b.n	1a0018c2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
1a0018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a0018c8:	2b00      	cmp	r3, #0
1a0018ca:	d009      	beq.n	1a0018e0 <xQueueSemaphoreTake+0x4c>
1a0018cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018d0:	f383 8811 	msr	BASEPRI, r3
1a0018d4:	f3bf 8f6f 	isb	sy
1a0018d8:	f3bf 8f4f 	dsb	sy
1a0018dc:	617b      	str	r3, [r7, #20]
1a0018de:	e7fe      	b.n	1a0018de <xQueueSemaphoreTake+0x4a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1a0018e0:	f001 fbdc 	bl	1a00309c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a0018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0018e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a0018e8:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a0018ea:	6a3b      	ldr	r3, [r7, #32]
1a0018ec:	2b00      	cmp	r3, #0
1a0018ee:	d024      	beq.n	1a00193a <xQueueSemaphoreTake+0xa6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a0018f0:	6a3b      	ldr	r3, [r7, #32]
1a0018f2:	1e5a      	subs	r2, r3, #1
1a0018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0018f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0018fa:	681b      	ldr	r3, [r3, #0]
1a0018fc:	2b00      	cmp	r3, #0
1a0018fe:	d104      	bne.n	1a00190a <xQueueSemaphoreTake+0x76>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a001900:	f001 fa30 	bl	1a002d64 <pvTaskIncrementMutexHeldCount>
1a001904:	4602      	mov	r2, r0
1a001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a001908:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00190c:	691b      	ldr	r3, [r3, #16]
1a00190e:	2b00      	cmp	r3, #0
1a001910:	d00f      	beq.n	1a001932 <xQueueSemaphoreTake+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a001914:	3310      	adds	r3, #16
1a001916:	4618      	mov	r0, r3
1a001918:	f000 feec 	bl	1a0026f4 <xTaskRemoveFromEventList>
1a00191c:	4603      	mov	r3, r0
1a00191e:	2b00      	cmp	r3, #0
1a001920:	d007      	beq.n	1a001932 <xQueueSemaphoreTake+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
1a001922:	4b53      	ldr	r3, [pc, #332]	; (1a001a70 <xQueueSemaphoreTake+0x1dc>)
1a001924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001928:	601a      	str	r2, [r3, #0]
1a00192a:	f3bf 8f4f 	dsb	sy
1a00192e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
1a001932:	f001 fbe1 	bl	1a0030f8 <vPortExitCritical>
				return pdPASS;
1a001936:	2301      	movs	r3, #1
1a001938:	e096      	b.n	1a001a68 <xQueueSemaphoreTake+0x1d4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a00193a:	683b      	ldr	r3, [r7, #0]
1a00193c:	2b00      	cmp	r3, #0
1a00193e:	d110      	bne.n	1a001962 <xQueueSemaphoreTake+0xce>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001942:	2b00      	cmp	r3, #0
1a001944:	d009      	beq.n	1a00195a <xQueueSemaphoreTake+0xc6>
1a001946:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00194a:	f383 8811 	msr	BASEPRI, r3
1a00194e:	f3bf 8f6f 	isb	sy
1a001952:	f3bf 8f4f 	dsb	sy
1a001956:	613b      	str	r3, [r7, #16]
1a001958:	e7fe      	b.n	1a001958 <xQueueSemaphoreTake+0xc4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
1a00195a:	f001 fbcd 	bl	1a0030f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
1a00195e:	2300      	movs	r3, #0
1a001960:	e082      	b.n	1a001a68 <xQueueSemaphoreTake+0x1d4>
				}
				else if( xEntryTimeSet == pdFALSE )
1a001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001964:	2b00      	cmp	r3, #0
1a001966:	d106      	bne.n	1a001976 <xQueueSemaphoreTake+0xe2>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001968:	f107 0308 	add.w	r3, r7, #8
1a00196c:	4618      	mov	r0, r3
1a00196e:	f000 ff23 	bl	1a0027b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001972:	2301      	movs	r3, #1
1a001974:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a001976:	f001 fbbf 	bl	1a0030f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
1a00197a:	f000 fc8f 	bl	1a00229c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00197e:	f001 fb8d 	bl	1a00309c <vPortEnterCritical>
1a001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a001984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
1a001988:	b25b      	sxtb	r3, r3
1a00198a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00198e:	d103      	bne.n	1a001998 <xQueueSemaphoreTake+0x104>
1a001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a001992:	2200      	movs	r2, #0
1a001994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
1a001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00199a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
1a00199e:	b25b      	sxtb	r3, r3
1a0019a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0019a4:	d103      	bne.n	1a0019ae <xQueueSemaphoreTake+0x11a>
1a0019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0019a8:	2200      	movs	r2, #0
1a0019aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
1a0019ae:	f001 fba3 	bl	1a0030f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0019b2:	463a      	mov	r2, r7
1a0019b4:	f107 0308 	add.w	r3, r7, #8
1a0019b8:	4611      	mov	r1, r2
1a0019ba:	4618      	mov	r0, r3
1a0019bc:	f000 ff12 	bl	1a0027e4 <xTaskCheckForTimeOut>
1a0019c0:	4603      	mov	r3, r0
1a0019c2:	2b00      	cmp	r3, #0
1a0019c4:	d132      	bne.n	1a001a2c <xQueueSemaphoreTake+0x198>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0019c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
1a0019c8:	f000 f928 	bl	1a001c1c <prvIsQueueEmpty>
1a0019cc:	4603      	mov	r3, r0
1a0019ce:	2b00      	cmp	r3, #0
1a0019d0:	d026      	beq.n	1a001a20 <xQueueSemaphoreTake+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0019d4:	681b      	ldr	r3, [r3, #0]
1a0019d6:	2b00      	cmp	r3, #0
1a0019d8:	d109      	bne.n	1a0019ee <xQueueSemaphoreTake+0x15a>
					{
						taskENTER_CRITICAL();
1a0019da:	f001 fb5f 	bl	1a00309c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a0019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0019e0:	685b      	ldr	r3, [r3, #4]
1a0019e2:	4618      	mov	r0, r3
1a0019e4:	f001 f816 	bl	1a002a14 <xTaskPriorityInherit>
1a0019e8:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
1a0019ea:	f001 fb85 	bl	1a0030f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0019f0:	3324      	adds	r3, #36	; 0x24
1a0019f2:	683a      	ldr	r2, [r7, #0]
1a0019f4:	4611      	mov	r1, r2
1a0019f6:	4618      	mov	r0, r3
1a0019f8:	f000 fe58 	bl	1a0026ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0019fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
1a0019fe:	f000 f8bb 	bl	1a001b78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001a02:	f000 fc59 	bl	1a0022b8 <xTaskResumeAll>
1a001a06:	4603      	mov	r3, r0
1a001a08:	2b00      	cmp	r3, #0
1a001a0a:	f47f af69 	bne.w	1a0018e0 <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
1a001a0e:	4b18      	ldr	r3, [pc, #96]	; (1a001a70 <xQueueSemaphoreTake+0x1dc>)
1a001a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001a14:	601a      	str	r2, [r3, #0]
1a001a16:	f3bf 8f4f 	dsb	sy
1a001a1a:	f3bf 8f6f 	isb	sy
1a001a1e:	e75f      	b.n	1a0018e0 <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
1a001a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
1a001a22:	f000 f8a9 	bl	1a001b78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001a26:	f000 fc47 	bl	1a0022b8 <xTaskResumeAll>
1a001a2a:	e759      	b.n	1a0018e0 <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
1a001a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
1a001a2e:	f000 f8a3 	bl	1a001b78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001a32:	f000 fc41 	bl	1a0022b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001a36:	6a78      	ldr	r0, [r7, #36]	; 0x24
1a001a38:	f000 f8f0 	bl	1a001c1c <prvIsQueueEmpty>
1a001a3c:	4603      	mov	r3, r0
1a001a3e:	2b00      	cmp	r3, #0
1a001a40:	f43f af4e 	beq.w	1a0018e0 <xQueueSemaphoreTake+0x4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
1a001a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001a46:	2b00      	cmp	r3, #0
1a001a48:	d00d      	beq.n	1a001a66 <xQueueSemaphoreTake+0x1d2>
					{
						taskENTER_CRITICAL();
1a001a4a:	f001 fb27 	bl	1a00309c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001a4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
1a001a50:	f000 f810 	bl	1a001a74 <prvGetDisinheritPriorityAfterTimeout>
1a001a54:	61f8      	str	r0, [r7, #28]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a001a58:	685b      	ldr	r3, [r3, #4]
1a001a5a:	69f9      	ldr	r1, [r7, #28]
1a001a5c:	4618      	mov	r0, r3
1a001a5e:	f001 f8e3 	bl	1a002c28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
1a001a62:	f001 fb49 	bl	1a0030f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
1a001a66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
1a001a68:	4618      	mov	r0, r3
1a001a6a:	3730      	adds	r7, #48	; 0x30
1a001a6c:	46bd      	mov	sp, r7
1a001a6e:	bd80      	pop	{r7, pc}
1a001a70:	e000ed04 	.word	0xe000ed04

1a001a74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
1a001a74:	b480      	push	{r7}
1a001a76:	b085      	sub	sp, #20
1a001a78:	af00      	add	r7, sp, #0
1a001a7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a001a7c:	687b      	ldr	r3, [r7, #4]
1a001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a001a80:	2b00      	cmp	r3, #0
1a001a82:	d006      	beq.n	1a001a92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a001a84:	687b      	ldr	r3, [r7, #4]
1a001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001a88:	681b      	ldr	r3, [r3, #0]
1a001a8a:	f1c3 0307 	rsb	r3, r3, #7
1a001a8e:	60fb      	str	r3, [r7, #12]
1a001a90:	e001      	b.n	1a001a96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a001a92:	2300      	movs	r3, #0
1a001a94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
1a001a96:	68fb      	ldr	r3, [r7, #12]
	}
1a001a98:	4618      	mov	r0, r3
1a001a9a:	3714      	adds	r7, #20
1a001a9c:	46bd      	mov	sp, r7
1a001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001aa2:	4770      	bx	lr

1a001aa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
1a001aa4:	b580      	push	{r7, lr}
1a001aa6:	b086      	sub	sp, #24
1a001aa8:	af00      	add	r7, sp, #0
1a001aaa:	60f8      	str	r0, [r7, #12]
1a001aac:	60b9      	str	r1, [r7, #8]
1a001aae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
1a001ab0:	2300      	movs	r3, #0
1a001ab2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001ab4:	68fb      	ldr	r3, [r7, #12]
1a001ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a001ab8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a001aba:	68fb      	ldr	r3, [r7, #12]
1a001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a001abe:	2b00      	cmp	r3, #0
1a001ac0:	d10d      	bne.n	1a001ade <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001ac2:	68fb      	ldr	r3, [r7, #12]
1a001ac4:	681b      	ldr	r3, [r3, #0]
1a001ac6:	2b00      	cmp	r3, #0
1a001ac8:	d14d      	bne.n	1a001b66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a001aca:	68fb      	ldr	r3, [r7, #12]
1a001acc:	685b      	ldr	r3, [r3, #4]
1a001ace:	4618      	mov	r0, r3
1a001ad0:	f001 f826 	bl	1a002b20 <xTaskPriorityDisinherit>
1a001ad4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
1a001ad6:	68fb      	ldr	r3, [r7, #12]
1a001ad8:	2200      	movs	r2, #0
1a001ada:	605a      	str	r2, [r3, #4]
1a001adc:	e043      	b.n	1a001b66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
1a001ade:	687b      	ldr	r3, [r7, #4]
1a001ae0:	2b00      	cmp	r3, #0
1a001ae2:	d119      	bne.n	1a001b18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a001ae4:	68fb      	ldr	r3, [r7, #12]
1a001ae6:	6898      	ldr	r0, [r3, #8]
1a001ae8:	68fb      	ldr	r3, [r7, #12]
1a001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a001aec:	461a      	mov	r2, r3
1a001aee:	68b9      	ldr	r1, [r7, #8]
1a001af0:	f004 ff96 	bl	1a006a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a001af4:	68fb      	ldr	r3, [r7, #12]
1a001af6:	689a      	ldr	r2, [r3, #8]
1a001af8:	68fb      	ldr	r3, [r7, #12]
1a001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a001afc:	441a      	add	r2, r3
1a001afe:	68fb      	ldr	r3, [r7, #12]
1a001b00:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a001b02:	68fb      	ldr	r3, [r7, #12]
1a001b04:	689a      	ldr	r2, [r3, #8]
1a001b06:	68fb      	ldr	r3, [r7, #12]
1a001b08:	685b      	ldr	r3, [r3, #4]
1a001b0a:	429a      	cmp	r2, r3
1a001b0c:	d32b      	bcc.n	1a001b66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a001b0e:	68fb      	ldr	r3, [r7, #12]
1a001b10:	681a      	ldr	r2, [r3, #0]
1a001b12:	68fb      	ldr	r3, [r7, #12]
1a001b14:	609a      	str	r2, [r3, #8]
1a001b16:	e026      	b.n	1a001b66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001b18:	68fb      	ldr	r3, [r7, #12]
1a001b1a:	68d8      	ldr	r0, [r3, #12]
1a001b1c:	68fb      	ldr	r3, [r7, #12]
1a001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a001b20:	461a      	mov	r2, r3
1a001b22:	68b9      	ldr	r1, [r7, #8]
1a001b24:	f004 ff7c 	bl	1a006a20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001b28:	68fb      	ldr	r3, [r7, #12]
1a001b2a:	68da      	ldr	r2, [r3, #12]
1a001b2c:	68fb      	ldr	r3, [r7, #12]
1a001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a001b30:	425b      	negs	r3, r3
1a001b32:	441a      	add	r2, r3
1a001b34:	68fb      	ldr	r3, [r7, #12]
1a001b36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a001b38:	68fb      	ldr	r3, [r7, #12]
1a001b3a:	68da      	ldr	r2, [r3, #12]
1a001b3c:	68fb      	ldr	r3, [r7, #12]
1a001b3e:	681b      	ldr	r3, [r3, #0]
1a001b40:	429a      	cmp	r2, r3
1a001b42:	d207      	bcs.n	1a001b54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001b44:	68fb      	ldr	r3, [r7, #12]
1a001b46:	685a      	ldr	r2, [r3, #4]
1a001b48:	68fb      	ldr	r3, [r7, #12]
1a001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a001b4c:	425b      	negs	r3, r3
1a001b4e:	441a      	add	r2, r3
1a001b50:	68fb      	ldr	r3, [r7, #12]
1a001b52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
1a001b54:	687b      	ldr	r3, [r7, #4]
1a001b56:	2b02      	cmp	r3, #2
1a001b58:	d105      	bne.n	1a001b66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001b5a:	693b      	ldr	r3, [r7, #16]
1a001b5c:	2b00      	cmp	r3, #0
1a001b5e:	d002      	beq.n	1a001b66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
1a001b60:	693b      	ldr	r3, [r7, #16]
1a001b62:	3b01      	subs	r3, #1
1a001b64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a001b66:	693b      	ldr	r3, [r7, #16]
1a001b68:	1c5a      	adds	r2, r3, #1
1a001b6a:	68fb      	ldr	r3, [r7, #12]
1a001b6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
1a001b6e:	697b      	ldr	r3, [r7, #20]
}
1a001b70:	4618      	mov	r0, r3
1a001b72:	3718      	adds	r7, #24
1a001b74:	46bd      	mov	sp, r7
1a001b76:	bd80      	pop	{r7, pc}

1a001b78 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
1a001b78:	b580      	push	{r7, lr}
1a001b7a:	b084      	sub	sp, #16
1a001b7c:	af00      	add	r7, sp, #0
1a001b7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
1a001b80:	f001 fa8c 	bl	1a00309c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
1a001b84:	687b      	ldr	r3, [r7, #4]
1a001b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
1a001b8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001b8c:	e011      	b.n	1a001bb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001b8e:	687b      	ldr	r3, [r7, #4]
1a001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a001b92:	2b00      	cmp	r3, #0
1a001b94:	d012      	beq.n	1a001bbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001b96:	687b      	ldr	r3, [r7, #4]
1a001b98:	3324      	adds	r3, #36	; 0x24
1a001b9a:	4618      	mov	r0, r3
1a001b9c:	f000 fdaa 	bl	1a0026f4 <xTaskRemoveFromEventList>
1a001ba0:	4603      	mov	r3, r0
1a001ba2:	2b00      	cmp	r3, #0
1a001ba4:	d001      	beq.n	1a001baa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
1a001ba6:	f000 fe75 	bl	1a002894 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
1a001baa:	7bfb      	ldrb	r3, [r7, #15]
1a001bac:	3b01      	subs	r3, #1
1a001bae:	b2db      	uxtb	r3, r3
1a001bb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
1a001bb6:	2b00      	cmp	r3, #0
1a001bb8:	dce9      	bgt.n	1a001b8e <prvUnlockQueue+0x16>
1a001bba:	e000      	b.n	1a001bbe <prvUnlockQueue+0x46>
					break;
1a001bbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
1a001bbe:	687b      	ldr	r3, [r7, #4]
1a001bc0:	22ff      	movs	r2, #255	; 0xff
1a001bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
1a001bc6:	f001 fa97 	bl	1a0030f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
1a001bca:	f001 fa67 	bl	1a00309c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
1a001bce:	687b      	ldr	r3, [r7, #4]
1a001bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
1a001bd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001bd6:	e011      	b.n	1a001bfc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001bd8:	687b      	ldr	r3, [r7, #4]
1a001bda:	691b      	ldr	r3, [r3, #16]
1a001bdc:	2b00      	cmp	r3, #0
1a001bde:	d012      	beq.n	1a001c06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001be0:	687b      	ldr	r3, [r7, #4]
1a001be2:	3310      	adds	r3, #16
1a001be4:	4618      	mov	r0, r3
1a001be6:	f000 fd85 	bl	1a0026f4 <xTaskRemoveFromEventList>
1a001bea:	4603      	mov	r3, r0
1a001bec:	2b00      	cmp	r3, #0
1a001bee:	d001      	beq.n	1a001bf4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
1a001bf0:	f000 fe50 	bl	1a002894 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
1a001bf4:	7bbb      	ldrb	r3, [r7, #14]
1a001bf6:	3b01      	subs	r3, #1
1a001bf8:	b2db      	uxtb	r3, r3
1a001bfa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a001c00:	2b00      	cmp	r3, #0
1a001c02:	dce9      	bgt.n	1a001bd8 <prvUnlockQueue+0x60>
1a001c04:	e000      	b.n	1a001c08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
1a001c06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
1a001c08:	687b      	ldr	r3, [r7, #4]
1a001c0a:	22ff      	movs	r2, #255	; 0xff
1a001c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
1a001c10:	f001 fa72 	bl	1a0030f8 <vPortExitCritical>
}
1a001c14:	bf00      	nop
1a001c16:	3710      	adds	r7, #16
1a001c18:	46bd      	mov	sp, r7
1a001c1a:	bd80      	pop	{r7, pc}

1a001c1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
1a001c1c:	b580      	push	{r7, lr}
1a001c1e:	b084      	sub	sp, #16
1a001c20:	af00      	add	r7, sp, #0
1a001c22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a001c24:	f001 fa3a 	bl	1a00309c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a001c28:	687b      	ldr	r3, [r7, #4]
1a001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1a001c2c:	2b00      	cmp	r3, #0
1a001c2e:	d102      	bne.n	1a001c36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
1a001c30:	2301      	movs	r3, #1
1a001c32:	60fb      	str	r3, [r7, #12]
1a001c34:	e001      	b.n	1a001c3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
1a001c36:	2300      	movs	r3, #0
1a001c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
1a001c3a:	f001 fa5d 	bl	1a0030f8 <vPortExitCritical>

	return xReturn;
1a001c3e:	68fb      	ldr	r3, [r7, #12]
}
1a001c40:	4618      	mov	r0, r3
1a001c42:	3710      	adds	r7, #16
1a001c44:	46bd      	mov	sp, r7
1a001c46:	bd80      	pop	{r7, pc}

1a001c48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a001c48:	b580      	push	{r7, lr}
1a001c4a:	b084      	sub	sp, #16
1a001c4c:	af00      	add	r7, sp, #0
1a001c4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a001c50:	f001 fa24 	bl	1a00309c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a001c54:	687b      	ldr	r3, [r7, #4]
1a001c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a001c58:	687b      	ldr	r3, [r7, #4]
1a001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1a001c5c:	429a      	cmp	r2, r3
1a001c5e:	d102      	bne.n	1a001c66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
1a001c60:	2301      	movs	r3, #1
1a001c62:	60fb      	str	r3, [r7, #12]
1a001c64:	e001      	b.n	1a001c6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
1a001c66:	2300      	movs	r3, #0
1a001c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
1a001c6a:	f001 fa45 	bl	1a0030f8 <vPortExitCritical>

	return xReturn;
1a001c6e:	68fb      	ldr	r3, [r7, #12]
}
1a001c70:	4618      	mov	r0, r3
1a001c72:	3710      	adds	r7, #16
1a001c74:	46bd      	mov	sp, r7
1a001c76:	bd80      	pop	{r7, pc}

1a001c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
1a001c78:	b480      	push	{r7}
1a001c7a:	b083      	sub	sp, #12
1a001c7c:	af00      	add	r7, sp, #0
1a001c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c80:	687b      	ldr	r3, [r7, #4]
1a001c82:	f103 0208 	add.w	r2, r3, #8
1a001c86:	687b      	ldr	r3, [r7, #4]
1a001c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001c8a:	687b      	ldr	r3, [r7, #4]
1a001c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c92:	687b      	ldr	r3, [r7, #4]
1a001c94:	f103 0208 	add.w	r2, r3, #8
1a001c98:	687b      	ldr	r3, [r7, #4]
1a001c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001c9c:	687b      	ldr	r3, [r7, #4]
1a001c9e:	f103 0208 	add.w	r2, r3, #8
1a001ca2:	687b      	ldr	r3, [r7, #4]
1a001ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001ca6:	687b      	ldr	r3, [r7, #4]
1a001ca8:	2200      	movs	r2, #0
1a001caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001cac:	bf00      	nop
1a001cae:	370c      	adds	r7, #12
1a001cb0:	46bd      	mov	sp, r7
1a001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001cb6:	4770      	bx	lr

1a001cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
1a001cb8:	b480      	push	{r7}
1a001cba:	b083      	sub	sp, #12
1a001cbc:	af00      	add	r7, sp, #0
1a001cbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001cc0:	687b      	ldr	r3, [r7, #4]
1a001cc2:	2200      	movs	r2, #0
1a001cc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001cc6:	bf00      	nop
1a001cc8:	370c      	adds	r7, #12
1a001cca:	46bd      	mov	sp, r7
1a001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001cd0:	4770      	bx	lr

1a001cd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001cd2:	b480      	push	{r7}
1a001cd4:	b085      	sub	sp, #20
1a001cd6:	af00      	add	r7, sp, #0
1a001cd8:	6078      	str	r0, [r7, #4]
1a001cda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
1a001cdc:	687b      	ldr	r3, [r7, #4]
1a001cde:	685b      	ldr	r3, [r3, #4]
1a001ce0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001ce2:	683b      	ldr	r3, [r7, #0]
1a001ce4:	68fa      	ldr	r2, [r7, #12]
1a001ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001ce8:	68fb      	ldr	r3, [r7, #12]
1a001cea:	689a      	ldr	r2, [r3, #8]
1a001cec:	683b      	ldr	r3, [r7, #0]
1a001cee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001cf0:	68fb      	ldr	r3, [r7, #12]
1a001cf2:	689b      	ldr	r3, [r3, #8]
1a001cf4:	683a      	ldr	r2, [r7, #0]
1a001cf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001cf8:	68fb      	ldr	r3, [r7, #12]
1a001cfa:	683a      	ldr	r2, [r7, #0]
1a001cfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001cfe:	683b      	ldr	r3, [r7, #0]
1a001d00:	687a      	ldr	r2, [r7, #4]
1a001d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
1a001d04:	687b      	ldr	r3, [r7, #4]
1a001d06:	681b      	ldr	r3, [r3, #0]
1a001d08:	1c5a      	adds	r2, r3, #1
1a001d0a:	687b      	ldr	r3, [r7, #4]
1a001d0c:	601a      	str	r2, [r3, #0]
}
1a001d0e:	bf00      	nop
1a001d10:	3714      	adds	r7, #20
1a001d12:	46bd      	mov	sp, r7
1a001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001d18:	4770      	bx	lr

1a001d1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001d1a:	b480      	push	{r7}
1a001d1c:	b085      	sub	sp, #20
1a001d1e:	af00      	add	r7, sp, #0
1a001d20:	6078      	str	r0, [r7, #4]
1a001d22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001d24:	683b      	ldr	r3, [r7, #0]
1a001d26:	681b      	ldr	r3, [r3, #0]
1a001d28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001d2a:	68bb      	ldr	r3, [r7, #8]
1a001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001d30:	d103      	bne.n	1a001d3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1a001d32:	687b      	ldr	r3, [r7, #4]
1a001d34:	691b      	ldr	r3, [r3, #16]
1a001d36:	60fb      	str	r3, [r7, #12]
1a001d38:	e00c      	b.n	1a001d54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001d3a:	687b      	ldr	r3, [r7, #4]
1a001d3c:	3308      	adds	r3, #8
1a001d3e:	60fb      	str	r3, [r7, #12]
1a001d40:	e002      	b.n	1a001d48 <vListInsert+0x2e>
1a001d42:	68fb      	ldr	r3, [r7, #12]
1a001d44:	685b      	ldr	r3, [r3, #4]
1a001d46:	60fb      	str	r3, [r7, #12]
1a001d48:	68fb      	ldr	r3, [r7, #12]
1a001d4a:	685b      	ldr	r3, [r3, #4]
1a001d4c:	681b      	ldr	r3, [r3, #0]
1a001d4e:	68ba      	ldr	r2, [r7, #8]
1a001d50:	429a      	cmp	r2, r3
1a001d52:	d2f6      	bcs.n	1a001d42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001d54:	68fb      	ldr	r3, [r7, #12]
1a001d56:	685a      	ldr	r2, [r3, #4]
1a001d58:	683b      	ldr	r3, [r7, #0]
1a001d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001d5c:	683b      	ldr	r3, [r7, #0]
1a001d5e:	685b      	ldr	r3, [r3, #4]
1a001d60:	683a      	ldr	r2, [r7, #0]
1a001d62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001d64:	683b      	ldr	r3, [r7, #0]
1a001d66:	68fa      	ldr	r2, [r7, #12]
1a001d68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
1a001d6a:	68fb      	ldr	r3, [r7, #12]
1a001d6c:	683a      	ldr	r2, [r7, #0]
1a001d6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001d70:	683b      	ldr	r3, [r7, #0]
1a001d72:	687a      	ldr	r2, [r7, #4]
1a001d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
1a001d76:	687b      	ldr	r3, [r7, #4]
1a001d78:	681b      	ldr	r3, [r3, #0]
1a001d7a:	1c5a      	adds	r2, r3, #1
1a001d7c:	687b      	ldr	r3, [r7, #4]
1a001d7e:	601a      	str	r2, [r3, #0]
}
1a001d80:	bf00      	nop
1a001d82:	3714      	adds	r7, #20
1a001d84:	46bd      	mov	sp, r7
1a001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001d8a:	4770      	bx	lr

1a001d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
1a001d8c:	b480      	push	{r7}
1a001d8e:	b085      	sub	sp, #20
1a001d90:	af00      	add	r7, sp, #0
1a001d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001d94:	687b      	ldr	r3, [r7, #4]
1a001d96:	691b      	ldr	r3, [r3, #16]
1a001d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001d9a:	687b      	ldr	r3, [r7, #4]
1a001d9c:	685b      	ldr	r3, [r3, #4]
1a001d9e:	687a      	ldr	r2, [r7, #4]
1a001da0:	6892      	ldr	r2, [r2, #8]
1a001da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001da4:	687b      	ldr	r3, [r7, #4]
1a001da6:	689b      	ldr	r3, [r3, #8]
1a001da8:	687a      	ldr	r2, [r7, #4]
1a001daa:	6852      	ldr	r2, [r2, #4]
1a001dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001dae:	68fb      	ldr	r3, [r7, #12]
1a001db0:	685b      	ldr	r3, [r3, #4]
1a001db2:	687a      	ldr	r2, [r7, #4]
1a001db4:	429a      	cmp	r2, r3
1a001db6:	d103      	bne.n	1a001dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001db8:	687b      	ldr	r3, [r7, #4]
1a001dba:	689a      	ldr	r2, [r3, #8]
1a001dbc:	68fb      	ldr	r3, [r7, #12]
1a001dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001dc0:	687b      	ldr	r3, [r7, #4]
1a001dc2:	2200      	movs	r2, #0
1a001dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
1a001dc6:	68fb      	ldr	r3, [r7, #12]
1a001dc8:	681b      	ldr	r3, [r3, #0]
1a001dca:	1e5a      	subs	r2, r3, #1
1a001dcc:	68fb      	ldr	r3, [r7, #12]
1a001dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001dd0:	68fb      	ldr	r3, [r7, #12]
1a001dd2:	681b      	ldr	r3, [r3, #0]
}
1a001dd4:	4618      	mov	r0, r3
1a001dd6:	3714      	adds	r7, #20
1a001dd8:	46bd      	mov	sp, r7
1a001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
1a001dde:	4770      	bx	lr

1a001de0 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001de0:	b580      	push	{r7, lr}
1a001de2:	b086      	sub	sp, #24
1a001de4:	af00      	add	r7, sp, #0
1a001de6:	6078      	str	r0, [r7, #4]
1a001de8:	6039      	str	r1, [r7, #0]
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001dea:	687b      	ldr	r3, [r7, #4]
1a001dec:	613b      	str	r3, [r7, #16]
1a001dee:	2300      	movs	r3, #0
1a001df0:	60fb      	str	r3, [r7, #12]
   volatile const char * const pcFileName = pcFile;
1a001df2:	683b      	ldr	r3, [r7, #0]
1a001df4:	617b      	str	r3, [r7, #20]

   taskENTER_CRITICAL();
1a001df6:	f001 f951 	bl	1a00309c <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001dfa:	693b      	ldr	r3, [r7, #16]
1a001dfc:	697a      	ldr	r2, [r7, #20]
1a001dfe:	4619      	mov	r1, r3
1a001e00:	4806      	ldr	r0, [pc, #24]	; (1a001e1c <vAssertCalled+0x3c>)
1a001e02:	f004 ff03 	bl	1a006c0c <printf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001e06:	bf00      	nop
1a001e08:	68fb      	ldr	r3, [r7, #12]
1a001e0a:	2b00      	cmp	r3, #0
1a001e0c:	d0fc      	beq.n	1a001e08 <vAssertCalled+0x28>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001e0e:	f001 f973 	bl	1a0030f8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001e12:	bf00      	nop
1a001e14:	3718      	adds	r7, #24
1a001e16:	46bd      	mov	sp, r7
1a001e18:	bd80      	pop	{r7, pc}
1a001e1a:	bf00      	nop
1a001e1c:	1a00ae3c 	.word	0x1a00ae3c

1a001e20 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001e20:	b580      	push	{r7, lr}
1a001e22:	b082      	sub	sp, #8
1a001e24:	af00      	add	r7, sp, #0
1a001e26:	6078      	str	r0, [r7, #4]
1a001e28:	6039      	str	r1, [r7, #0]

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001e2a:	6839      	ldr	r1, [r7, #0]
1a001e2c:	4805      	ldr	r0, [pc, #20]	; (1a001e44 <vApplicationStackOverflowHook+0x24>)
1a001e2e:	f004 feed 	bl	1a006c0c <printf>
   vAssertCalled( __LINE__, __FILE__ );
1a001e32:	4905      	ldr	r1, [pc, #20]	; (1a001e48 <vApplicationStackOverflowHook+0x28>)
1a001e34:	2050      	movs	r0, #80	; 0x50
1a001e36:	f7ff ffd3 	bl	1a001de0 <vAssertCalled>
}
1a001e3a:	bf00      	nop
1a001e3c:	3708      	adds	r7, #8
1a001e3e:	46bd      	mov	sp, r7
1a001e40:	bd80      	pop	{r7, pc}
1a001e42:	bf00      	nop
1a001e44:	1a00aec0 	.word	0x1a00aec0
1a001e48:	1a00aea0 	.word	0x1a00aea0

1a001e4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
1a001e4c:	b580      	push	{r7, lr}
1a001e4e:	b08c      	sub	sp, #48	; 0x30
1a001e50:	af04      	add	r7, sp, #16
1a001e52:	60f8      	str	r0, [r7, #12]
1a001e54:	60b9      	str	r1, [r7, #8]
1a001e56:	603b      	str	r3, [r7, #0]
1a001e58:	4613      	mov	r3, r2
1a001e5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001e5c:	88fb      	ldrh	r3, [r7, #6]
1a001e5e:	009b      	lsls	r3, r3, #2
1a001e60:	4618      	mov	r0, r3
1a001e62:	f7ff fa87 	bl	1a001374 <pvPortMalloc>
1a001e66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
1a001e68:	697b      	ldr	r3, [r7, #20]
1a001e6a:	2b00      	cmp	r3, #0
1a001e6c:	d00e      	beq.n	1a001e8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001e6e:	2058      	movs	r0, #88	; 0x58
1a001e70:	f7ff fa80 	bl	1a001374 <pvPortMalloc>
1a001e74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
1a001e76:	69fb      	ldr	r3, [r7, #28]
1a001e78:	2b00      	cmp	r3, #0
1a001e7a:	d003      	beq.n	1a001e84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
1a001e7c:	69fb      	ldr	r3, [r7, #28]
1a001e7e:	697a      	ldr	r2, [r7, #20]
1a001e80:	631a      	str	r2, [r3, #48]	; 0x30
1a001e82:	e005      	b.n	1a001e90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
1a001e84:	6978      	ldr	r0, [r7, #20]
1a001e86:	f7ff fabf 	bl	1a001408 <vPortFree>
1a001e8a:	e001      	b.n	1a001e90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
1a001e8c:	2300      	movs	r3, #0
1a001e8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
1a001e90:	69fb      	ldr	r3, [r7, #28]
1a001e92:	2b00      	cmp	r3, #0
1a001e94:	d013      	beq.n	1a001ebe <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001e96:	88fa      	ldrh	r2, [r7, #6]
1a001e98:	2300      	movs	r3, #0
1a001e9a:	9303      	str	r3, [sp, #12]
1a001e9c:	69fb      	ldr	r3, [r7, #28]
1a001e9e:	9302      	str	r3, [sp, #8]
1a001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001ea2:	9301      	str	r3, [sp, #4]
1a001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001ea6:	9300      	str	r3, [sp, #0]
1a001ea8:	683b      	ldr	r3, [r7, #0]
1a001eaa:	68b9      	ldr	r1, [r7, #8]
1a001eac:	68f8      	ldr	r0, [r7, #12]
1a001eae:	f000 f80e 	bl	1a001ece <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001eb2:	69f8      	ldr	r0, [r7, #28]
1a001eb4:	f000 f894 	bl	1a001fe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001eb8:	2301      	movs	r3, #1
1a001eba:	61bb      	str	r3, [r7, #24]
1a001ebc:	e002      	b.n	1a001ec4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001ec2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
1a001ec4:	69bb      	ldr	r3, [r7, #24]
	}
1a001ec6:	4618      	mov	r0, r3
1a001ec8:	3720      	adds	r7, #32
1a001eca:	46bd      	mov	sp, r7
1a001ecc:	bd80      	pop	{r7, pc}

1a001ece <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
1a001ece:	b580      	push	{r7, lr}
1a001ed0:	b088      	sub	sp, #32
1a001ed2:	af00      	add	r7, sp, #0
1a001ed4:	60f8      	str	r0, [r7, #12]
1a001ed6:	60b9      	str	r1, [r7, #8]
1a001ed8:	607a      	str	r2, [r7, #4]
1a001eda:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001ede:	6b18      	ldr	r0, [r3, #48]	; 0x30
1a001ee0:	687b      	ldr	r3, [r7, #4]
1a001ee2:	009b      	lsls	r3, r3, #2
1a001ee4:	461a      	mov	r2, r3
1a001ee6:	21a5      	movs	r1, #165	; 0xa5
1a001ee8:	f004 fe34 	bl	1a006b54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
1a001ef0:	687b      	ldr	r3, [r7, #4]
1a001ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a001ef6:	3b01      	subs	r3, #1
1a001ef8:	009b      	lsls	r3, r3, #2
1a001efa:	4413      	add	r3, r2
1a001efc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001efe:	69bb      	ldr	r3, [r7, #24]
1a001f00:	f023 0307 	bic.w	r3, r3, #7
1a001f04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
1a001f06:	69bb      	ldr	r3, [r7, #24]
1a001f08:	f003 0307 	and.w	r3, r3, #7
1a001f0c:	2b00      	cmp	r3, #0
1a001f0e:	d009      	beq.n	1a001f24 <prvInitialiseNewTask+0x56>
1a001f10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f14:	f383 8811 	msr	BASEPRI, r3
1a001f18:	f3bf 8f6f 	isb	sy
1a001f1c:	f3bf 8f4f 	dsb	sy
1a001f20:	617b      	str	r3, [r7, #20]
1a001f22:	e7fe      	b.n	1a001f22 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001f26:	69ba      	ldr	r2, [r7, #24]
1a001f28:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001f2a:	2300      	movs	r3, #0
1a001f2c:	61fb      	str	r3, [r7, #28]
1a001f2e:	e012      	b.n	1a001f56 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001f30:	68ba      	ldr	r2, [r7, #8]
1a001f32:	69fb      	ldr	r3, [r7, #28]
1a001f34:	4413      	add	r3, r2
1a001f36:	7819      	ldrb	r1, [r3, #0]
1a001f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a001f3a:	69fb      	ldr	r3, [r7, #28]
1a001f3c:	4413      	add	r3, r2
1a001f3e:	3334      	adds	r3, #52	; 0x34
1a001f40:	460a      	mov	r2, r1
1a001f42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
1a001f44:	68ba      	ldr	r2, [r7, #8]
1a001f46:	69fb      	ldr	r3, [r7, #28]
1a001f48:	4413      	add	r3, r2
1a001f4a:	781b      	ldrb	r3, [r3, #0]
1a001f4c:	2b00      	cmp	r3, #0
1a001f4e:	d006      	beq.n	1a001f5e <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001f50:	69fb      	ldr	r3, [r7, #28]
1a001f52:	3301      	adds	r3, #1
1a001f54:	61fb      	str	r3, [r7, #28]
1a001f56:	69fb      	ldr	r3, [r7, #28]
1a001f58:	2b0f      	cmp	r3, #15
1a001f5a:	d9e9      	bls.n	1a001f30 <prvInitialiseNewTask+0x62>
1a001f5c:	e000      	b.n	1a001f60 <prvInitialiseNewTask+0x92>
		{
			break;
1a001f5e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001f62:	2200      	movs	r2, #0
1a001f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001f6a:	2b06      	cmp	r3, #6
1a001f6c:	d901      	bls.n	1a001f72 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001f6e:	2306      	movs	r3, #6
1a001f70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
1a001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a001f76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
1a001f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a001f7c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
1a001f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001f80:	2200      	movs	r2, #0
1a001f82:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001f86:	3304      	adds	r3, #4
1a001f88:	4618      	mov	r0, r3
1a001f8a:	f7ff fe95 	bl	1a001cb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001f90:	3318      	adds	r3, #24
1a001f92:	4618      	mov	r0, r3
1a001f94:	f7ff fe90 	bl	1a001cb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a001f9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a001fa0:	f1c3 0207 	rsb	r2, r3, #7
1a001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001fa6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a001fac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
1a001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001fb0:	2200      	movs	r2, #0
1a001fb2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001fb6:	2200      	movs	r2, #0
1a001fb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001fbc:	683a      	ldr	r2, [r7, #0]
1a001fbe:	68f9      	ldr	r1, [r7, #12]
1a001fc0:	69b8      	ldr	r0, [r7, #24]
1a001fc2:	f000 ff37 	bl	1a002e34 <pxPortInitialiseStack>
1a001fc6:	4602      	mov	r2, r0
1a001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a001fca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
1a001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001fce:	2b00      	cmp	r3, #0
1a001fd0:	d002      	beq.n	1a001fd8 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a001fd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a001fd8:	bf00      	nop
1a001fda:	3720      	adds	r7, #32
1a001fdc:	46bd      	mov	sp, r7
1a001fde:	bd80      	pop	{r7, pc}

1a001fe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
1a001fe0:	b580      	push	{r7, lr}
1a001fe2:	b082      	sub	sp, #8
1a001fe4:	af00      	add	r7, sp, #0
1a001fe6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
1a001fe8:	f001 f858 	bl	1a00309c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
1a001fec:	4b2a      	ldr	r3, [pc, #168]	; (1a002098 <prvAddNewTaskToReadyList+0xb8>)
1a001fee:	681b      	ldr	r3, [r3, #0]
1a001ff0:	3301      	adds	r3, #1
1a001ff2:	4a29      	ldr	r2, [pc, #164]	; (1a002098 <prvAddNewTaskToReadyList+0xb8>)
1a001ff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001ff6:	4b29      	ldr	r3, [pc, #164]	; (1a00209c <prvAddNewTaskToReadyList+0xbc>)
1a001ff8:	681b      	ldr	r3, [r3, #0]
1a001ffa:	2b00      	cmp	r3, #0
1a001ffc:	d109      	bne.n	1a002012 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
1a001ffe:	4a27      	ldr	r2, [pc, #156]	; (1a00209c <prvAddNewTaskToReadyList+0xbc>)
1a002000:	687b      	ldr	r3, [r7, #4]
1a002002:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a002004:	4b24      	ldr	r3, [pc, #144]	; (1a002098 <prvAddNewTaskToReadyList+0xb8>)
1a002006:	681b      	ldr	r3, [r3, #0]
1a002008:	2b01      	cmp	r3, #1
1a00200a:	d110      	bne.n	1a00202e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
1a00200c:	f000 fc66 	bl	1a0028dc <prvInitialiseTaskLists>
1a002010:	e00d      	b.n	1a00202e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
1a002012:	4b23      	ldr	r3, [pc, #140]	; (1a0020a0 <prvAddNewTaskToReadyList+0xc0>)
1a002014:	681b      	ldr	r3, [r3, #0]
1a002016:	2b00      	cmp	r3, #0
1a002018:	d109      	bne.n	1a00202e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a00201a:	4b20      	ldr	r3, [pc, #128]	; (1a00209c <prvAddNewTaskToReadyList+0xbc>)
1a00201c:	681b      	ldr	r3, [r3, #0]
1a00201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002020:	687b      	ldr	r3, [r7, #4]
1a002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002024:	429a      	cmp	r2, r3
1a002026:	d802      	bhi.n	1a00202e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
1a002028:	4a1c      	ldr	r2, [pc, #112]	; (1a00209c <prvAddNewTaskToReadyList+0xbc>)
1a00202a:	687b      	ldr	r3, [r7, #4]
1a00202c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
1a00202e:	4b1d      	ldr	r3, [pc, #116]	; (1a0020a4 <prvAddNewTaskToReadyList+0xc4>)
1a002030:	681b      	ldr	r3, [r3, #0]
1a002032:	3301      	adds	r3, #1
1a002034:	4a1b      	ldr	r2, [pc, #108]	; (1a0020a4 <prvAddNewTaskToReadyList+0xc4>)
1a002036:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
1a002038:	687b      	ldr	r3, [r7, #4]
1a00203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00203c:	2201      	movs	r2, #1
1a00203e:	409a      	lsls	r2, r3
1a002040:	4b19      	ldr	r3, [pc, #100]	; (1a0020a8 <prvAddNewTaskToReadyList+0xc8>)
1a002042:	681b      	ldr	r3, [r3, #0]
1a002044:	4313      	orrs	r3, r2
1a002046:	4a18      	ldr	r2, [pc, #96]	; (1a0020a8 <prvAddNewTaskToReadyList+0xc8>)
1a002048:	6013      	str	r3, [r2, #0]
1a00204a:	687b      	ldr	r3, [r7, #4]
1a00204c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00204e:	4613      	mov	r3, r2
1a002050:	009b      	lsls	r3, r3, #2
1a002052:	4413      	add	r3, r2
1a002054:	009b      	lsls	r3, r3, #2
1a002056:	4a15      	ldr	r2, [pc, #84]	; (1a0020ac <prvAddNewTaskToReadyList+0xcc>)
1a002058:	441a      	add	r2, r3
1a00205a:	687b      	ldr	r3, [r7, #4]
1a00205c:	3304      	adds	r3, #4
1a00205e:	4619      	mov	r1, r3
1a002060:	4610      	mov	r0, r2
1a002062:	f7ff fe36 	bl	1a001cd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
1a002066:	f001 f847 	bl	1a0030f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
1a00206a:	4b0d      	ldr	r3, [pc, #52]	; (1a0020a0 <prvAddNewTaskToReadyList+0xc0>)
1a00206c:	681b      	ldr	r3, [r3, #0]
1a00206e:	2b00      	cmp	r3, #0
1a002070:	d00e      	beq.n	1a002090 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a002072:	4b0a      	ldr	r3, [pc, #40]	; (1a00209c <prvAddNewTaskToReadyList+0xbc>)
1a002074:	681b      	ldr	r3, [r3, #0]
1a002076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002078:	687b      	ldr	r3, [r7, #4]
1a00207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00207c:	429a      	cmp	r2, r3
1a00207e:	d207      	bcs.n	1a002090 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
1a002080:	4b0b      	ldr	r3, [pc, #44]	; (1a0020b0 <prvAddNewTaskToReadyList+0xd0>)
1a002082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002086:	601a      	str	r2, [r3, #0]
1a002088:	f3bf 8f4f 	dsb	sy
1a00208c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a002090:	bf00      	nop
1a002092:	3708      	adds	r7, #8
1a002094:	46bd      	mov	sp, r7
1a002096:	bd80      	pop	{r7, pc}
1a002098:	10002ae4 	.word	0x10002ae4
1a00209c:	100029f8 	.word	0x100029f8
1a0020a0:	10002af0 	.word	0x10002af0
1a0020a4:	10002b00 	.word	0x10002b00
1a0020a8:	10002aec 	.word	0x10002aec
1a0020ac:	100029fc 	.word	0x100029fc
1a0020b0:	e000ed04 	.word	0xe000ed04

1a0020b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
1a0020b4:	b580      	push	{r7, lr}
1a0020b6:	b08a      	sub	sp, #40	; 0x28
1a0020b8:	af00      	add	r7, sp, #0
1a0020ba:	6078      	str	r0, [r7, #4]
1a0020bc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1a0020be:	2300      	movs	r3, #0
1a0020c0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
1a0020c2:	687b      	ldr	r3, [r7, #4]
1a0020c4:	2b00      	cmp	r3, #0
1a0020c6:	d109      	bne.n	1a0020dc <vTaskDelayUntil+0x28>
1a0020c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020cc:	f383 8811 	msr	BASEPRI, r3
1a0020d0:	f3bf 8f6f 	isb	sy
1a0020d4:	f3bf 8f4f 	dsb	sy
1a0020d8:	617b      	str	r3, [r7, #20]
1a0020da:	e7fe      	b.n	1a0020da <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
1a0020dc:	683b      	ldr	r3, [r7, #0]
1a0020de:	2b00      	cmp	r3, #0
1a0020e0:	d109      	bne.n	1a0020f6 <vTaskDelayUntil+0x42>
1a0020e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020e6:	f383 8811 	msr	BASEPRI, r3
1a0020ea:	f3bf 8f6f 	isb	sy
1a0020ee:	f3bf 8f4f 	dsb	sy
1a0020f2:	613b      	str	r3, [r7, #16]
1a0020f4:	e7fe      	b.n	1a0020f4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
1a0020f6:	4b29      	ldr	r3, [pc, #164]	; (1a00219c <vTaskDelayUntil+0xe8>)
1a0020f8:	681b      	ldr	r3, [r3, #0]
1a0020fa:	2b00      	cmp	r3, #0
1a0020fc:	d009      	beq.n	1a002112 <vTaskDelayUntil+0x5e>
1a0020fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002102:	f383 8811 	msr	BASEPRI, r3
1a002106:	f3bf 8f6f 	isb	sy
1a00210a:	f3bf 8f4f 	dsb	sy
1a00210e:	60fb      	str	r3, [r7, #12]
1a002110:	e7fe      	b.n	1a002110 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
1a002112:	f000 f8c3 	bl	1a00229c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
1a002116:	4b22      	ldr	r3, [pc, #136]	; (1a0021a0 <vTaskDelayUntil+0xec>)
1a002118:	681b      	ldr	r3, [r3, #0]
1a00211a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a00211c:	687b      	ldr	r3, [r7, #4]
1a00211e:	681b      	ldr	r3, [r3, #0]
1a002120:	683a      	ldr	r2, [r7, #0]
1a002122:	4413      	add	r3, r2
1a002124:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
1a002126:	687b      	ldr	r3, [r7, #4]
1a002128:	681b      	ldr	r3, [r3, #0]
1a00212a:	6a3a      	ldr	r2, [r7, #32]
1a00212c:	429a      	cmp	r2, r3
1a00212e:	d20b      	bcs.n	1a002148 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a002130:	687b      	ldr	r3, [r7, #4]
1a002132:	681b      	ldr	r3, [r3, #0]
1a002134:	69fa      	ldr	r2, [r7, #28]
1a002136:	429a      	cmp	r2, r3
1a002138:	d211      	bcs.n	1a00215e <vTaskDelayUntil+0xaa>
1a00213a:	69fa      	ldr	r2, [r7, #28]
1a00213c:	6a3b      	ldr	r3, [r7, #32]
1a00213e:	429a      	cmp	r2, r3
1a002140:	d90d      	bls.n	1a00215e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
1a002142:	2301      	movs	r3, #1
1a002144:	627b      	str	r3, [r7, #36]	; 0x24
1a002146:	e00a      	b.n	1a00215e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a002148:	687b      	ldr	r3, [r7, #4]
1a00214a:	681b      	ldr	r3, [r3, #0]
1a00214c:	69fa      	ldr	r2, [r7, #28]
1a00214e:	429a      	cmp	r2, r3
1a002150:	d303      	bcc.n	1a00215a <vTaskDelayUntil+0xa6>
1a002152:	69fa      	ldr	r2, [r7, #28]
1a002154:	6a3b      	ldr	r3, [r7, #32]
1a002156:	429a      	cmp	r2, r3
1a002158:	d901      	bls.n	1a00215e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
1a00215a:	2301      	movs	r3, #1
1a00215c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
1a00215e:	687b      	ldr	r3, [r7, #4]
1a002160:	69fa      	ldr	r2, [r7, #28]
1a002162:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
1a002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a002166:	2b00      	cmp	r3, #0
1a002168:	d006      	beq.n	1a002178 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a00216a:	69fa      	ldr	r2, [r7, #28]
1a00216c:	6a3b      	ldr	r3, [r7, #32]
1a00216e:	1ad3      	subs	r3, r2, r3
1a002170:	2100      	movs	r1, #0
1a002172:	4618      	mov	r0, r3
1a002174:	f000 fe0a 	bl	1a002d8c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
1a002178:	f000 f89e 	bl	1a0022b8 <xTaskResumeAll>
1a00217c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
1a00217e:	69bb      	ldr	r3, [r7, #24]
1a002180:	2b00      	cmp	r3, #0
1a002182:	d107      	bne.n	1a002194 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
1a002184:	4b07      	ldr	r3, [pc, #28]	; (1a0021a4 <vTaskDelayUntil+0xf0>)
1a002186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00218a:	601a      	str	r2, [r3, #0]
1a00218c:	f3bf 8f4f 	dsb	sy
1a002190:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1a002194:	bf00      	nop
1a002196:	3728      	adds	r7, #40	; 0x28
1a002198:	46bd      	mov	sp, r7
1a00219a:	bd80      	pop	{r7, pc}
1a00219c:	10002b0c 	.word	0x10002b0c
1a0021a0:	10002ae8 	.word	0x10002ae8
1a0021a4:	e000ed04 	.word	0xe000ed04

1a0021a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
1a0021a8:	b580      	push	{r7, lr}
1a0021aa:	b084      	sub	sp, #16
1a0021ac:	af00      	add	r7, sp, #0
1a0021ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
1a0021b0:	2300      	movs	r3, #0
1a0021b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0021b4:	687b      	ldr	r3, [r7, #4]
1a0021b6:	2b00      	cmp	r3, #0
1a0021b8:	d016      	beq.n	1a0021e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
1a0021ba:	4b13      	ldr	r3, [pc, #76]	; (1a002208 <vTaskDelay+0x60>)
1a0021bc:	681b      	ldr	r3, [r3, #0]
1a0021be:	2b00      	cmp	r3, #0
1a0021c0:	d009      	beq.n	1a0021d6 <vTaskDelay+0x2e>
1a0021c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021c6:	f383 8811 	msr	BASEPRI, r3
1a0021ca:	f3bf 8f6f 	isb	sy
1a0021ce:	f3bf 8f4f 	dsb	sy
1a0021d2:	60bb      	str	r3, [r7, #8]
1a0021d4:	e7fe      	b.n	1a0021d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
1a0021d6:	f000 f861 	bl	1a00229c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0021da:	2100      	movs	r1, #0
1a0021dc:	6878      	ldr	r0, [r7, #4]
1a0021de:	f000 fdd5 	bl	1a002d8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
1a0021e2:	f000 f869 	bl	1a0022b8 <xTaskResumeAll>
1a0021e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
1a0021e8:	68fb      	ldr	r3, [r7, #12]
1a0021ea:	2b00      	cmp	r3, #0
1a0021ec:	d107      	bne.n	1a0021fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
1a0021ee:	4b07      	ldr	r3, [pc, #28]	; (1a00220c <vTaskDelay+0x64>)
1a0021f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0021f4:	601a      	str	r2, [r3, #0]
1a0021f6:	f3bf 8f4f 	dsb	sy
1a0021fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1a0021fe:	bf00      	nop
1a002200:	3710      	adds	r7, #16
1a002202:	46bd      	mov	sp, r7
1a002204:	bd80      	pop	{r7, pc}
1a002206:	bf00      	nop
1a002208:	10002b0c 	.word	0x10002b0c
1a00220c:	e000ed04 	.word	0xe000ed04

1a002210 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
1a002210:	b580      	push	{r7, lr}
1a002212:	b086      	sub	sp, #24
1a002214:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
1a002216:	4b1b      	ldr	r3, [pc, #108]	; (1a002284 <vTaskStartScheduler+0x74>)
1a002218:	9301      	str	r3, [sp, #4]
1a00221a:	2300      	movs	r3, #0
1a00221c:	9300      	str	r3, [sp, #0]
1a00221e:	2300      	movs	r3, #0
1a002220:	225a      	movs	r2, #90	; 0x5a
1a002222:	4919      	ldr	r1, [pc, #100]	; (1a002288 <vTaskStartScheduler+0x78>)
1a002224:	4819      	ldr	r0, [pc, #100]	; (1a00228c <vTaskStartScheduler+0x7c>)
1a002226:	f7ff fe11 	bl	1a001e4c <xTaskCreate>
1a00222a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
1a00222c:	68fb      	ldr	r3, [r7, #12]
1a00222e:	2b01      	cmp	r3, #1
1a002230:	d115      	bne.n	1a00225e <vTaskStartScheduler+0x4e>
1a002232:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002236:	f383 8811 	msr	BASEPRI, r3
1a00223a:	f3bf 8f6f 	isb	sy
1a00223e:	f3bf 8f4f 	dsb	sy
1a002242:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
1a002244:	4b12      	ldr	r3, [pc, #72]	; (1a002290 <vTaskStartScheduler+0x80>)
1a002246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00224a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00224c:	4b11      	ldr	r3, [pc, #68]	; (1a002294 <vTaskStartScheduler+0x84>)
1a00224e:	2201      	movs	r2, #1
1a002250:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a002252:	4b11      	ldr	r3, [pc, #68]	; (1a002298 <vTaskStartScheduler+0x88>)
1a002254:	2200      	movs	r2, #0
1a002256:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
1a002258:	f000 fe72 	bl	1a002f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
1a00225c:	e00d      	b.n	1a00227a <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a00225e:	68fb      	ldr	r3, [r7, #12]
1a002260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002264:	d109      	bne.n	1a00227a <vTaskStartScheduler+0x6a>
1a002266:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00226a:	f383 8811 	msr	BASEPRI, r3
1a00226e:	f3bf 8f6f 	isb	sy
1a002272:	f3bf 8f4f 	dsb	sy
1a002276:	607b      	str	r3, [r7, #4]
1a002278:	e7fe      	b.n	1a002278 <vTaskStartScheduler+0x68>
}
1a00227a:	bf00      	nop
1a00227c:	3710      	adds	r7, #16
1a00227e:	46bd      	mov	sp, r7
1a002280:	bd80      	pop	{r7, pc}
1a002282:	bf00      	nop
1a002284:	10002b08 	.word	0x10002b08
1a002288:	1a00af08 	.word	0x1a00af08
1a00228c:	1a0028ad 	.word	0x1a0028ad
1a002290:	10002b04 	.word	0x10002b04
1a002294:	10002af0 	.word	0x10002af0
1a002298:	10002ae8 	.word	0x10002ae8

1a00229c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
1a00229c:	b480      	push	{r7}
1a00229e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
1a0022a0:	4b04      	ldr	r3, [pc, #16]	; (1a0022b4 <vTaskSuspendAll+0x18>)
1a0022a2:	681b      	ldr	r3, [r3, #0]
1a0022a4:	3301      	adds	r3, #1
1a0022a6:	4a03      	ldr	r2, [pc, #12]	; (1a0022b4 <vTaskSuspendAll+0x18>)
1a0022a8:	6013      	str	r3, [r2, #0]
}
1a0022aa:	bf00      	nop
1a0022ac:	46bd      	mov	sp, r7
1a0022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0022b2:	4770      	bx	lr
1a0022b4:	10002b0c 	.word	0x10002b0c

1a0022b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
1a0022b8:	b580      	push	{r7, lr}
1a0022ba:	b084      	sub	sp, #16
1a0022bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
1a0022be:	2300      	movs	r3, #0
1a0022c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
1a0022c2:	2300      	movs	r3, #0
1a0022c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
1a0022c6:	4b41      	ldr	r3, [pc, #260]	; (1a0023cc <xTaskResumeAll+0x114>)
1a0022c8:	681b      	ldr	r3, [r3, #0]
1a0022ca:	2b00      	cmp	r3, #0
1a0022cc:	d109      	bne.n	1a0022e2 <xTaskResumeAll+0x2a>
1a0022ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022d2:	f383 8811 	msr	BASEPRI, r3
1a0022d6:	f3bf 8f6f 	isb	sy
1a0022da:	f3bf 8f4f 	dsb	sy
1a0022de:	603b      	str	r3, [r7, #0]
1a0022e0:	e7fe      	b.n	1a0022e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
1a0022e2:	f000 fedb 	bl	1a00309c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
1a0022e6:	4b39      	ldr	r3, [pc, #228]	; (1a0023cc <xTaskResumeAll+0x114>)
1a0022e8:	681b      	ldr	r3, [r3, #0]
1a0022ea:	3b01      	subs	r3, #1
1a0022ec:	4a37      	ldr	r2, [pc, #220]	; (1a0023cc <xTaskResumeAll+0x114>)
1a0022ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0022f0:	4b36      	ldr	r3, [pc, #216]	; (1a0023cc <xTaskResumeAll+0x114>)
1a0022f2:	681b      	ldr	r3, [r3, #0]
1a0022f4:	2b00      	cmp	r3, #0
1a0022f6:	d161      	bne.n	1a0023bc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0022f8:	4b35      	ldr	r3, [pc, #212]	; (1a0023d0 <xTaskResumeAll+0x118>)
1a0022fa:	681b      	ldr	r3, [r3, #0]
1a0022fc:	2b00      	cmp	r3, #0
1a0022fe:	d05d      	beq.n	1a0023bc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a002300:	e02e      	b.n	1a002360 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a002302:	4b34      	ldr	r3, [pc, #208]	; (1a0023d4 <xTaskResumeAll+0x11c>)
1a002304:	68db      	ldr	r3, [r3, #12]
1a002306:	68db      	ldr	r3, [r3, #12]
1a002308:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00230a:	68fb      	ldr	r3, [r7, #12]
1a00230c:	3318      	adds	r3, #24
1a00230e:	4618      	mov	r0, r3
1a002310:	f7ff fd3c 	bl	1a001d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002314:	68fb      	ldr	r3, [r7, #12]
1a002316:	3304      	adds	r3, #4
1a002318:	4618      	mov	r0, r3
1a00231a:	f7ff fd37 	bl	1a001d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00231e:	68fb      	ldr	r3, [r7, #12]
1a002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002322:	2201      	movs	r2, #1
1a002324:	409a      	lsls	r2, r3
1a002326:	4b2c      	ldr	r3, [pc, #176]	; (1a0023d8 <xTaskResumeAll+0x120>)
1a002328:	681b      	ldr	r3, [r3, #0]
1a00232a:	4313      	orrs	r3, r2
1a00232c:	4a2a      	ldr	r2, [pc, #168]	; (1a0023d8 <xTaskResumeAll+0x120>)
1a00232e:	6013      	str	r3, [r2, #0]
1a002330:	68fb      	ldr	r3, [r7, #12]
1a002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002334:	4613      	mov	r3, r2
1a002336:	009b      	lsls	r3, r3, #2
1a002338:	4413      	add	r3, r2
1a00233a:	009b      	lsls	r3, r3, #2
1a00233c:	4a27      	ldr	r2, [pc, #156]	; (1a0023dc <xTaskResumeAll+0x124>)
1a00233e:	441a      	add	r2, r3
1a002340:	68fb      	ldr	r3, [r7, #12]
1a002342:	3304      	adds	r3, #4
1a002344:	4619      	mov	r1, r3
1a002346:	4610      	mov	r0, r2
1a002348:	f7ff fcc3 	bl	1a001cd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00234c:	68fb      	ldr	r3, [r7, #12]
1a00234e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002350:	4b23      	ldr	r3, [pc, #140]	; (1a0023e0 <xTaskResumeAll+0x128>)
1a002352:	681b      	ldr	r3, [r3, #0]
1a002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002356:	429a      	cmp	r2, r3
1a002358:	d302      	bcc.n	1a002360 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
1a00235a:	4b22      	ldr	r3, [pc, #136]	; (1a0023e4 <xTaskResumeAll+0x12c>)
1a00235c:	2201      	movs	r2, #1
1a00235e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a002360:	4b1c      	ldr	r3, [pc, #112]	; (1a0023d4 <xTaskResumeAll+0x11c>)
1a002362:	681b      	ldr	r3, [r3, #0]
1a002364:	2b00      	cmp	r3, #0
1a002366:	d1cc      	bne.n	1a002302 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
1a002368:	68fb      	ldr	r3, [r7, #12]
1a00236a:	2b00      	cmp	r3, #0
1a00236c:	d001      	beq.n	1a002372 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
1a00236e:	f000 fb2b 	bl	1a0029c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a002372:	4b1d      	ldr	r3, [pc, #116]	; (1a0023e8 <xTaskResumeAll+0x130>)
1a002374:	681b      	ldr	r3, [r3, #0]
1a002376:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a002378:	687b      	ldr	r3, [r7, #4]
1a00237a:	2b00      	cmp	r3, #0
1a00237c:	d010      	beq.n	1a0023a0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
1a00237e:	f000 f859 	bl	1a002434 <xTaskIncrementTick>
1a002382:	4603      	mov	r3, r0
1a002384:	2b00      	cmp	r3, #0
1a002386:	d002      	beq.n	1a00238e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
1a002388:	4b16      	ldr	r3, [pc, #88]	; (1a0023e4 <xTaskResumeAll+0x12c>)
1a00238a:	2201      	movs	r2, #1
1a00238c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
1a00238e:	687b      	ldr	r3, [r7, #4]
1a002390:	3b01      	subs	r3, #1
1a002392:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a002394:	687b      	ldr	r3, [r7, #4]
1a002396:	2b00      	cmp	r3, #0
1a002398:	d1f1      	bne.n	1a00237e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
1a00239a:	4b13      	ldr	r3, [pc, #76]	; (1a0023e8 <xTaskResumeAll+0x130>)
1a00239c:	2200      	movs	r2, #0
1a00239e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
1a0023a0:	4b10      	ldr	r3, [pc, #64]	; (1a0023e4 <xTaskResumeAll+0x12c>)
1a0023a2:	681b      	ldr	r3, [r3, #0]
1a0023a4:	2b00      	cmp	r3, #0
1a0023a6:	d009      	beq.n	1a0023bc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
1a0023a8:	2301      	movs	r3, #1
1a0023aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
1a0023ac:	4b0f      	ldr	r3, [pc, #60]	; (1a0023ec <xTaskResumeAll+0x134>)
1a0023ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0023b2:	601a      	str	r2, [r3, #0]
1a0023b4:	f3bf 8f4f 	dsb	sy
1a0023b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0023bc:	f000 fe9c 	bl	1a0030f8 <vPortExitCritical>

	return xAlreadyYielded;
1a0023c0:	68bb      	ldr	r3, [r7, #8]
}
1a0023c2:	4618      	mov	r0, r3
1a0023c4:	3710      	adds	r7, #16
1a0023c6:	46bd      	mov	sp, r7
1a0023c8:	bd80      	pop	{r7, pc}
1a0023ca:	bf00      	nop
1a0023cc:	10002b0c 	.word	0x10002b0c
1a0023d0:	10002ae4 	.word	0x10002ae4
1a0023d4:	10002ab8 	.word	0x10002ab8
1a0023d8:	10002aec 	.word	0x10002aec
1a0023dc:	100029fc 	.word	0x100029fc
1a0023e0:	100029f8 	.word	0x100029f8
1a0023e4:	10002af8 	.word	0x10002af8
1a0023e8:	10002af4 	.word	0x10002af4
1a0023ec:	e000ed04 	.word	0xe000ed04

1a0023f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
1a0023f0:	b480      	push	{r7}
1a0023f2:	b083      	sub	sp, #12
1a0023f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
1a0023f6:	4b05      	ldr	r3, [pc, #20]	; (1a00240c <xTaskGetTickCount+0x1c>)
1a0023f8:	681b      	ldr	r3, [r3, #0]
1a0023fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
1a0023fc:	687b      	ldr	r3, [r7, #4]
}
1a0023fe:	4618      	mov	r0, r3
1a002400:	370c      	adds	r7, #12
1a002402:	46bd      	mov	sp, r7
1a002404:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002408:	4770      	bx	lr
1a00240a:	bf00      	nop
1a00240c:	10002ae8 	.word	0x10002ae8

1a002410 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
1a002410:	b580      	push	{r7, lr}
1a002412:	b082      	sub	sp, #8
1a002414:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a002416:	f000 ff1d 	bl	1a003254 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
1a00241a:	2300      	movs	r3, #0
1a00241c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
1a00241e:	4b04      	ldr	r3, [pc, #16]	; (1a002430 <xTaskGetTickCountFromISR+0x20>)
1a002420:	681b      	ldr	r3, [r3, #0]
1a002422:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
1a002424:	683b      	ldr	r3, [r7, #0]
}
1a002426:	4618      	mov	r0, r3
1a002428:	3708      	adds	r7, #8
1a00242a:	46bd      	mov	sp, r7
1a00242c:	bd80      	pop	{r7, pc}
1a00242e:	bf00      	nop
1a002430:	10002ae8 	.word	0x10002ae8

1a002434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
1a002434:	b580      	push	{r7, lr}
1a002436:	b086      	sub	sp, #24
1a002438:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a00243a:	2300      	movs	r3, #0
1a00243c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00243e:	4b50      	ldr	r3, [pc, #320]	; (1a002580 <xTaskIncrementTick+0x14c>)
1a002440:	681b      	ldr	r3, [r3, #0]
1a002442:	2b00      	cmp	r3, #0
1a002444:	f040 808c 	bne.w	1a002560 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a002448:	4b4e      	ldr	r3, [pc, #312]	; (1a002584 <xTaskIncrementTick+0x150>)
1a00244a:	681b      	ldr	r3, [r3, #0]
1a00244c:	3301      	adds	r3, #1
1a00244e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
1a002450:	4a4c      	ldr	r2, [pc, #304]	; (1a002584 <xTaskIncrementTick+0x150>)
1a002452:	693b      	ldr	r3, [r7, #16]
1a002454:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a002456:	693b      	ldr	r3, [r7, #16]
1a002458:	2b00      	cmp	r3, #0
1a00245a:	d11f      	bne.n	1a00249c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
1a00245c:	4b4a      	ldr	r3, [pc, #296]	; (1a002588 <xTaskIncrementTick+0x154>)
1a00245e:	681b      	ldr	r3, [r3, #0]
1a002460:	681b      	ldr	r3, [r3, #0]
1a002462:	2b00      	cmp	r3, #0
1a002464:	d009      	beq.n	1a00247a <xTaskIncrementTick+0x46>
1a002466:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00246a:	f383 8811 	msr	BASEPRI, r3
1a00246e:	f3bf 8f6f 	isb	sy
1a002472:	f3bf 8f4f 	dsb	sy
1a002476:	603b      	str	r3, [r7, #0]
1a002478:	e7fe      	b.n	1a002478 <xTaskIncrementTick+0x44>
1a00247a:	4b43      	ldr	r3, [pc, #268]	; (1a002588 <xTaskIncrementTick+0x154>)
1a00247c:	681b      	ldr	r3, [r3, #0]
1a00247e:	60fb      	str	r3, [r7, #12]
1a002480:	4b42      	ldr	r3, [pc, #264]	; (1a00258c <xTaskIncrementTick+0x158>)
1a002482:	681b      	ldr	r3, [r3, #0]
1a002484:	4a40      	ldr	r2, [pc, #256]	; (1a002588 <xTaskIncrementTick+0x154>)
1a002486:	6013      	str	r3, [r2, #0]
1a002488:	4a40      	ldr	r2, [pc, #256]	; (1a00258c <xTaskIncrementTick+0x158>)
1a00248a:	68fb      	ldr	r3, [r7, #12]
1a00248c:	6013      	str	r3, [r2, #0]
1a00248e:	4b40      	ldr	r3, [pc, #256]	; (1a002590 <xTaskIncrementTick+0x15c>)
1a002490:	681b      	ldr	r3, [r3, #0]
1a002492:	3301      	adds	r3, #1
1a002494:	4a3e      	ldr	r2, [pc, #248]	; (1a002590 <xTaskIncrementTick+0x15c>)
1a002496:	6013      	str	r3, [r2, #0]
1a002498:	f000 fa96 	bl	1a0029c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00249c:	4b3d      	ldr	r3, [pc, #244]	; (1a002594 <xTaskIncrementTick+0x160>)
1a00249e:	681b      	ldr	r3, [r3, #0]
1a0024a0:	693a      	ldr	r2, [r7, #16]
1a0024a2:	429a      	cmp	r2, r3
1a0024a4:	d34d      	bcc.n	1a002542 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0024a6:	4b38      	ldr	r3, [pc, #224]	; (1a002588 <xTaskIncrementTick+0x154>)
1a0024a8:	681b      	ldr	r3, [r3, #0]
1a0024aa:	681b      	ldr	r3, [r3, #0]
1a0024ac:	2b00      	cmp	r3, #0
1a0024ae:	d101      	bne.n	1a0024b4 <xTaskIncrementTick+0x80>
1a0024b0:	2301      	movs	r3, #1
1a0024b2:	e000      	b.n	1a0024b6 <xTaskIncrementTick+0x82>
1a0024b4:	2300      	movs	r3, #0
1a0024b6:	2b00      	cmp	r3, #0
1a0024b8:	d004      	beq.n	1a0024c4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0024ba:	4b36      	ldr	r3, [pc, #216]	; (1a002594 <xTaskIncrementTick+0x160>)
1a0024bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0024c0:	601a      	str	r2, [r3, #0]
					break;
1a0024c2:	e03e      	b.n	1a002542 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0024c4:	4b30      	ldr	r3, [pc, #192]	; (1a002588 <xTaskIncrementTick+0x154>)
1a0024c6:	681b      	ldr	r3, [r3, #0]
1a0024c8:	68db      	ldr	r3, [r3, #12]
1a0024ca:	68db      	ldr	r3, [r3, #12]
1a0024cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0024ce:	68bb      	ldr	r3, [r7, #8]
1a0024d0:	685b      	ldr	r3, [r3, #4]
1a0024d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
1a0024d4:	693a      	ldr	r2, [r7, #16]
1a0024d6:	687b      	ldr	r3, [r7, #4]
1a0024d8:	429a      	cmp	r2, r3
1a0024da:	d203      	bcs.n	1a0024e4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
1a0024dc:	4a2d      	ldr	r2, [pc, #180]	; (1a002594 <xTaskIncrementTick+0x160>)
1a0024de:	687b      	ldr	r3, [r7, #4]
1a0024e0:	6013      	str	r3, [r2, #0]
						break;
1a0024e2:	e02e      	b.n	1a002542 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0024e4:	68bb      	ldr	r3, [r7, #8]
1a0024e6:	3304      	adds	r3, #4
1a0024e8:	4618      	mov	r0, r3
1a0024ea:	f7ff fc4f 	bl	1a001d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0024ee:	68bb      	ldr	r3, [r7, #8]
1a0024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1a0024f2:	2b00      	cmp	r3, #0
1a0024f4:	d004      	beq.n	1a002500 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0024f6:	68bb      	ldr	r3, [r7, #8]
1a0024f8:	3318      	adds	r3, #24
1a0024fa:	4618      	mov	r0, r3
1a0024fc:	f7ff fc46 	bl	1a001d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
1a002500:	68bb      	ldr	r3, [r7, #8]
1a002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002504:	2201      	movs	r2, #1
1a002506:	409a      	lsls	r2, r3
1a002508:	4b23      	ldr	r3, [pc, #140]	; (1a002598 <xTaskIncrementTick+0x164>)
1a00250a:	681b      	ldr	r3, [r3, #0]
1a00250c:	4313      	orrs	r3, r2
1a00250e:	4a22      	ldr	r2, [pc, #136]	; (1a002598 <xTaskIncrementTick+0x164>)
1a002510:	6013      	str	r3, [r2, #0]
1a002512:	68bb      	ldr	r3, [r7, #8]
1a002514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002516:	4613      	mov	r3, r2
1a002518:	009b      	lsls	r3, r3, #2
1a00251a:	4413      	add	r3, r2
1a00251c:	009b      	lsls	r3, r3, #2
1a00251e:	4a1f      	ldr	r2, [pc, #124]	; (1a00259c <xTaskIncrementTick+0x168>)
1a002520:	441a      	add	r2, r3
1a002522:	68bb      	ldr	r3, [r7, #8]
1a002524:	3304      	adds	r3, #4
1a002526:	4619      	mov	r1, r3
1a002528:	4610      	mov	r0, r2
1a00252a:	f7ff fbd2 	bl	1a001cd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00252e:	68bb      	ldr	r3, [r7, #8]
1a002530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002532:	4b1b      	ldr	r3, [pc, #108]	; (1a0025a0 <xTaskIncrementTick+0x16c>)
1a002534:	681b      	ldr	r3, [r3, #0]
1a002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002538:	429a      	cmp	r2, r3
1a00253a:	d3b4      	bcc.n	1a0024a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
1a00253c:	2301      	movs	r3, #1
1a00253e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a002540:	e7b1      	b.n	1a0024a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a002542:	4b17      	ldr	r3, [pc, #92]	; (1a0025a0 <xTaskIncrementTick+0x16c>)
1a002544:	681b      	ldr	r3, [r3, #0]
1a002546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002548:	4914      	ldr	r1, [pc, #80]	; (1a00259c <xTaskIncrementTick+0x168>)
1a00254a:	4613      	mov	r3, r2
1a00254c:	009b      	lsls	r3, r3, #2
1a00254e:	4413      	add	r3, r2
1a002550:	009b      	lsls	r3, r3, #2
1a002552:	440b      	add	r3, r1
1a002554:	681b      	ldr	r3, [r3, #0]
1a002556:	2b01      	cmp	r3, #1
1a002558:	d907      	bls.n	1a00256a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
1a00255a:	2301      	movs	r3, #1
1a00255c:	617b      	str	r3, [r7, #20]
1a00255e:	e004      	b.n	1a00256a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
1a002560:	4b10      	ldr	r3, [pc, #64]	; (1a0025a4 <xTaskIncrementTick+0x170>)
1a002562:	681b      	ldr	r3, [r3, #0]
1a002564:	3301      	adds	r3, #1
1a002566:	4a0f      	ldr	r2, [pc, #60]	; (1a0025a4 <xTaskIncrementTick+0x170>)
1a002568:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
1a00256a:	4b0f      	ldr	r3, [pc, #60]	; (1a0025a8 <xTaskIncrementTick+0x174>)
1a00256c:	681b      	ldr	r3, [r3, #0]
1a00256e:	2b00      	cmp	r3, #0
1a002570:	d001      	beq.n	1a002576 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
1a002572:	2301      	movs	r3, #1
1a002574:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
1a002576:	697b      	ldr	r3, [r7, #20]
}
1a002578:	4618      	mov	r0, r3
1a00257a:	3718      	adds	r7, #24
1a00257c:	46bd      	mov	sp, r7
1a00257e:	bd80      	pop	{r7, pc}
1a002580:	10002b0c 	.word	0x10002b0c
1a002584:	10002ae8 	.word	0x10002ae8
1a002588:	10002ab0 	.word	0x10002ab0
1a00258c:	10002ab4 	.word	0x10002ab4
1a002590:	10002afc 	.word	0x10002afc
1a002594:	10002b04 	.word	0x10002b04
1a002598:	10002aec 	.word	0x10002aec
1a00259c:	100029fc 	.word	0x100029fc
1a0025a0:	100029f8 	.word	0x100029f8
1a0025a4:	10002af4 	.word	0x10002af4
1a0025a8:	10002af8 	.word	0x10002af8

1a0025ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
1a0025ac:	b580      	push	{r7, lr}
1a0025ae:	b088      	sub	sp, #32
1a0025b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0025b2:	4b39      	ldr	r3, [pc, #228]	; (1a002698 <vTaskSwitchContext+0xec>)
1a0025b4:	681b      	ldr	r3, [r3, #0]
1a0025b6:	2b00      	cmp	r3, #0
1a0025b8:	d003      	beq.n	1a0025c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
1a0025ba:	4b38      	ldr	r3, [pc, #224]	; (1a00269c <vTaskSwitchContext+0xf0>)
1a0025bc:	2201      	movs	r2, #1
1a0025be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
1a0025c0:	e065      	b.n	1a00268e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
1a0025c2:	4b36      	ldr	r3, [pc, #216]	; (1a00269c <vTaskSwitchContext+0xf0>)
1a0025c4:	2200      	movs	r2, #0
1a0025c6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0025c8:	4b35      	ldr	r3, [pc, #212]	; (1a0026a0 <vTaskSwitchContext+0xf4>)
1a0025ca:	681b      	ldr	r3, [r3, #0]
1a0025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0025ce:	61fb      	str	r3, [r7, #28]
1a0025d0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
1a0025d4:	61bb      	str	r3, [r7, #24]
1a0025d6:	69fb      	ldr	r3, [r7, #28]
1a0025d8:	681b      	ldr	r3, [r3, #0]
1a0025da:	69ba      	ldr	r2, [r7, #24]
1a0025dc:	429a      	cmp	r2, r3
1a0025de:	d111      	bne.n	1a002604 <vTaskSwitchContext+0x58>
1a0025e0:	69fb      	ldr	r3, [r7, #28]
1a0025e2:	3304      	adds	r3, #4
1a0025e4:	681b      	ldr	r3, [r3, #0]
1a0025e6:	69ba      	ldr	r2, [r7, #24]
1a0025e8:	429a      	cmp	r2, r3
1a0025ea:	d10b      	bne.n	1a002604 <vTaskSwitchContext+0x58>
1a0025ec:	69fb      	ldr	r3, [r7, #28]
1a0025ee:	3308      	adds	r3, #8
1a0025f0:	681b      	ldr	r3, [r3, #0]
1a0025f2:	69ba      	ldr	r2, [r7, #24]
1a0025f4:	429a      	cmp	r2, r3
1a0025f6:	d105      	bne.n	1a002604 <vTaskSwitchContext+0x58>
1a0025f8:	69fb      	ldr	r3, [r7, #28]
1a0025fa:	330c      	adds	r3, #12
1a0025fc:	681b      	ldr	r3, [r3, #0]
1a0025fe:	69ba      	ldr	r2, [r7, #24]
1a002600:	429a      	cmp	r2, r3
1a002602:	d008      	beq.n	1a002616 <vTaskSwitchContext+0x6a>
1a002604:	4b26      	ldr	r3, [pc, #152]	; (1a0026a0 <vTaskSwitchContext+0xf4>)
1a002606:	681a      	ldr	r2, [r3, #0]
1a002608:	4b25      	ldr	r3, [pc, #148]	; (1a0026a0 <vTaskSwitchContext+0xf4>)
1a00260a:	681b      	ldr	r3, [r3, #0]
1a00260c:	3334      	adds	r3, #52	; 0x34
1a00260e:	4619      	mov	r1, r3
1a002610:	4610      	mov	r0, r2
1a002612:	f7ff fc05 	bl	1a001e20 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002616:	4b23      	ldr	r3, [pc, #140]	; (1a0026a4 <vTaskSwitchContext+0xf8>)
1a002618:	681b      	ldr	r3, [r3, #0]
1a00261a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a00261c:	68fb      	ldr	r3, [r7, #12]
1a00261e:	fab3 f383 	clz	r3, r3
1a002622:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
1a002624:	7afb      	ldrb	r3, [r7, #11]
1a002626:	f1c3 031f 	rsb	r3, r3, #31
1a00262a:	617b      	str	r3, [r7, #20]
1a00262c:	491e      	ldr	r1, [pc, #120]	; (1a0026a8 <vTaskSwitchContext+0xfc>)
1a00262e:	697a      	ldr	r2, [r7, #20]
1a002630:	4613      	mov	r3, r2
1a002632:	009b      	lsls	r3, r3, #2
1a002634:	4413      	add	r3, r2
1a002636:	009b      	lsls	r3, r3, #2
1a002638:	440b      	add	r3, r1
1a00263a:	681b      	ldr	r3, [r3, #0]
1a00263c:	2b00      	cmp	r3, #0
1a00263e:	d109      	bne.n	1a002654 <vTaskSwitchContext+0xa8>
	__asm volatile
1a002640:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002644:	f383 8811 	msr	BASEPRI, r3
1a002648:	f3bf 8f6f 	isb	sy
1a00264c:	f3bf 8f4f 	dsb	sy
1a002650:	607b      	str	r3, [r7, #4]
1a002652:	e7fe      	b.n	1a002652 <vTaskSwitchContext+0xa6>
1a002654:	697a      	ldr	r2, [r7, #20]
1a002656:	4613      	mov	r3, r2
1a002658:	009b      	lsls	r3, r3, #2
1a00265a:	4413      	add	r3, r2
1a00265c:	009b      	lsls	r3, r3, #2
1a00265e:	4a12      	ldr	r2, [pc, #72]	; (1a0026a8 <vTaskSwitchContext+0xfc>)
1a002660:	4413      	add	r3, r2
1a002662:	613b      	str	r3, [r7, #16]
1a002664:	693b      	ldr	r3, [r7, #16]
1a002666:	685b      	ldr	r3, [r3, #4]
1a002668:	685a      	ldr	r2, [r3, #4]
1a00266a:	693b      	ldr	r3, [r7, #16]
1a00266c:	605a      	str	r2, [r3, #4]
1a00266e:	693b      	ldr	r3, [r7, #16]
1a002670:	685a      	ldr	r2, [r3, #4]
1a002672:	693b      	ldr	r3, [r7, #16]
1a002674:	3308      	adds	r3, #8
1a002676:	429a      	cmp	r2, r3
1a002678:	d104      	bne.n	1a002684 <vTaskSwitchContext+0xd8>
1a00267a:	693b      	ldr	r3, [r7, #16]
1a00267c:	685b      	ldr	r3, [r3, #4]
1a00267e:	685a      	ldr	r2, [r3, #4]
1a002680:	693b      	ldr	r3, [r7, #16]
1a002682:	605a      	str	r2, [r3, #4]
1a002684:	693b      	ldr	r3, [r7, #16]
1a002686:	685b      	ldr	r3, [r3, #4]
1a002688:	68db      	ldr	r3, [r3, #12]
1a00268a:	4a05      	ldr	r2, [pc, #20]	; (1a0026a0 <vTaskSwitchContext+0xf4>)
1a00268c:	6013      	str	r3, [r2, #0]
}
1a00268e:	bf00      	nop
1a002690:	3720      	adds	r7, #32
1a002692:	46bd      	mov	sp, r7
1a002694:	bd80      	pop	{r7, pc}
1a002696:	bf00      	nop
1a002698:	10002b0c 	.word	0x10002b0c
1a00269c:	10002af8 	.word	0x10002af8
1a0026a0:	100029f8 	.word	0x100029f8
1a0026a4:	10002aec 	.word	0x10002aec
1a0026a8:	100029fc 	.word	0x100029fc

1a0026ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
1a0026ac:	b580      	push	{r7, lr}
1a0026ae:	b084      	sub	sp, #16
1a0026b0:	af00      	add	r7, sp, #0
1a0026b2:	6078      	str	r0, [r7, #4]
1a0026b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
1a0026b6:	687b      	ldr	r3, [r7, #4]
1a0026b8:	2b00      	cmp	r3, #0
1a0026ba:	d109      	bne.n	1a0026d0 <vTaskPlaceOnEventList+0x24>
1a0026bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026c0:	f383 8811 	msr	BASEPRI, r3
1a0026c4:	f3bf 8f6f 	isb	sy
1a0026c8:	f3bf 8f4f 	dsb	sy
1a0026cc:	60fb      	str	r3, [r7, #12]
1a0026ce:	e7fe      	b.n	1a0026ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0026d0:	4b07      	ldr	r3, [pc, #28]	; (1a0026f0 <vTaskPlaceOnEventList+0x44>)
1a0026d2:	681b      	ldr	r3, [r3, #0]
1a0026d4:	3318      	adds	r3, #24
1a0026d6:	4619      	mov	r1, r3
1a0026d8:	6878      	ldr	r0, [r7, #4]
1a0026da:	f7ff fb1e 	bl	1a001d1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0026de:	2101      	movs	r1, #1
1a0026e0:	6838      	ldr	r0, [r7, #0]
1a0026e2:	f000 fb53 	bl	1a002d8c <prvAddCurrentTaskToDelayedList>
}
1a0026e6:	bf00      	nop
1a0026e8:	3710      	adds	r7, #16
1a0026ea:	46bd      	mov	sp, r7
1a0026ec:	bd80      	pop	{r7, pc}
1a0026ee:	bf00      	nop
1a0026f0:	100029f8 	.word	0x100029f8

1a0026f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
1a0026f4:	b580      	push	{r7, lr}
1a0026f6:	b086      	sub	sp, #24
1a0026f8:	af00      	add	r7, sp, #0
1a0026fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0026fc:	687b      	ldr	r3, [r7, #4]
1a0026fe:	68db      	ldr	r3, [r3, #12]
1a002700:	68db      	ldr	r3, [r3, #12]
1a002702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
1a002704:	693b      	ldr	r3, [r7, #16]
1a002706:	2b00      	cmp	r3, #0
1a002708:	d109      	bne.n	1a00271e <xTaskRemoveFromEventList+0x2a>
1a00270a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00270e:	f383 8811 	msr	BASEPRI, r3
1a002712:	f3bf 8f6f 	isb	sy
1a002716:	f3bf 8f4f 	dsb	sy
1a00271a:	60fb      	str	r3, [r7, #12]
1a00271c:	e7fe      	b.n	1a00271c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a00271e:	693b      	ldr	r3, [r7, #16]
1a002720:	3318      	adds	r3, #24
1a002722:	4618      	mov	r0, r3
1a002724:	f7ff fb32 	bl	1a001d8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002728:	4b1d      	ldr	r3, [pc, #116]	; (1a0027a0 <xTaskRemoveFromEventList+0xac>)
1a00272a:	681b      	ldr	r3, [r3, #0]
1a00272c:	2b00      	cmp	r3, #0
1a00272e:	d11c      	bne.n	1a00276a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002730:	693b      	ldr	r3, [r7, #16]
1a002732:	3304      	adds	r3, #4
1a002734:	4618      	mov	r0, r3
1a002736:	f7ff fb29 	bl	1a001d8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00273a:	693b      	ldr	r3, [r7, #16]
1a00273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00273e:	2201      	movs	r2, #1
1a002740:	409a      	lsls	r2, r3
1a002742:	4b18      	ldr	r3, [pc, #96]	; (1a0027a4 <xTaskRemoveFromEventList+0xb0>)
1a002744:	681b      	ldr	r3, [r3, #0]
1a002746:	4313      	orrs	r3, r2
1a002748:	4a16      	ldr	r2, [pc, #88]	; (1a0027a4 <xTaskRemoveFromEventList+0xb0>)
1a00274a:	6013      	str	r3, [r2, #0]
1a00274c:	693b      	ldr	r3, [r7, #16]
1a00274e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002750:	4613      	mov	r3, r2
1a002752:	009b      	lsls	r3, r3, #2
1a002754:	4413      	add	r3, r2
1a002756:	009b      	lsls	r3, r3, #2
1a002758:	4a13      	ldr	r2, [pc, #76]	; (1a0027a8 <xTaskRemoveFromEventList+0xb4>)
1a00275a:	441a      	add	r2, r3
1a00275c:	693b      	ldr	r3, [r7, #16]
1a00275e:	3304      	adds	r3, #4
1a002760:	4619      	mov	r1, r3
1a002762:	4610      	mov	r0, r2
1a002764:	f7ff fab5 	bl	1a001cd2 <vListInsertEnd>
1a002768:	e005      	b.n	1a002776 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a00276a:	693b      	ldr	r3, [r7, #16]
1a00276c:	3318      	adds	r3, #24
1a00276e:	4619      	mov	r1, r3
1a002770:	480e      	ldr	r0, [pc, #56]	; (1a0027ac <xTaskRemoveFromEventList+0xb8>)
1a002772:	f7ff faae 	bl	1a001cd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a002776:	693b      	ldr	r3, [r7, #16]
1a002778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00277a:	4b0d      	ldr	r3, [pc, #52]	; (1a0027b0 <xTaskRemoveFromEventList+0xbc>)
1a00277c:	681b      	ldr	r3, [r3, #0]
1a00277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002780:	429a      	cmp	r2, r3
1a002782:	d905      	bls.n	1a002790 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
1a002784:	2301      	movs	r3, #1
1a002786:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
1a002788:	4b0a      	ldr	r3, [pc, #40]	; (1a0027b4 <xTaskRemoveFromEventList+0xc0>)
1a00278a:	2201      	movs	r2, #1
1a00278c:	601a      	str	r2, [r3, #0]
1a00278e:	e001      	b.n	1a002794 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
1a002790:	2300      	movs	r3, #0
1a002792:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
1a002794:	697b      	ldr	r3, [r7, #20]
}
1a002796:	4618      	mov	r0, r3
1a002798:	3718      	adds	r7, #24
1a00279a:	46bd      	mov	sp, r7
1a00279c:	bd80      	pop	{r7, pc}
1a00279e:	bf00      	nop
1a0027a0:	10002b0c 	.word	0x10002b0c
1a0027a4:	10002aec 	.word	0x10002aec
1a0027a8:	100029fc 	.word	0x100029fc
1a0027ac:	10002ab8 	.word	0x10002ab8
1a0027b0:	100029f8 	.word	0x100029f8
1a0027b4:	10002af8 	.word	0x10002af8

1a0027b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
1a0027b8:	b480      	push	{r7}
1a0027ba:	b083      	sub	sp, #12
1a0027bc:	af00      	add	r7, sp, #0
1a0027be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0027c0:	4b06      	ldr	r3, [pc, #24]	; (1a0027dc <vTaskInternalSetTimeOutState+0x24>)
1a0027c2:	681a      	ldr	r2, [r3, #0]
1a0027c4:	687b      	ldr	r3, [r7, #4]
1a0027c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0027c8:	4b05      	ldr	r3, [pc, #20]	; (1a0027e0 <vTaskInternalSetTimeOutState+0x28>)
1a0027ca:	681a      	ldr	r2, [r3, #0]
1a0027cc:	687b      	ldr	r3, [r7, #4]
1a0027ce:	605a      	str	r2, [r3, #4]
}
1a0027d0:	bf00      	nop
1a0027d2:	370c      	adds	r7, #12
1a0027d4:	46bd      	mov	sp, r7
1a0027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0027da:	4770      	bx	lr
1a0027dc:	10002afc 	.word	0x10002afc
1a0027e0:	10002ae8 	.word	0x10002ae8

1a0027e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
1a0027e4:	b580      	push	{r7, lr}
1a0027e6:	b088      	sub	sp, #32
1a0027e8:	af00      	add	r7, sp, #0
1a0027ea:	6078      	str	r0, [r7, #4]
1a0027ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
1a0027ee:	687b      	ldr	r3, [r7, #4]
1a0027f0:	2b00      	cmp	r3, #0
1a0027f2:	d109      	bne.n	1a002808 <xTaskCheckForTimeOut+0x24>
1a0027f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027f8:	f383 8811 	msr	BASEPRI, r3
1a0027fc:	f3bf 8f6f 	isb	sy
1a002800:	f3bf 8f4f 	dsb	sy
1a002804:	613b      	str	r3, [r7, #16]
1a002806:	e7fe      	b.n	1a002806 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
1a002808:	683b      	ldr	r3, [r7, #0]
1a00280a:	2b00      	cmp	r3, #0
1a00280c:	d109      	bne.n	1a002822 <xTaskCheckForTimeOut+0x3e>
1a00280e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002812:	f383 8811 	msr	BASEPRI, r3
1a002816:	f3bf 8f6f 	isb	sy
1a00281a:	f3bf 8f4f 	dsb	sy
1a00281e:	60fb      	str	r3, [r7, #12]
1a002820:	e7fe      	b.n	1a002820 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
1a002822:	f000 fc3b 	bl	1a00309c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
1a002826:	4b19      	ldr	r3, [pc, #100]	; (1a00288c <xTaskCheckForTimeOut+0xa8>)
1a002828:	681b      	ldr	r3, [r3, #0]
1a00282a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00282c:	687b      	ldr	r3, [r7, #4]
1a00282e:	685b      	ldr	r3, [r3, #4]
1a002830:	69ba      	ldr	r2, [r7, #24]
1a002832:	1ad3      	subs	r3, r2, r3
1a002834:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002836:	687b      	ldr	r3, [r7, #4]
1a002838:	681a      	ldr	r2, [r3, #0]
1a00283a:	4b15      	ldr	r3, [pc, #84]	; (1a002890 <xTaskCheckForTimeOut+0xac>)
1a00283c:	681b      	ldr	r3, [r3, #0]
1a00283e:	429a      	cmp	r2, r3
1a002840:	d007      	beq.n	1a002852 <xTaskCheckForTimeOut+0x6e>
1a002842:	687b      	ldr	r3, [r7, #4]
1a002844:	685b      	ldr	r3, [r3, #4]
1a002846:	69ba      	ldr	r2, [r7, #24]
1a002848:	429a      	cmp	r2, r3
1a00284a:	d302      	bcc.n	1a002852 <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
1a00284c:	2301      	movs	r3, #1
1a00284e:	61fb      	str	r3, [r7, #28]
1a002850:	e015      	b.n	1a00287e <xTaskCheckForTimeOut+0x9a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002852:	683b      	ldr	r3, [r7, #0]
1a002854:	681b      	ldr	r3, [r3, #0]
1a002856:	697a      	ldr	r2, [r7, #20]
1a002858:	429a      	cmp	r2, r3
1a00285a:	d20b      	bcs.n	1a002874 <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
1a00285c:	683b      	ldr	r3, [r7, #0]
1a00285e:	681a      	ldr	r2, [r3, #0]
1a002860:	697b      	ldr	r3, [r7, #20]
1a002862:	1ad2      	subs	r2, r2, r3
1a002864:	683b      	ldr	r3, [r7, #0]
1a002866:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002868:	6878      	ldr	r0, [r7, #4]
1a00286a:	f7ff ffa5 	bl	1a0027b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a00286e:	2300      	movs	r3, #0
1a002870:	61fb      	str	r3, [r7, #28]
1a002872:	e004      	b.n	1a00287e <xTaskCheckForTimeOut+0x9a>
		}
		else
		{
			*pxTicksToWait = 0;
1a002874:	683b      	ldr	r3, [r7, #0]
1a002876:	2200      	movs	r2, #0
1a002878:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
1a00287a:	2301      	movs	r3, #1
1a00287c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
1a00287e:	f000 fc3b 	bl	1a0030f8 <vPortExitCritical>

	return xReturn;
1a002882:	69fb      	ldr	r3, [r7, #28]
}
1a002884:	4618      	mov	r0, r3
1a002886:	3720      	adds	r7, #32
1a002888:	46bd      	mov	sp, r7
1a00288a:	bd80      	pop	{r7, pc}
1a00288c:	10002ae8 	.word	0x10002ae8
1a002890:	10002afc 	.word	0x10002afc

1a002894 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
1a002894:	b480      	push	{r7}
1a002896:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
1a002898:	4b03      	ldr	r3, [pc, #12]	; (1a0028a8 <vTaskMissedYield+0x14>)
1a00289a:	2201      	movs	r2, #1
1a00289c:	601a      	str	r2, [r3, #0]
}
1a00289e:	bf00      	nop
1a0028a0:	46bd      	mov	sp, r7
1a0028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0028a6:	4770      	bx	lr
1a0028a8:	10002af8 	.word	0x10002af8

1a0028ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
1a0028ac:	b580      	push	{r7, lr}
1a0028ae:	b082      	sub	sp, #8
1a0028b0:	af00      	add	r7, sp, #0
1a0028b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
1a0028b4:	f000 f84c 	bl	1a002950 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0028b8:	4b06      	ldr	r3, [pc, #24]	; (1a0028d4 <prvIdleTask+0x28>)
1a0028ba:	681b      	ldr	r3, [r3, #0]
1a0028bc:	2b01      	cmp	r3, #1
1a0028be:	d9f9      	bls.n	1a0028b4 <prvIdleTask+0x8>
			{
				taskYIELD();
1a0028c0:	4b05      	ldr	r3, [pc, #20]	; (1a0028d8 <prvIdleTask+0x2c>)
1a0028c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0028c6:	601a      	str	r2, [r3, #0]
1a0028c8:	f3bf 8f4f 	dsb	sy
1a0028cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
1a0028d0:	e7f0      	b.n	1a0028b4 <prvIdleTask+0x8>
1a0028d2:	bf00      	nop
1a0028d4:	100029fc 	.word	0x100029fc
1a0028d8:	e000ed04 	.word	0xe000ed04

1a0028dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
1a0028dc:	b580      	push	{r7, lr}
1a0028de:	b082      	sub	sp, #8
1a0028e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0028e2:	2300      	movs	r3, #0
1a0028e4:	607b      	str	r3, [r7, #4]
1a0028e6:	e00c      	b.n	1a002902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0028e8:	687a      	ldr	r2, [r7, #4]
1a0028ea:	4613      	mov	r3, r2
1a0028ec:	009b      	lsls	r3, r3, #2
1a0028ee:	4413      	add	r3, r2
1a0028f0:	009b      	lsls	r3, r3, #2
1a0028f2:	4a10      	ldr	r2, [pc, #64]	; (1a002934 <prvInitialiseTaskLists+0x58>)
1a0028f4:	4413      	add	r3, r2
1a0028f6:	4618      	mov	r0, r3
1a0028f8:	f7ff f9be 	bl	1a001c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0028fc:	687b      	ldr	r3, [r7, #4]
1a0028fe:	3301      	adds	r3, #1
1a002900:	607b      	str	r3, [r7, #4]
1a002902:	687b      	ldr	r3, [r7, #4]
1a002904:	2b06      	cmp	r3, #6
1a002906:	d9ef      	bls.n	1a0028e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
1a002908:	480b      	ldr	r0, [pc, #44]	; (1a002938 <prvInitialiseTaskLists+0x5c>)
1a00290a:	f7ff f9b5 	bl	1a001c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00290e:	480b      	ldr	r0, [pc, #44]	; (1a00293c <prvInitialiseTaskLists+0x60>)
1a002910:	f7ff f9b2 	bl	1a001c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a002914:	480a      	ldr	r0, [pc, #40]	; (1a002940 <prvInitialiseTaskLists+0x64>)
1a002916:	f7ff f9af 	bl	1a001c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
1a00291a:	480a      	ldr	r0, [pc, #40]	; (1a002944 <prvInitialiseTaskLists+0x68>)
1a00291c:	f7ff f9ac 	bl	1a001c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
1a002920:	4b09      	ldr	r3, [pc, #36]	; (1a002948 <prvInitialiseTaskLists+0x6c>)
1a002922:	4a05      	ldr	r2, [pc, #20]	; (1a002938 <prvInitialiseTaskLists+0x5c>)
1a002924:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a002926:	4b09      	ldr	r3, [pc, #36]	; (1a00294c <prvInitialiseTaskLists+0x70>)
1a002928:	4a04      	ldr	r2, [pc, #16]	; (1a00293c <prvInitialiseTaskLists+0x60>)
1a00292a:	601a      	str	r2, [r3, #0]
}
1a00292c:	bf00      	nop
1a00292e:	3708      	adds	r7, #8
1a002930:	46bd      	mov	sp, r7
1a002932:	bd80      	pop	{r7, pc}
1a002934:	100029fc 	.word	0x100029fc
1a002938:	10002a88 	.word	0x10002a88
1a00293c:	10002a9c 	.word	0x10002a9c
1a002940:	10002ab8 	.word	0x10002ab8
1a002944:	10002acc 	.word	0x10002acc
1a002948:	10002ab0 	.word	0x10002ab0
1a00294c:	10002ab4 	.word	0x10002ab4

1a002950 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
1a002950:	b580      	push	{r7, lr}
1a002952:	b082      	sub	sp, #8
1a002954:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a002956:	e019      	b.n	1a00298c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
1a002958:	f000 fba0 	bl	1a00309c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a00295c:	4b0f      	ldr	r3, [pc, #60]	; (1a00299c <prvCheckTasksWaitingTermination+0x4c>)
1a00295e:	68db      	ldr	r3, [r3, #12]
1a002960:	68db      	ldr	r3, [r3, #12]
1a002962:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002964:	687b      	ldr	r3, [r7, #4]
1a002966:	3304      	adds	r3, #4
1a002968:	4618      	mov	r0, r3
1a00296a:	f7ff fa0f 	bl	1a001d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
1a00296e:	4b0c      	ldr	r3, [pc, #48]	; (1a0029a0 <prvCheckTasksWaitingTermination+0x50>)
1a002970:	681b      	ldr	r3, [r3, #0]
1a002972:	3b01      	subs	r3, #1
1a002974:	4a0a      	ldr	r2, [pc, #40]	; (1a0029a0 <prvCheckTasksWaitingTermination+0x50>)
1a002976:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a002978:	4b0a      	ldr	r3, [pc, #40]	; (1a0029a4 <prvCheckTasksWaitingTermination+0x54>)
1a00297a:	681b      	ldr	r3, [r3, #0]
1a00297c:	3b01      	subs	r3, #1
1a00297e:	4a09      	ldr	r2, [pc, #36]	; (1a0029a4 <prvCheckTasksWaitingTermination+0x54>)
1a002980:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
1a002982:	f000 fbb9 	bl	1a0030f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
1a002986:	6878      	ldr	r0, [r7, #4]
1a002988:	f000 f80e 	bl	1a0029a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00298c:	4b05      	ldr	r3, [pc, #20]	; (1a0029a4 <prvCheckTasksWaitingTermination+0x54>)
1a00298e:	681b      	ldr	r3, [r3, #0]
1a002990:	2b00      	cmp	r3, #0
1a002992:	d1e1      	bne.n	1a002958 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
1a002994:	bf00      	nop
1a002996:	3708      	adds	r7, #8
1a002998:	46bd      	mov	sp, r7
1a00299a:	bd80      	pop	{r7, pc}
1a00299c:	10002acc 	.word	0x10002acc
1a0029a0:	10002ae4 	.word	0x10002ae4
1a0029a4:	10002ae0 	.word	0x10002ae0

1a0029a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
1a0029a8:	b580      	push	{r7, lr}
1a0029aa:	b082      	sub	sp, #8
1a0029ac:	af00      	add	r7, sp, #0
1a0029ae:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
1a0029b0:	687b      	ldr	r3, [r7, #4]
1a0029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0029b4:	4618      	mov	r0, r3
1a0029b6:	f7fe fd27 	bl	1a001408 <vPortFree>
			vPortFree( pxTCB );
1a0029ba:	6878      	ldr	r0, [r7, #4]
1a0029bc:	f7fe fd24 	bl	1a001408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
1a0029c0:	bf00      	nop
1a0029c2:	3708      	adds	r7, #8
1a0029c4:	46bd      	mov	sp, r7
1a0029c6:	bd80      	pop	{r7, pc}

1a0029c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
1a0029c8:	b480      	push	{r7}
1a0029ca:	b083      	sub	sp, #12
1a0029cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0029ce:	4b0f      	ldr	r3, [pc, #60]	; (1a002a0c <prvResetNextTaskUnblockTime+0x44>)
1a0029d0:	681b      	ldr	r3, [r3, #0]
1a0029d2:	681b      	ldr	r3, [r3, #0]
1a0029d4:	2b00      	cmp	r3, #0
1a0029d6:	d101      	bne.n	1a0029dc <prvResetNextTaskUnblockTime+0x14>
1a0029d8:	2301      	movs	r3, #1
1a0029da:	e000      	b.n	1a0029de <prvResetNextTaskUnblockTime+0x16>
1a0029dc:	2300      	movs	r3, #0
1a0029de:	2b00      	cmp	r3, #0
1a0029e0:	d004      	beq.n	1a0029ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a0029e2:	4b0b      	ldr	r3, [pc, #44]	; (1a002a10 <prvResetNextTaskUnblockTime+0x48>)
1a0029e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0029e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
1a0029ea:	e008      	b.n	1a0029fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0029ec:	4b07      	ldr	r3, [pc, #28]	; (1a002a0c <prvResetNextTaskUnblockTime+0x44>)
1a0029ee:	681b      	ldr	r3, [r3, #0]
1a0029f0:	68db      	ldr	r3, [r3, #12]
1a0029f2:	68db      	ldr	r3, [r3, #12]
1a0029f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0029f6:	687b      	ldr	r3, [r7, #4]
1a0029f8:	685b      	ldr	r3, [r3, #4]
1a0029fa:	4a05      	ldr	r2, [pc, #20]	; (1a002a10 <prvResetNextTaskUnblockTime+0x48>)
1a0029fc:	6013      	str	r3, [r2, #0]
}
1a0029fe:	bf00      	nop
1a002a00:	370c      	adds	r7, #12
1a002a02:	46bd      	mov	sp, r7
1a002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002a08:	4770      	bx	lr
1a002a0a:	bf00      	nop
1a002a0c:	10002ab0 	.word	0x10002ab0
1a002a10:	10002b04 	.word	0x10002b04

1a002a14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
1a002a14:	b580      	push	{r7, lr}
1a002a16:	b084      	sub	sp, #16
1a002a18:	af00      	add	r7, sp, #0
1a002a1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
1a002a1c:	687b      	ldr	r3, [r7, #4]
1a002a1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
1a002a20:	2300      	movs	r3, #0
1a002a22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
1a002a24:	687b      	ldr	r3, [r7, #4]
1a002a26:	2b00      	cmp	r3, #0
1a002a28:	d06e      	beq.n	1a002b08 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a002a2a:	68bb      	ldr	r3, [r7, #8]
1a002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002a2e:	4b39      	ldr	r3, [pc, #228]	; (1a002b14 <xTaskPriorityInherit+0x100>)
1a002a30:	681b      	ldr	r3, [r3, #0]
1a002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002a34:	429a      	cmp	r2, r3
1a002a36:	d25e      	bcs.n	1a002af6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002a38:	68bb      	ldr	r3, [r7, #8]
1a002a3a:	699b      	ldr	r3, [r3, #24]
1a002a3c:	2b00      	cmp	r3, #0
1a002a3e:	db06      	blt.n	1a002a4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002a40:	4b34      	ldr	r3, [pc, #208]	; (1a002b14 <xTaskPriorityInherit+0x100>)
1a002a42:	681b      	ldr	r3, [r3, #0]
1a002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002a46:	f1c3 0207 	rsb	r2, r3, #7
1a002a4a:	68bb      	ldr	r3, [r7, #8]
1a002a4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a002a4e:	68bb      	ldr	r3, [r7, #8]
1a002a50:	6959      	ldr	r1, [r3, #20]
1a002a52:	68bb      	ldr	r3, [r7, #8]
1a002a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002a56:	4613      	mov	r3, r2
1a002a58:	009b      	lsls	r3, r3, #2
1a002a5a:	4413      	add	r3, r2
1a002a5c:	009b      	lsls	r3, r3, #2
1a002a5e:	4a2e      	ldr	r2, [pc, #184]	; (1a002b18 <xTaskPriorityInherit+0x104>)
1a002a60:	4413      	add	r3, r2
1a002a62:	4299      	cmp	r1, r3
1a002a64:	d101      	bne.n	1a002a6a <xTaskPriorityInherit+0x56>
1a002a66:	2301      	movs	r3, #1
1a002a68:	e000      	b.n	1a002a6c <xTaskPriorityInherit+0x58>
1a002a6a:	2300      	movs	r3, #0
1a002a6c:	2b00      	cmp	r3, #0
1a002a6e:	d03a      	beq.n	1a002ae6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002a70:	68bb      	ldr	r3, [r7, #8]
1a002a72:	3304      	adds	r3, #4
1a002a74:	4618      	mov	r0, r3
1a002a76:	f7ff f989 	bl	1a001d8c <uxListRemove>
1a002a7a:	4603      	mov	r3, r0
1a002a7c:	2b00      	cmp	r3, #0
1a002a7e:	d115      	bne.n	1a002aac <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a002a80:	68bb      	ldr	r3, [r7, #8]
1a002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002a84:	4924      	ldr	r1, [pc, #144]	; (1a002b18 <xTaskPriorityInherit+0x104>)
1a002a86:	4613      	mov	r3, r2
1a002a88:	009b      	lsls	r3, r3, #2
1a002a8a:	4413      	add	r3, r2
1a002a8c:	009b      	lsls	r3, r3, #2
1a002a8e:	440b      	add	r3, r1
1a002a90:	681b      	ldr	r3, [r3, #0]
1a002a92:	2b00      	cmp	r3, #0
1a002a94:	d10a      	bne.n	1a002aac <xTaskPriorityInherit+0x98>
1a002a96:	68bb      	ldr	r3, [r7, #8]
1a002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002a9a:	2201      	movs	r2, #1
1a002a9c:	fa02 f303 	lsl.w	r3, r2, r3
1a002aa0:	43da      	mvns	r2, r3
1a002aa2:	4b1e      	ldr	r3, [pc, #120]	; (1a002b1c <xTaskPriorityInherit+0x108>)
1a002aa4:	681b      	ldr	r3, [r3, #0]
1a002aa6:	4013      	ands	r3, r2
1a002aa8:	4a1c      	ldr	r2, [pc, #112]	; (1a002b1c <xTaskPriorityInherit+0x108>)
1a002aaa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002aac:	4b19      	ldr	r3, [pc, #100]	; (1a002b14 <xTaskPriorityInherit+0x100>)
1a002aae:	681b      	ldr	r3, [r3, #0]
1a002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002ab2:	68bb      	ldr	r3, [r7, #8]
1a002ab4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a002ab6:	68bb      	ldr	r3, [r7, #8]
1a002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002aba:	2201      	movs	r2, #1
1a002abc:	409a      	lsls	r2, r3
1a002abe:	4b17      	ldr	r3, [pc, #92]	; (1a002b1c <xTaskPriorityInherit+0x108>)
1a002ac0:	681b      	ldr	r3, [r3, #0]
1a002ac2:	4313      	orrs	r3, r2
1a002ac4:	4a15      	ldr	r2, [pc, #84]	; (1a002b1c <xTaskPriorityInherit+0x108>)
1a002ac6:	6013      	str	r3, [r2, #0]
1a002ac8:	68bb      	ldr	r3, [r7, #8]
1a002aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002acc:	4613      	mov	r3, r2
1a002ace:	009b      	lsls	r3, r3, #2
1a002ad0:	4413      	add	r3, r2
1a002ad2:	009b      	lsls	r3, r3, #2
1a002ad4:	4a10      	ldr	r2, [pc, #64]	; (1a002b18 <xTaskPriorityInherit+0x104>)
1a002ad6:	441a      	add	r2, r3
1a002ad8:	68bb      	ldr	r3, [r7, #8]
1a002ada:	3304      	adds	r3, #4
1a002adc:	4619      	mov	r1, r3
1a002ade:	4610      	mov	r0, r2
1a002ae0:	f7ff f8f7 	bl	1a001cd2 <vListInsertEnd>
1a002ae4:	e004      	b.n	1a002af0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002ae6:	4b0b      	ldr	r3, [pc, #44]	; (1a002b14 <xTaskPriorityInherit+0x100>)
1a002ae8:	681b      	ldr	r3, [r3, #0]
1a002aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002aec:	68bb      	ldr	r3, [r7, #8]
1a002aee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
1a002af0:	2301      	movs	r3, #1
1a002af2:	60fb      	str	r3, [r7, #12]
1a002af4:	e008      	b.n	1a002b08 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a002af6:	68bb      	ldr	r3, [r7, #8]
1a002af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
1a002afa:	4b06      	ldr	r3, [pc, #24]	; (1a002b14 <xTaskPriorityInherit+0x100>)
1a002afc:	681b      	ldr	r3, [r3, #0]
1a002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002b00:	429a      	cmp	r2, r3
1a002b02:	d201      	bcs.n	1a002b08 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
1a002b04:	2301      	movs	r3, #1
1a002b06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
1a002b08:	68fb      	ldr	r3, [r7, #12]
	}
1a002b0a:	4618      	mov	r0, r3
1a002b0c:	3710      	adds	r7, #16
1a002b0e:	46bd      	mov	sp, r7
1a002b10:	bd80      	pop	{r7, pc}
1a002b12:	bf00      	nop
1a002b14:	100029f8 	.word	0x100029f8
1a002b18:	100029fc 	.word	0x100029fc
1a002b1c:	10002aec 	.word	0x10002aec

1a002b20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
1a002b20:	b580      	push	{r7, lr}
1a002b22:	b086      	sub	sp, #24
1a002b24:	af00      	add	r7, sp, #0
1a002b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
1a002b28:	687b      	ldr	r3, [r7, #4]
1a002b2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
1a002b2c:	2300      	movs	r3, #0
1a002b2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
1a002b30:	687b      	ldr	r3, [r7, #4]
1a002b32:	2b00      	cmp	r3, #0
1a002b34:	d06c      	beq.n	1a002c10 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
1a002b36:	4b39      	ldr	r3, [pc, #228]	; (1a002c1c <xTaskPriorityDisinherit+0xfc>)
1a002b38:	681b      	ldr	r3, [r3, #0]
1a002b3a:	693a      	ldr	r2, [r7, #16]
1a002b3c:	429a      	cmp	r2, r3
1a002b3e:	d009      	beq.n	1a002b54 <xTaskPriorityDisinherit+0x34>
1a002b40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b44:	f383 8811 	msr	BASEPRI, r3
1a002b48:	f3bf 8f6f 	isb	sy
1a002b4c:	f3bf 8f4f 	dsb	sy
1a002b50:	60fb      	str	r3, [r7, #12]
1a002b52:	e7fe      	b.n	1a002b52 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
1a002b54:	693b      	ldr	r3, [r7, #16]
1a002b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1a002b58:	2b00      	cmp	r3, #0
1a002b5a:	d109      	bne.n	1a002b70 <xTaskPriorityDisinherit+0x50>
1a002b5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b60:	f383 8811 	msr	BASEPRI, r3
1a002b64:	f3bf 8f6f 	isb	sy
1a002b68:	f3bf 8f4f 	dsb	sy
1a002b6c:	60bb      	str	r3, [r7, #8]
1a002b6e:	e7fe      	b.n	1a002b6e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
1a002b70:	693b      	ldr	r3, [r7, #16]
1a002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1a002b74:	1e5a      	subs	r2, r3, #1
1a002b76:	693b      	ldr	r3, [r7, #16]
1a002b78:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002b7a:	693b      	ldr	r3, [r7, #16]
1a002b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002b7e:	693b      	ldr	r3, [r7, #16]
1a002b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1a002b82:	429a      	cmp	r2, r3
1a002b84:	d044      	beq.n	1a002c10 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a002b86:	693b      	ldr	r3, [r7, #16]
1a002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1a002b8a:	2b00      	cmp	r3, #0
1a002b8c:	d140      	bne.n	1a002c10 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002b8e:	693b      	ldr	r3, [r7, #16]
1a002b90:	3304      	adds	r3, #4
1a002b92:	4618      	mov	r0, r3
1a002b94:	f7ff f8fa 	bl	1a001d8c <uxListRemove>
1a002b98:	4603      	mov	r3, r0
1a002b9a:	2b00      	cmp	r3, #0
1a002b9c:	d115      	bne.n	1a002bca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002b9e:	693b      	ldr	r3, [r7, #16]
1a002ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002ba2:	491f      	ldr	r1, [pc, #124]	; (1a002c20 <xTaskPriorityDisinherit+0x100>)
1a002ba4:	4613      	mov	r3, r2
1a002ba6:	009b      	lsls	r3, r3, #2
1a002ba8:	4413      	add	r3, r2
1a002baa:	009b      	lsls	r3, r3, #2
1a002bac:	440b      	add	r3, r1
1a002bae:	681b      	ldr	r3, [r3, #0]
1a002bb0:	2b00      	cmp	r3, #0
1a002bb2:	d10a      	bne.n	1a002bca <xTaskPriorityDisinherit+0xaa>
1a002bb4:	693b      	ldr	r3, [r7, #16]
1a002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002bb8:	2201      	movs	r2, #1
1a002bba:	fa02 f303 	lsl.w	r3, r2, r3
1a002bbe:	43da      	mvns	r2, r3
1a002bc0:	4b18      	ldr	r3, [pc, #96]	; (1a002c24 <xTaskPriorityDisinherit+0x104>)
1a002bc2:	681b      	ldr	r3, [r3, #0]
1a002bc4:	4013      	ands	r3, r2
1a002bc6:	4a17      	ldr	r2, [pc, #92]	; (1a002c24 <xTaskPriorityDisinherit+0x104>)
1a002bc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a002bca:	693b      	ldr	r3, [r7, #16]
1a002bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
1a002bce:	693b      	ldr	r3, [r7, #16]
1a002bd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002bd2:	693b      	ldr	r3, [r7, #16]
1a002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002bd6:	f1c3 0207 	rsb	r2, r3, #7
1a002bda:	693b      	ldr	r3, [r7, #16]
1a002bdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
1a002bde:	693b      	ldr	r3, [r7, #16]
1a002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002be2:	2201      	movs	r2, #1
1a002be4:	409a      	lsls	r2, r3
1a002be6:	4b0f      	ldr	r3, [pc, #60]	; (1a002c24 <xTaskPriorityDisinherit+0x104>)
1a002be8:	681b      	ldr	r3, [r3, #0]
1a002bea:	4313      	orrs	r3, r2
1a002bec:	4a0d      	ldr	r2, [pc, #52]	; (1a002c24 <xTaskPriorityDisinherit+0x104>)
1a002bee:	6013      	str	r3, [r2, #0]
1a002bf0:	693b      	ldr	r3, [r7, #16]
1a002bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002bf4:	4613      	mov	r3, r2
1a002bf6:	009b      	lsls	r3, r3, #2
1a002bf8:	4413      	add	r3, r2
1a002bfa:	009b      	lsls	r3, r3, #2
1a002bfc:	4a08      	ldr	r2, [pc, #32]	; (1a002c20 <xTaskPriorityDisinherit+0x100>)
1a002bfe:	441a      	add	r2, r3
1a002c00:	693b      	ldr	r3, [r7, #16]
1a002c02:	3304      	adds	r3, #4
1a002c04:	4619      	mov	r1, r3
1a002c06:	4610      	mov	r0, r2
1a002c08:	f7ff f863 	bl	1a001cd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
1a002c0c:	2301      	movs	r3, #1
1a002c0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
1a002c10:	697b      	ldr	r3, [r7, #20]
	}
1a002c12:	4618      	mov	r0, r3
1a002c14:	3718      	adds	r7, #24
1a002c16:	46bd      	mov	sp, r7
1a002c18:	bd80      	pop	{r7, pc}
1a002c1a:	bf00      	nop
1a002c1c:	100029f8 	.word	0x100029f8
1a002c20:	100029fc 	.word	0x100029fc
1a002c24:	10002aec 	.word	0x10002aec

1a002c28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
1a002c28:	b580      	push	{r7, lr}
1a002c2a:	b088      	sub	sp, #32
1a002c2c:	af00      	add	r7, sp, #0
1a002c2e:	6078      	str	r0, [r7, #4]
1a002c30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
1a002c32:	687b      	ldr	r3, [r7, #4]
1a002c34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
1a002c36:	2301      	movs	r3, #1
1a002c38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
1a002c3a:	687b      	ldr	r3, [r7, #4]
1a002c3c:	2b00      	cmp	r3, #0
1a002c3e:	f000 8086 	beq.w	1a002d4e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
1a002c42:	69bb      	ldr	r3, [r7, #24]
1a002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1a002c46:	2b00      	cmp	r3, #0
1a002c48:	d109      	bne.n	1a002c5e <vTaskPriorityDisinheritAfterTimeout+0x36>
1a002c4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c4e:	f383 8811 	msr	BASEPRI, r3
1a002c52:	f3bf 8f6f 	isb	sy
1a002c56:	f3bf 8f4f 	dsb	sy
1a002c5a:	60fb      	str	r3, [r7, #12]
1a002c5c:	e7fe      	b.n	1a002c5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a002c5e:	69bb      	ldr	r3, [r7, #24]
1a002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1a002c62:	683a      	ldr	r2, [r7, #0]
1a002c64:	429a      	cmp	r2, r3
1a002c66:	d902      	bls.n	1a002c6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a002c68:	683b      	ldr	r3, [r7, #0]
1a002c6a:	61fb      	str	r3, [r7, #28]
1a002c6c:	e002      	b.n	1a002c74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
1a002c6e:	69bb      	ldr	r3, [r7, #24]
1a002c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1a002c72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
1a002c74:	69bb      	ldr	r3, [r7, #24]
1a002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002c78:	69fa      	ldr	r2, [r7, #28]
1a002c7a:	429a      	cmp	r2, r3
1a002c7c:	d067      	beq.n	1a002d4e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002c7e:	69bb      	ldr	r3, [r7, #24]
1a002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1a002c82:	697a      	ldr	r2, [r7, #20]
1a002c84:	429a      	cmp	r2, r3
1a002c86:	d162      	bne.n	1a002d4e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
1a002c88:	4b33      	ldr	r3, [pc, #204]	; (1a002d58 <vTaskPriorityDisinheritAfterTimeout+0x130>)
1a002c8a:	681b      	ldr	r3, [r3, #0]
1a002c8c:	69ba      	ldr	r2, [r7, #24]
1a002c8e:	429a      	cmp	r2, r3
1a002c90:	d109      	bne.n	1a002ca6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
1a002c92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c96:	f383 8811 	msr	BASEPRI, r3
1a002c9a:	f3bf 8f6f 	isb	sy
1a002c9e:	f3bf 8f4f 	dsb	sy
1a002ca2:	60bb      	str	r3, [r7, #8]
1a002ca4:	e7fe      	b.n	1a002ca4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
1a002ca6:	69bb      	ldr	r3, [r7, #24]
1a002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002caa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
1a002cac:	69bb      	ldr	r3, [r7, #24]
1a002cae:	69fa      	ldr	r2, [r7, #28]
1a002cb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002cb2:	69bb      	ldr	r3, [r7, #24]
1a002cb4:	699b      	ldr	r3, [r3, #24]
1a002cb6:	2b00      	cmp	r3, #0
1a002cb8:	db04      	blt.n	1a002cc4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002cba:	69fb      	ldr	r3, [r7, #28]
1a002cbc:	f1c3 0207 	rsb	r2, r3, #7
1a002cc0:	69bb      	ldr	r3, [r7, #24]
1a002cc2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a002cc4:	69bb      	ldr	r3, [r7, #24]
1a002cc6:	6959      	ldr	r1, [r3, #20]
1a002cc8:	693a      	ldr	r2, [r7, #16]
1a002cca:	4613      	mov	r3, r2
1a002ccc:	009b      	lsls	r3, r3, #2
1a002cce:	4413      	add	r3, r2
1a002cd0:	009b      	lsls	r3, r3, #2
1a002cd2:	4a22      	ldr	r2, [pc, #136]	; (1a002d5c <vTaskPriorityDisinheritAfterTimeout+0x134>)
1a002cd4:	4413      	add	r3, r2
1a002cd6:	4299      	cmp	r1, r3
1a002cd8:	d101      	bne.n	1a002cde <vTaskPriorityDisinheritAfterTimeout+0xb6>
1a002cda:	2301      	movs	r3, #1
1a002cdc:	e000      	b.n	1a002ce0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
1a002cde:	2300      	movs	r3, #0
1a002ce0:	2b00      	cmp	r3, #0
1a002ce2:	d034      	beq.n	1a002d4e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002ce4:	69bb      	ldr	r3, [r7, #24]
1a002ce6:	3304      	adds	r3, #4
1a002ce8:	4618      	mov	r0, r3
1a002cea:	f7ff f84f 	bl	1a001d8c <uxListRemove>
1a002cee:	4603      	mov	r3, r0
1a002cf0:	2b00      	cmp	r3, #0
1a002cf2:	d115      	bne.n	1a002d20 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002cf4:	69bb      	ldr	r3, [r7, #24]
1a002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002cf8:	4918      	ldr	r1, [pc, #96]	; (1a002d5c <vTaskPriorityDisinheritAfterTimeout+0x134>)
1a002cfa:	4613      	mov	r3, r2
1a002cfc:	009b      	lsls	r3, r3, #2
1a002cfe:	4413      	add	r3, r2
1a002d00:	009b      	lsls	r3, r3, #2
1a002d02:	440b      	add	r3, r1
1a002d04:	681b      	ldr	r3, [r3, #0]
1a002d06:	2b00      	cmp	r3, #0
1a002d08:	d10a      	bne.n	1a002d20 <vTaskPriorityDisinheritAfterTimeout+0xf8>
1a002d0a:	69bb      	ldr	r3, [r7, #24]
1a002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002d0e:	2201      	movs	r2, #1
1a002d10:	fa02 f303 	lsl.w	r3, r2, r3
1a002d14:	43da      	mvns	r2, r3
1a002d16:	4b12      	ldr	r3, [pc, #72]	; (1a002d60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
1a002d18:	681b      	ldr	r3, [r3, #0]
1a002d1a:	4013      	ands	r3, r2
1a002d1c:	4a10      	ldr	r2, [pc, #64]	; (1a002d60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
1a002d1e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
1a002d20:	69bb      	ldr	r3, [r7, #24]
1a002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002d24:	2201      	movs	r2, #1
1a002d26:	409a      	lsls	r2, r3
1a002d28:	4b0d      	ldr	r3, [pc, #52]	; (1a002d60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
1a002d2a:	681b      	ldr	r3, [r3, #0]
1a002d2c:	4313      	orrs	r3, r2
1a002d2e:	4a0c      	ldr	r2, [pc, #48]	; (1a002d60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
1a002d30:	6013      	str	r3, [r2, #0]
1a002d32:	69bb      	ldr	r3, [r7, #24]
1a002d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002d36:	4613      	mov	r3, r2
1a002d38:	009b      	lsls	r3, r3, #2
1a002d3a:	4413      	add	r3, r2
1a002d3c:	009b      	lsls	r3, r3, #2
1a002d3e:	4a07      	ldr	r2, [pc, #28]	; (1a002d5c <vTaskPriorityDisinheritAfterTimeout+0x134>)
1a002d40:	441a      	add	r2, r3
1a002d42:	69bb      	ldr	r3, [r7, #24]
1a002d44:	3304      	adds	r3, #4
1a002d46:	4619      	mov	r1, r3
1a002d48:	4610      	mov	r0, r2
1a002d4a:	f7fe ffc2 	bl	1a001cd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
1a002d4e:	bf00      	nop
1a002d50:	3720      	adds	r7, #32
1a002d52:	46bd      	mov	sp, r7
1a002d54:	bd80      	pop	{r7, pc}
1a002d56:	bf00      	nop
1a002d58:	100029f8 	.word	0x100029f8
1a002d5c:	100029fc 	.word	0x100029fc
1a002d60:	10002aec 	.word	0x10002aec

1a002d64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
1a002d64:	b480      	push	{r7}
1a002d66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
1a002d68:	4b07      	ldr	r3, [pc, #28]	; (1a002d88 <pvTaskIncrementMutexHeldCount+0x24>)
1a002d6a:	681b      	ldr	r3, [r3, #0]
1a002d6c:	2b00      	cmp	r3, #0
1a002d6e:	d004      	beq.n	1a002d7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
1a002d70:	4b05      	ldr	r3, [pc, #20]	; (1a002d88 <pvTaskIncrementMutexHeldCount+0x24>)
1a002d72:	681b      	ldr	r3, [r3, #0]
1a002d74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
1a002d76:	3201      	adds	r2, #1
1a002d78:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
1a002d7a:	4b03      	ldr	r3, [pc, #12]	; (1a002d88 <pvTaskIncrementMutexHeldCount+0x24>)
1a002d7c:	681b      	ldr	r3, [r3, #0]
	}
1a002d7e:	4618      	mov	r0, r3
1a002d80:	46bd      	mov	sp, r7
1a002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002d86:	4770      	bx	lr
1a002d88:	100029f8 	.word	0x100029f8

1a002d8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a002d8c:	b580      	push	{r7, lr}
1a002d8e:	b084      	sub	sp, #16
1a002d90:	af00      	add	r7, sp, #0
1a002d92:	6078      	str	r0, [r7, #4]
1a002d94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a002d96:	4b21      	ldr	r3, [pc, #132]	; (1a002e1c <prvAddCurrentTaskToDelayedList+0x90>)
1a002d98:	681b      	ldr	r3, [r3, #0]
1a002d9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002d9c:	4b20      	ldr	r3, [pc, #128]	; (1a002e20 <prvAddCurrentTaskToDelayedList+0x94>)
1a002d9e:	681b      	ldr	r3, [r3, #0]
1a002da0:	3304      	adds	r3, #4
1a002da2:	4618      	mov	r0, r3
1a002da4:	f7fe fff2 	bl	1a001d8c <uxListRemove>
1a002da8:	4603      	mov	r3, r0
1a002daa:	2b00      	cmp	r3, #0
1a002dac:	d10b      	bne.n	1a002dc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a002dae:	4b1c      	ldr	r3, [pc, #112]	; (1a002e20 <prvAddCurrentTaskToDelayedList+0x94>)
1a002db0:	681b      	ldr	r3, [r3, #0]
1a002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002db4:	2201      	movs	r2, #1
1a002db6:	fa02 f303 	lsl.w	r3, r2, r3
1a002dba:	43da      	mvns	r2, r3
1a002dbc:	4b19      	ldr	r3, [pc, #100]	; (1a002e24 <prvAddCurrentTaskToDelayedList+0x98>)
1a002dbe:	681b      	ldr	r3, [r3, #0]
1a002dc0:	4013      	ands	r3, r2
1a002dc2:	4a18      	ldr	r2, [pc, #96]	; (1a002e24 <prvAddCurrentTaskToDelayedList+0x98>)
1a002dc4:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
1a002dc6:	68fa      	ldr	r2, [r7, #12]
1a002dc8:	687b      	ldr	r3, [r7, #4]
1a002dca:	4413      	add	r3, r2
1a002dcc:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a002dce:	4b14      	ldr	r3, [pc, #80]	; (1a002e20 <prvAddCurrentTaskToDelayedList+0x94>)
1a002dd0:	681b      	ldr	r3, [r3, #0]
1a002dd2:	68ba      	ldr	r2, [r7, #8]
1a002dd4:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
1a002dd6:	68ba      	ldr	r2, [r7, #8]
1a002dd8:	68fb      	ldr	r3, [r7, #12]
1a002dda:	429a      	cmp	r2, r3
1a002ddc:	d209      	bcs.n	1a002df2 <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002dde:	4b12      	ldr	r3, [pc, #72]	; (1a002e28 <prvAddCurrentTaskToDelayedList+0x9c>)
1a002de0:	681a      	ldr	r2, [r3, #0]
1a002de2:	4b0f      	ldr	r3, [pc, #60]	; (1a002e20 <prvAddCurrentTaskToDelayedList+0x94>)
1a002de4:	681b      	ldr	r3, [r3, #0]
1a002de6:	3304      	adds	r3, #4
1a002de8:	4619      	mov	r1, r3
1a002dea:	4610      	mov	r0, r2
1a002dec:	f7fe ff95 	bl	1a001d1a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a002df0:	e010      	b.n	1a002e14 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002df2:	4b0e      	ldr	r3, [pc, #56]	; (1a002e2c <prvAddCurrentTaskToDelayedList+0xa0>)
1a002df4:	681a      	ldr	r2, [r3, #0]
1a002df6:	4b0a      	ldr	r3, [pc, #40]	; (1a002e20 <prvAddCurrentTaskToDelayedList+0x94>)
1a002df8:	681b      	ldr	r3, [r3, #0]
1a002dfa:	3304      	adds	r3, #4
1a002dfc:	4619      	mov	r1, r3
1a002dfe:	4610      	mov	r0, r2
1a002e00:	f7fe ff8b 	bl	1a001d1a <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
1a002e04:	4b0a      	ldr	r3, [pc, #40]	; (1a002e30 <prvAddCurrentTaskToDelayedList+0xa4>)
1a002e06:	681b      	ldr	r3, [r3, #0]
1a002e08:	68ba      	ldr	r2, [r7, #8]
1a002e0a:	429a      	cmp	r2, r3
1a002e0c:	d202      	bcs.n	1a002e14 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
1a002e0e:	4a08      	ldr	r2, [pc, #32]	; (1a002e30 <prvAddCurrentTaskToDelayedList+0xa4>)
1a002e10:	68bb      	ldr	r3, [r7, #8]
1a002e12:	6013      	str	r3, [r2, #0]
}
1a002e14:	bf00      	nop
1a002e16:	3710      	adds	r7, #16
1a002e18:	46bd      	mov	sp, r7
1a002e1a:	bd80      	pop	{r7, pc}
1a002e1c:	10002ae8 	.word	0x10002ae8
1a002e20:	100029f8 	.word	0x100029f8
1a002e24:	10002aec 	.word	0x10002aec
1a002e28:	10002ab4 	.word	0x10002ab4
1a002e2c:	10002ab0 	.word	0x10002ab0
1a002e30:	10002b04 	.word	0x10002b04

1a002e34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
1a002e34:	b480      	push	{r7}
1a002e36:	b085      	sub	sp, #20
1a002e38:	af00      	add	r7, sp, #0
1a002e3a:	60f8      	str	r0, [r7, #12]
1a002e3c:	60b9      	str	r1, [r7, #8]
1a002e3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
1a002e40:	68fb      	ldr	r3, [r7, #12]
1a002e42:	3b04      	subs	r3, #4
1a002e44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002e46:	68fb      	ldr	r3, [r7, #12]
1a002e48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
1a002e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
1a002e4e:	68fb      	ldr	r3, [r7, #12]
1a002e50:	3b04      	subs	r3, #4
1a002e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002e54:	68bb      	ldr	r3, [r7, #8]
1a002e56:	f023 0201 	bic.w	r2, r3, #1
1a002e5a:	68fb      	ldr	r3, [r7, #12]
1a002e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
1a002e5e:	68fb      	ldr	r3, [r7, #12]
1a002e60:	3b04      	subs	r3, #4
1a002e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002e64:	4a0c      	ldr	r2, [pc, #48]	; (1a002e98 <pxPortInitialiseStack+0x64>)
1a002e66:	68fb      	ldr	r3, [r7, #12]
1a002e68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
1a002e6a:	68fb      	ldr	r3, [r7, #12]
1a002e6c:	3b14      	subs	r3, #20
1a002e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002e70:	687a      	ldr	r2, [r7, #4]
1a002e72:	68fb      	ldr	r3, [r7, #12]
1a002e74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
1a002e76:	68fb      	ldr	r3, [r7, #12]
1a002e78:	3b04      	subs	r3, #4
1a002e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002e7c:	68fb      	ldr	r3, [r7, #12]
1a002e7e:	f06f 0202 	mvn.w	r2, #2
1a002e82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
1a002e84:	68fb      	ldr	r3, [r7, #12]
1a002e86:	3b20      	subs	r3, #32
1a002e88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
1a002e8a:	68fb      	ldr	r3, [r7, #12]
}
1a002e8c:	4618      	mov	r0, r3
1a002e8e:	3714      	adds	r7, #20
1a002e90:	46bd      	mov	sp, r7
1a002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002e96:	4770      	bx	lr
1a002e98:	1a002e9d 	.word	0x1a002e9d

1a002e9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002e9c:	b480      	push	{r7}
1a002e9e:	b085      	sub	sp, #20
1a002ea0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
1a002ea2:	2300      	movs	r3, #0
1a002ea4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002ea6:	4b11      	ldr	r3, [pc, #68]	; (1a002eec <prvTaskExitError+0x50>)
1a002ea8:	681b      	ldr	r3, [r3, #0]
1a002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002eae:	d009      	beq.n	1a002ec4 <prvTaskExitError+0x28>
1a002eb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002eb4:	f383 8811 	msr	BASEPRI, r3
1a002eb8:	f3bf 8f6f 	isb	sy
1a002ebc:	f3bf 8f4f 	dsb	sy
1a002ec0:	60fb      	str	r3, [r7, #12]
1a002ec2:	e7fe      	b.n	1a002ec2 <prvTaskExitError+0x26>
1a002ec4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ec8:	f383 8811 	msr	BASEPRI, r3
1a002ecc:	f3bf 8f6f 	isb	sy
1a002ed0:	f3bf 8f4f 	dsb	sy
1a002ed4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002ed6:	bf00      	nop
1a002ed8:	687b      	ldr	r3, [r7, #4]
1a002eda:	2b00      	cmp	r3, #0
1a002edc:	d0fc      	beq.n	1a002ed8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002ede:	bf00      	nop
1a002ee0:	3714      	adds	r7, #20
1a002ee2:	46bd      	mov	sp, r7
1a002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a002ee8:	4770      	bx	lr
1a002eea:	bf00      	nop
1a002eec:	10000000 	.word	0x10000000

1a002ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
1a002ef0:	4b07      	ldr	r3, [pc, #28]	; (1a002f10 <pxCurrentTCBConst2>)
1a002ef2:	6819      	ldr	r1, [r3, #0]
1a002ef4:	6808      	ldr	r0, [r1, #0]
1a002ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002efa:	f380 8809 	msr	PSP, r0
1a002efe:	f3bf 8f6f 	isb	sy
1a002f02:	f04f 0000 	mov.w	r0, #0
1a002f06:	f380 8811 	msr	BASEPRI, r0
1a002f0a:	4770      	bx	lr
1a002f0c:	f3af 8000 	nop.w

1a002f10 <pxCurrentTCBConst2>:
1a002f10:	100029f8 	.word	0x100029f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
1a002f14:	bf00      	nop
1a002f16:	bf00      	nop

1a002f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002f18:	4808      	ldr	r0, [pc, #32]	; (1a002f3c <prvPortStartFirstTask+0x24>)
1a002f1a:	6800      	ldr	r0, [r0, #0]
1a002f1c:	6800      	ldr	r0, [r0, #0]
1a002f1e:	f380 8808 	msr	MSP, r0
1a002f22:	f04f 0000 	mov.w	r0, #0
1a002f26:	f380 8814 	msr	CONTROL, r0
1a002f2a:	b662      	cpsie	i
1a002f2c:	b661      	cpsie	f
1a002f2e:	f3bf 8f4f 	dsb	sy
1a002f32:	f3bf 8f6f 	isb	sy
1a002f36:	df00      	svc	0
1a002f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a002f3a:	bf00      	nop
1a002f3c:	e000ed08 	.word	0xe000ed08

1a002f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
1a002f40:	b580      	push	{r7, lr}
1a002f42:	b088      	sub	sp, #32
1a002f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002f46:	4b4c      	ldr	r3, [pc, #304]	; (1a003078 <xPortStartScheduler+0x138>)
1a002f48:	681b      	ldr	r3, [r3, #0]
1a002f4a:	4a4c      	ldr	r2, [pc, #304]	; (1a00307c <xPortStartScheduler+0x13c>)
1a002f4c:	4293      	cmp	r3, r2
1a002f4e:	d109      	bne.n	1a002f64 <xPortStartScheduler+0x24>
1a002f50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f54:	f383 8811 	msr	BASEPRI, r3
1a002f58:	f3bf 8f6f 	isb	sy
1a002f5c:	f3bf 8f4f 	dsb	sy
1a002f60:	61bb      	str	r3, [r7, #24]
1a002f62:	e7fe      	b.n	1a002f62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002f64:	4b44      	ldr	r3, [pc, #272]	; (1a003078 <xPortStartScheduler+0x138>)
1a002f66:	681b      	ldr	r3, [r3, #0]
1a002f68:	4a45      	ldr	r2, [pc, #276]	; (1a003080 <xPortStartScheduler+0x140>)
1a002f6a:	4293      	cmp	r3, r2
1a002f6c:	d109      	bne.n	1a002f82 <xPortStartScheduler+0x42>
1a002f6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f72:	f383 8811 	msr	BASEPRI, r3
1a002f76:	f3bf 8f6f 	isb	sy
1a002f7a:	f3bf 8f4f 	dsb	sy
1a002f7e:	617b      	str	r3, [r7, #20]
1a002f80:	e7fe      	b.n	1a002f80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
1a002f82:	4b40      	ldr	r3, [pc, #256]	; (1a003084 <xPortStartScheduler+0x144>)
1a002f84:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002f86:	69fb      	ldr	r3, [r7, #28]
1a002f88:	781b      	ldrb	r3, [r3, #0]
1a002f8a:	b2db      	uxtb	r3, r3
1a002f8c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002f8e:	69fb      	ldr	r3, [r7, #28]
1a002f90:	22ff      	movs	r2, #255	; 0xff
1a002f92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002f94:	69fb      	ldr	r3, [r7, #28]
1a002f96:	781b      	ldrb	r3, [r3, #0]
1a002f98:	b2db      	uxtb	r3, r3
1a002f9a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002f9c:	79fb      	ldrb	r3, [r7, #7]
1a002f9e:	b2db      	uxtb	r3, r3
1a002fa0:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
1a002fa4:	b2da      	uxtb	r2, r3
1a002fa6:	4b38      	ldr	r3, [pc, #224]	; (1a003088 <xPortStartScheduler+0x148>)
1a002fa8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002faa:	4b38      	ldr	r3, [pc, #224]	; (1a00308c <xPortStartScheduler+0x14c>)
1a002fac:	2207      	movs	r2, #7
1a002fae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002fb0:	e009      	b.n	1a002fc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
1a002fb2:	4b36      	ldr	r3, [pc, #216]	; (1a00308c <xPortStartScheduler+0x14c>)
1a002fb4:	681b      	ldr	r3, [r3, #0]
1a002fb6:	3b01      	subs	r3, #1
1a002fb8:	4a34      	ldr	r2, [pc, #208]	; (1a00308c <xPortStartScheduler+0x14c>)
1a002fba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002fbc:	79fb      	ldrb	r3, [r7, #7]
1a002fbe:	b2db      	uxtb	r3, r3
1a002fc0:	005b      	lsls	r3, r3, #1
1a002fc2:	b2db      	uxtb	r3, r3
1a002fc4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002fc6:	79fb      	ldrb	r3, [r7, #7]
1a002fc8:	b2db      	uxtb	r3, r3
1a002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a002fce:	2b80      	cmp	r3, #128	; 0x80
1a002fd0:	d0ef      	beq.n	1a002fb2 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002fd2:	4b2e      	ldr	r3, [pc, #184]	; (1a00308c <xPortStartScheduler+0x14c>)
1a002fd4:	681b      	ldr	r3, [r3, #0]
1a002fd6:	f1c3 0307 	rsb	r3, r3, #7
1a002fda:	2b03      	cmp	r3, #3
1a002fdc:	d009      	beq.n	1a002ff2 <xPortStartScheduler+0xb2>
1a002fde:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fe2:	f383 8811 	msr	BASEPRI, r3
1a002fe6:	f3bf 8f6f 	isb	sy
1a002fea:	f3bf 8f4f 	dsb	sy
1a002fee:	613b      	str	r3, [r7, #16]
1a002ff0:	e7fe      	b.n	1a002ff0 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
1a002ff2:	4b26      	ldr	r3, [pc, #152]	; (1a00308c <xPortStartScheduler+0x14c>)
1a002ff4:	681b      	ldr	r3, [r3, #0]
1a002ff6:	f1c3 0307 	rsb	r3, r3, #7
1a002ffa:	2b03      	cmp	r3, #3
1a002ffc:	d009      	beq.n	1a003012 <xPortStartScheduler+0xd2>
1a002ffe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003002:	f383 8811 	msr	BASEPRI, r3
1a003006:	f3bf 8f6f 	isb	sy
1a00300a:	f3bf 8f4f 	dsb	sy
1a00300e:	60fb      	str	r3, [r7, #12]
1a003010:	e7fe      	b.n	1a003010 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a003012:	4b1e      	ldr	r3, [pc, #120]	; (1a00308c <xPortStartScheduler+0x14c>)
1a003014:	681b      	ldr	r3, [r3, #0]
1a003016:	021b      	lsls	r3, r3, #8
1a003018:	4a1c      	ldr	r2, [pc, #112]	; (1a00308c <xPortStartScheduler+0x14c>)
1a00301a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a00301c:	4b1b      	ldr	r3, [pc, #108]	; (1a00308c <xPortStartScheduler+0x14c>)
1a00301e:	681b      	ldr	r3, [r3, #0]
1a003020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a003024:	4a19      	ldr	r2, [pc, #100]	; (1a00308c <xPortStartScheduler+0x14c>)
1a003026:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a003028:	68bb      	ldr	r3, [r7, #8]
1a00302a:	b2da      	uxtb	r2, r3
1a00302c:	69fb      	ldr	r3, [r7, #28]
1a00302e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a003030:	4b17      	ldr	r3, [pc, #92]	; (1a003090 <xPortStartScheduler+0x150>)
1a003032:	681b      	ldr	r3, [r3, #0]
1a003034:	4a16      	ldr	r2, [pc, #88]	; (1a003090 <xPortStartScheduler+0x150>)
1a003036:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
1a00303a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a00303c:	4b14      	ldr	r3, [pc, #80]	; (1a003090 <xPortStartScheduler+0x150>)
1a00303e:	681b      	ldr	r3, [r3, #0]
1a003040:	4a13      	ldr	r2, [pc, #76]	; (1a003090 <xPortStartScheduler+0x150>)
1a003042:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
1a003046:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
1a003048:	f000 f8d6 	bl	1a0031f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
1a00304c:	4b11      	ldr	r3, [pc, #68]	; (1a003094 <xPortStartScheduler+0x154>)
1a00304e:	2200      	movs	r2, #0
1a003050:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
1a003052:	f000 f8f5 	bl	1a003240 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a003056:	4b10      	ldr	r3, [pc, #64]	; (1a003098 <xPortStartScheduler+0x158>)
1a003058:	681b      	ldr	r3, [r3, #0]
1a00305a:	4a0f      	ldr	r2, [pc, #60]	; (1a003098 <xPortStartScheduler+0x158>)
1a00305c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a003060:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
1a003062:	f7ff ff59 	bl	1a002f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
1a003066:	f7ff faa1 	bl	1a0025ac <vTaskSwitchContext>
	prvTaskExitError();
1a00306a:	f7ff ff17 	bl	1a002e9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
1a00306e:	2300      	movs	r3, #0
}
1a003070:	4618      	mov	r0, r3
1a003072:	3720      	adds	r7, #32
1a003074:	46bd      	mov	sp, r7
1a003076:	bd80      	pop	{r7, pc}
1a003078:	e000ed00 	.word	0xe000ed00
1a00307c:	410fc271 	.word	0x410fc271
1a003080:	410fc270 	.word	0x410fc270
1a003084:	e000e400 	.word	0xe000e400
1a003088:	10002b10 	.word	0x10002b10
1a00308c:	10002b14 	.word	0x10002b14
1a003090:	e000ed20 	.word	0xe000ed20
1a003094:	10000000 	.word	0x10000000
1a003098:	e000ef34 	.word	0xe000ef34

1a00309c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
1a00309c:	b480      	push	{r7}
1a00309e:	b083      	sub	sp, #12
1a0030a0:	af00      	add	r7, sp, #0
1a0030a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0030a6:	f383 8811 	msr	BASEPRI, r3
1a0030aa:	f3bf 8f6f 	isb	sy
1a0030ae:	f3bf 8f4f 	dsb	sy
1a0030b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
1a0030b4:	4b0e      	ldr	r3, [pc, #56]	; (1a0030f0 <vPortEnterCritical+0x54>)
1a0030b6:	681b      	ldr	r3, [r3, #0]
1a0030b8:	3301      	adds	r3, #1
1a0030ba:	4a0d      	ldr	r2, [pc, #52]	; (1a0030f0 <vPortEnterCritical+0x54>)
1a0030bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
1a0030be:	4b0c      	ldr	r3, [pc, #48]	; (1a0030f0 <vPortEnterCritical+0x54>)
1a0030c0:	681b      	ldr	r3, [r3, #0]
1a0030c2:	2b01      	cmp	r3, #1
1a0030c4:	d10e      	bne.n	1a0030e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0030c6:	4b0b      	ldr	r3, [pc, #44]	; (1a0030f4 <vPortEnterCritical+0x58>)
1a0030c8:	681b      	ldr	r3, [r3, #0]
1a0030ca:	b2db      	uxtb	r3, r3
1a0030cc:	2b00      	cmp	r3, #0
1a0030ce:	d009      	beq.n	1a0030e4 <vPortEnterCritical+0x48>
1a0030d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0030d4:	f383 8811 	msr	BASEPRI, r3
1a0030d8:	f3bf 8f6f 	isb	sy
1a0030dc:	f3bf 8f4f 	dsb	sy
1a0030e0:	603b      	str	r3, [r7, #0]
1a0030e2:	e7fe      	b.n	1a0030e2 <vPortEnterCritical+0x46>
	}
}
1a0030e4:	bf00      	nop
1a0030e6:	370c      	adds	r7, #12
1a0030e8:	46bd      	mov	sp, r7
1a0030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0030ee:	4770      	bx	lr
1a0030f0:	10000000 	.word	0x10000000
1a0030f4:	e000ed04 	.word	0xe000ed04

1a0030f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
1a0030f8:	b480      	push	{r7}
1a0030fa:	b083      	sub	sp, #12
1a0030fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
1a0030fe:	4b11      	ldr	r3, [pc, #68]	; (1a003144 <vPortExitCritical+0x4c>)
1a003100:	681b      	ldr	r3, [r3, #0]
1a003102:	2b00      	cmp	r3, #0
1a003104:	d109      	bne.n	1a00311a <vPortExitCritical+0x22>
1a003106:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00310a:	f383 8811 	msr	BASEPRI, r3
1a00310e:	f3bf 8f6f 	isb	sy
1a003112:	f3bf 8f4f 	dsb	sy
1a003116:	607b      	str	r3, [r7, #4]
1a003118:	e7fe      	b.n	1a003118 <vPortExitCritical+0x20>
	uxCriticalNesting--;
1a00311a:	4b0a      	ldr	r3, [pc, #40]	; (1a003144 <vPortExitCritical+0x4c>)
1a00311c:	681b      	ldr	r3, [r3, #0]
1a00311e:	3b01      	subs	r3, #1
1a003120:	4a08      	ldr	r2, [pc, #32]	; (1a003144 <vPortExitCritical+0x4c>)
1a003122:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a003124:	4b07      	ldr	r3, [pc, #28]	; (1a003144 <vPortExitCritical+0x4c>)
1a003126:	681b      	ldr	r3, [r3, #0]
1a003128:	2b00      	cmp	r3, #0
1a00312a:	d104      	bne.n	1a003136 <vPortExitCritical+0x3e>
1a00312c:	2300      	movs	r3, #0
1a00312e:	603b      	str	r3, [r7, #0]
	__asm volatile
1a003130:	683b      	ldr	r3, [r7, #0]
1a003132:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
1a003136:	bf00      	nop
1a003138:	370c      	adds	r7, #12
1a00313a:	46bd      	mov	sp, r7
1a00313c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003140:	4770      	bx	lr
1a003142:	bf00      	nop
1a003144:	10000000 	.word	0x10000000
1a003148:	ffffffff 	.word	0xffffffff
1a00314c:	ffffffff 	.word	0xffffffff

1a003150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
1a003150:	f3ef 8009 	mrs	r0, PSP
1a003154:	f3bf 8f6f 	isb	sy
1a003158:	4b15      	ldr	r3, [pc, #84]	; (1a0031b0 <pxCurrentTCBConst>)
1a00315a:	681a      	ldr	r2, [r3, #0]
1a00315c:	f01e 0f10 	tst.w	lr, #16
1a003160:	bf08      	it	eq
1a003162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a003166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00316a:	6010      	str	r0, [r2, #0]
1a00316c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a003170:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a003174:	f380 8811 	msr	BASEPRI, r0
1a003178:	f3bf 8f4f 	dsb	sy
1a00317c:	f3bf 8f6f 	isb	sy
1a003180:	f7ff fa14 	bl	1a0025ac <vTaskSwitchContext>
1a003184:	f04f 0000 	mov.w	r0, #0
1a003188:	f380 8811 	msr	BASEPRI, r0
1a00318c:	bc09      	pop	{r0, r3}
1a00318e:	6819      	ldr	r1, [r3, #0]
1a003190:	6808      	ldr	r0, [r1, #0]
1a003192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003196:	f01e 0f10 	tst.w	lr, #16
1a00319a:	bf08      	it	eq
1a00319c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0031a0:	f380 8809 	msr	PSP, r0
1a0031a4:	f3bf 8f6f 	isb	sy
1a0031a8:	4770      	bx	lr
1a0031aa:	bf00      	nop
1a0031ac:	f3af 8000 	nop.w

1a0031b0 <pxCurrentTCBConst>:
1a0031b0:	100029f8 	.word	0x100029f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
1a0031b4:	bf00      	nop
1a0031b6:	bf00      	nop

1a0031b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
1a0031b8:	b580      	push	{r7, lr}
1a0031ba:	b082      	sub	sp, #8
1a0031bc:	af00      	add	r7, sp, #0
	__asm volatile
1a0031be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0031c2:	f383 8811 	msr	BASEPRI, r3
1a0031c6:	f3bf 8f6f 	isb	sy
1a0031ca:	f3bf 8f4f 	dsb	sy
1a0031ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
1a0031d0:	f7ff f930 	bl	1a002434 <xTaskIncrementTick>
1a0031d4:	4603      	mov	r3, r0
1a0031d6:	2b00      	cmp	r3, #0
1a0031d8:	d003      	beq.n	1a0031e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0031da:	4b06      	ldr	r3, [pc, #24]	; (1a0031f4 <SysTick_Handler+0x3c>)
1a0031dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0031e0:	601a      	str	r2, [r3, #0]
1a0031e2:	2300      	movs	r3, #0
1a0031e4:	603b      	str	r3, [r7, #0]
	__asm volatile
1a0031e6:	683b      	ldr	r3, [r7, #0]
1a0031e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
1a0031ec:	bf00      	nop
1a0031ee:	3708      	adds	r7, #8
1a0031f0:	46bd      	mov	sp, r7
1a0031f2:	bd80      	pop	{r7, pc}
1a0031f4:	e000ed04 	.word	0xe000ed04

1a0031f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
1a0031f8:	b480      	push	{r7}
1a0031fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0031fc:	4b0b      	ldr	r3, [pc, #44]	; (1a00322c <vPortSetupTimerInterrupt+0x34>)
1a0031fe:	2200      	movs	r2, #0
1a003200:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a003202:	4b0b      	ldr	r3, [pc, #44]	; (1a003230 <vPortSetupTimerInterrupt+0x38>)
1a003204:	2200      	movs	r2, #0
1a003206:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a003208:	4b0a      	ldr	r3, [pc, #40]	; (1a003234 <vPortSetupTimerInterrupt+0x3c>)
1a00320a:	681b      	ldr	r3, [r3, #0]
1a00320c:	4a0a      	ldr	r2, [pc, #40]	; (1a003238 <vPortSetupTimerInterrupt+0x40>)
1a00320e:	fba2 2303 	umull	r2, r3, r2, r3
1a003212:	099b      	lsrs	r3, r3, #6
1a003214:	4a09      	ldr	r2, [pc, #36]	; (1a00323c <vPortSetupTimerInterrupt+0x44>)
1a003216:	3b01      	subs	r3, #1
1a003218:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00321a:	4b04      	ldr	r3, [pc, #16]	; (1a00322c <vPortSetupTimerInterrupt+0x34>)
1a00321c:	2207      	movs	r2, #7
1a00321e:	601a      	str	r2, [r3, #0]
}
1a003220:	bf00      	nop
1a003222:	46bd      	mov	sp, r7
1a003224:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003228:	4770      	bx	lr
1a00322a:	bf00      	nop
1a00322c:	e000e010 	.word	0xe000e010
1a003230:	e000e018 	.word	0xe000e018
1a003234:	10002bc0 	.word	0x10002bc0
1a003238:	10624dd3 	.word	0x10624dd3
1a00323c:	e000e014 	.word	0xe000e014

1a003240 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a003240:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a003250 <vPortEnableVFP+0x10>
1a003244:	6801      	ldr	r1, [r0, #0]
1a003246:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00324a:	6001      	str	r1, [r0, #0]
1a00324c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a00324e:	bf00      	nop
1a003250:	e000ed88 	.word	0xe000ed88

1a003254 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
1a003254:	b480      	push	{r7}
1a003256:	b085      	sub	sp, #20
1a003258:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a00325a:	f3ef 8305 	mrs	r3, IPSR
1a00325e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a003260:	68fb      	ldr	r3, [r7, #12]
1a003262:	2b0f      	cmp	r3, #15
1a003264:	d913      	bls.n	1a00328e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a003266:	4a16      	ldr	r2, [pc, #88]	; (1a0032c0 <vPortValidateInterruptPriority+0x6c>)
1a003268:	68fb      	ldr	r3, [r7, #12]
1a00326a:	4413      	add	r3, r2
1a00326c:	781b      	ldrb	r3, [r3, #0]
1a00326e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a003270:	4b14      	ldr	r3, [pc, #80]	; (1a0032c4 <vPortValidateInterruptPriority+0x70>)
1a003272:	781b      	ldrb	r3, [r3, #0]
1a003274:	7afa      	ldrb	r2, [r7, #11]
1a003276:	429a      	cmp	r2, r3
1a003278:	d209      	bcs.n	1a00328e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
1a00327a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00327e:	f383 8811 	msr	BASEPRI, r3
1a003282:	f3bf 8f6f 	isb	sy
1a003286:	f3bf 8f4f 	dsb	sy
1a00328a:	607b      	str	r3, [r7, #4]
1a00328c:	e7fe      	b.n	1a00328c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a00328e:	4b0e      	ldr	r3, [pc, #56]	; (1a0032c8 <vPortValidateInterruptPriority+0x74>)
1a003290:	681b      	ldr	r3, [r3, #0]
1a003292:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
1a003296:	4b0d      	ldr	r3, [pc, #52]	; (1a0032cc <vPortValidateInterruptPriority+0x78>)
1a003298:	681b      	ldr	r3, [r3, #0]
1a00329a:	429a      	cmp	r2, r3
1a00329c:	d909      	bls.n	1a0032b2 <vPortValidateInterruptPriority+0x5e>
1a00329e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0032a2:	f383 8811 	msr	BASEPRI, r3
1a0032a6:	f3bf 8f6f 	isb	sy
1a0032aa:	f3bf 8f4f 	dsb	sy
1a0032ae:	603b      	str	r3, [r7, #0]
1a0032b0:	e7fe      	b.n	1a0032b0 <vPortValidateInterruptPriority+0x5c>
	}
1a0032b2:	bf00      	nop
1a0032b4:	3714      	adds	r7, #20
1a0032b6:	46bd      	mov	sp, r7
1a0032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0032bc:	4770      	bx	lr
1a0032be:	bf00      	nop
1a0032c0:	e000e3f0 	.word	0xe000e3f0
1a0032c4:	10002b10 	.word	0x10002b10
1a0032c8:	e000ed0c 	.word	0xe000ed0c
1a0032cc:	10002b14 	.word	0x10002b14

1a0032d0 <__NVIC_ClearPendingIRQ>:
{
1a0032d0:	b480      	push	{r7}
1a0032d2:	b083      	sub	sp, #12
1a0032d4:	af00      	add	r7, sp, #0
1a0032d6:	4603      	mov	r3, r0
1a0032d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
1a0032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a0032de:	2b00      	cmp	r3, #0
1a0032e0:	db0c      	blt.n	1a0032fc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0032e2:	79fb      	ldrb	r3, [r7, #7]
1a0032e4:	f003 021f 	and.w	r2, r3, #31
1a0032e8:	4907      	ldr	r1, [pc, #28]	; (1a003308 <__NVIC_ClearPendingIRQ+0x38>)
1a0032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a0032ee:	095b      	lsrs	r3, r3, #5
1a0032f0:	2001      	movs	r0, #1
1a0032f2:	fa00 f202 	lsl.w	r2, r0, r2
1a0032f6:	3360      	adds	r3, #96	; 0x60
1a0032f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a0032fc:	bf00      	nop
1a0032fe:	370c      	adds	r7, #12
1a003300:	46bd      	mov	sp, r7
1a003302:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003306:	4770      	bx	lr
1a003308:	e000e100 	.word	0xe000e100

1a00330c <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a00330c:	b580      	push	{r7, lr}
1a00330e:	af00      	add	r7, sp, #0
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );
1a003310:	2000      	movs	r0, #0
1a003312:	f7ff ffdd 	bl	1a0032d0 <__NVIC_ClearPendingIRQ>

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a003316:	4b04      	ldr	r3, [pc, #16]	; (1a003328 <DAC_IRQHandler+0x1c>)
1a003318:	681b      	ldr	r3, [r3, #0]
1a00331a:	2b00      	cmp	r3, #0
1a00331c:	d002      	beq.n	1a003324 <DAC_IRQHandler+0x18>
      (* freeRtosInterruptCallback )();
1a00331e:	4b02      	ldr	r3, [pc, #8]	; (1a003328 <DAC_IRQHandler+0x1c>)
1a003320:	681b      	ldr	r3, [r3, #0]
1a003322:	4798      	blx	r3
   }
}
1a003324:	bf00      	nop
1a003326:	bd80      	pop	{r7, pc}
1a003328:	10002b18 	.word	0x10002b18

1a00332c <Chip_SCU_I2C0PinConfig>:
 *                  - I2C0_STANDARD_FAST_MODE: Standard/Fast mode transmit
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
1a00332c:	b480      	push	{r7}
1a00332e:	b083      	sub	sp, #12
1a003330:	af00      	add	r7, sp, #0
1a003332:	6078      	str	r0, [r7, #4]
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003334:	4a04      	ldr	r2, [pc, #16]	; (1a003348 <Chip_SCU_I2C0PinConfig+0x1c>)
1a003336:	687b      	ldr	r3, [r7, #4]
1a003338:	f8c2 3c84 	str.w	r3, [r2, #3204]	; 0xc84
}
1a00333c:	bf00      	nop
1a00333e:	370c      	adds	r7, #12
1a003340:	46bd      	mov	sp, r7
1a003342:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003346:	4770      	bx	lr
1a003348:	40086000 	.word	0x40086000

1a00334c <Chip_GPIO_SetPinState>:
 * @param	setting	: true for high, false for low
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
1a00334c:	b480      	push	{r7}
1a00334e:	b083      	sub	sp, #12
1a003350:	af00      	add	r7, sp, #0
1a003352:	6078      	str	r0, [r7, #4]
1a003354:	4608      	mov	r0, r1
1a003356:	4611      	mov	r1, r2
1a003358:	461a      	mov	r2, r3
1a00335a:	4603      	mov	r3, r0
1a00335c:	70fb      	strb	r3, [r7, #3]
1a00335e:	460b      	mov	r3, r1
1a003360:	70bb      	strb	r3, [r7, #2]
1a003362:	4613      	mov	r3, r2
1a003364:	707b      	strb	r3, [r7, #1]
	pGPIO->B[port][pin] = setting;
1a003366:	78fa      	ldrb	r2, [r7, #3]
1a003368:	78bb      	ldrb	r3, [r7, #2]
1a00336a:	7878      	ldrb	r0, [r7, #1]
1a00336c:	6879      	ldr	r1, [r7, #4]
1a00336e:	0152      	lsls	r2, r2, #5
1a003370:	440a      	add	r2, r1
1a003372:	4413      	add	r3, r2
1a003374:	4602      	mov	r2, r0
1a003376:	701a      	strb	r2, [r3, #0]
}
1a003378:	bf00      	nop
1a00337a:	370c      	adds	r7, #12
1a00337c:	46bd      	mov	sp, r7
1a00337e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003382:	4770      	bx	lr

1a003384 <Chip_GPIO_SetPinDIROutput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a003384:	b480      	push	{r7}
1a003386:	b083      	sub	sp, #12
1a003388:	af00      	add	r7, sp, #0
1a00338a:	6078      	str	r0, [r7, #4]
1a00338c:	460b      	mov	r3, r1
1a00338e:	70fb      	strb	r3, [r7, #3]
1a003390:	4613      	mov	r3, r2
1a003392:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] |= 1UL << pin;
1a003394:	78fa      	ldrb	r2, [r7, #3]
1a003396:	687b      	ldr	r3, [r7, #4]
1a003398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00339c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a0033a0:	78bb      	ldrb	r3, [r7, #2]
1a0033a2:	2201      	movs	r2, #1
1a0033a4:	fa02 f303 	lsl.w	r3, r2, r3
1a0033a8:	78fa      	ldrb	r2, [r7, #3]
1a0033aa:	4319      	orrs	r1, r3
1a0033ac:	687b      	ldr	r3, [r7, #4]
1a0033ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0033b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0033b6:	bf00      	nop
1a0033b8:	370c      	adds	r7, #12
1a0033ba:	46bd      	mov	sp, r7
1a0033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0033c0:	4770      	bx	lr

1a0033c2 <Chip_GPIO_SetPinDIRInput>:
 * @param	port	: GPIO Port number where @a pin is located
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
1a0033c2:	b480      	push	{r7}
1a0033c4:	b083      	sub	sp, #12
1a0033c6:	af00      	add	r7, sp, #0
1a0033c8:	6078      	str	r0, [r7, #4]
1a0033ca:	460b      	mov	r3, r1
1a0033cc:	70fb      	strb	r3, [r7, #3]
1a0033ce:	4613      	mov	r3, r2
1a0033d0:	70bb      	strb	r3, [r7, #2]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0033d2:	78fa      	ldrb	r2, [r7, #3]
1a0033d4:	687b      	ldr	r3, [r7, #4]
1a0033d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0033da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a0033de:	78bb      	ldrb	r3, [r7, #2]
1a0033e0:	2201      	movs	r2, #1
1a0033e2:	fa02 f303 	lsl.w	r3, r2, r3
1a0033e6:	43db      	mvns	r3, r3
1a0033e8:	78fa      	ldrb	r2, [r7, #3]
1a0033ea:	4019      	ands	r1, r3
1a0033ec:	687b      	ldr	r3, [r7, #4]
1a0033ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0033f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a0033f6:	bf00      	nop
1a0033f8:	370c      	adds	r7, #12
1a0033fa:	46bd      	mov	sp, r7
1a0033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003400:	4770      	bx	lr

1a003402 <Chip_SSP_Enable>:
 * @brief	Enable SSP operation
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
1a003402:	b480      	push	{r7}
1a003404:	b083      	sub	sp, #12
1a003406:	af00      	add	r7, sp, #0
1a003408:	6078      	str	r0, [r7, #4]
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00340a:	687b      	ldr	r3, [r7, #4]
1a00340c:	685b      	ldr	r3, [r3, #4]
1a00340e:	f043 0202 	orr.w	r2, r3, #2
1a003412:	687b      	ldr	r3, [r7, #4]
1a003414:	605a      	str	r2, [r3, #4]
}
1a003416:	bf00      	nop
1a003418:	370c      	adds	r7, #12
1a00341a:	46bd      	mov	sp, r7
1a00341c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003420:	4770      	bx	lr

1a003422 <Chip_SSP_SetFormat>:
 *							- SSP_CLOCK_CPHA1_CPOL1
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
1a003422:	b480      	push	{r7}
1a003424:	b085      	sub	sp, #20
1a003426:	af00      	add	r7, sp, #0
1a003428:	60f8      	str	r0, [r7, #12]
1a00342a:	60b9      	str	r1, [r7, #8]
1a00342c:	607a      	str	r2, [r7, #4]
1a00342e:	603b      	str	r3, [r7, #0]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003430:	68fb      	ldr	r3, [r7, #12]
1a003432:	681b      	ldr	r3, [r3, #0]
1a003434:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
1a003438:	68bb      	ldr	r3, [r7, #8]
1a00343a:	431a      	orrs	r2, r3
1a00343c:	687b      	ldr	r3, [r7, #4]
1a00343e:	431a      	orrs	r2, r3
1a003440:	683b      	ldr	r3, [r7, #0]
1a003442:	431a      	orrs	r2, r3
1a003444:	68fb      	ldr	r3, [r7, #12]
1a003446:	601a      	str	r2, [r3, #0]
}
1a003448:	bf00      	nop
1a00344a:	3714      	adds	r7, #20
1a00344c:	46bd      	mov	sp, r7
1a00344e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003452:	4770      	bx	lr

1a003454 <Chip_SSP_Set_Mode>:
 *						- SSP_MODE_MASTER
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
1a003454:	b480      	push	{r7}
1a003456:	b083      	sub	sp, #12
1a003458:	af00      	add	r7, sp, #0
1a00345a:	6078      	str	r0, [r7, #4]
1a00345c:	6039      	str	r1, [r7, #0]
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00345e:	687b      	ldr	r3, [r7, #4]
1a003460:	685b      	ldr	r3, [r3, #4]
1a003462:	f023 0204 	bic.w	r2, r3, #4
1a003466:	683b      	ldr	r3, [r7, #0]
1a003468:	431a      	orrs	r2, r3
1a00346a:	687b      	ldr	r3, [r7, #4]
1a00346c:	605a      	str	r2, [r3, #4]
}
1a00346e:	bf00      	nop
1a003470:	370c      	adds	r7, #12
1a003472:	46bd      	mov	sp, r7
1a003474:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003478:	4770      	bx	lr

1a00347a <Chip_UART_TXEnable>:
 * @brief	Enable transmission on UART TxD pin
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
1a00347a:	b480      	push	{r7}
1a00347c:	b083      	sub	sp, #12
1a00347e:	af00      	add	r7, sp, #0
1a003480:	6078      	str	r0, [r7, #4]
    pUART->TER2 = UART_TER2_TXEN;
1a003482:	687b      	ldr	r3, [r7, #4]
1a003484:	2201      	movs	r2, #1
1a003486:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a003488:	bf00      	nop
1a00348a:	370c      	adds	r7, #12
1a00348c:	46bd      	mov	sp, r7
1a00348e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003492:	4770      	bx	lr

1a003494 <Chip_UART_SendByte>:
 * @return	Nothing
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
1a003494:	b480      	push	{r7}
1a003496:	b083      	sub	sp, #12
1a003498:	af00      	add	r7, sp, #0
1a00349a:	6078      	str	r0, [r7, #4]
1a00349c:	460b      	mov	r3, r1
1a00349e:	70fb      	strb	r3, [r7, #3]
	pUART->THR = (uint32_t) data;
1a0034a0:	78fa      	ldrb	r2, [r7, #3]
1a0034a2:	687b      	ldr	r3, [r7, #4]
1a0034a4:	601a      	str	r2, [r3, #0]
}
1a0034a6:	bf00      	nop
1a0034a8:	370c      	adds	r7, #12
1a0034aa:	46bd      	mov	sp, r7
1a0034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0034b0:	4770      	bx	lr

1a0034b2 <Chip_UART_ReadByte>:
 * @note	This function reads a byte from the UART receive FIFO or
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
1a0034b2:	b480      	push	{r7}
1a0034b4:	b083      	sub	sp, #12
1a0034b6:	af00      	add	r7, sp, #0
1a0034b8:	6078      	str	r0, [r7, #4]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0034ba:	687b      	ldr	r3, [r7, #4]
1a0034bc:	681b      	ldr	r3, [r3, #0]
1a0034be:	b2db      	uxtb	r3, r3
}
1a0034c0:	4618      	mov	r0, r3
1a0034c2:	370c      	adds	r7, #12
1a0034c4:	46bd      	mov	sp, r7
1a0034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0034ca:	4770      	bx	lr

1a0034cc <Chip_UART_ConfigData>:
 *			definitions. For example, a configuration of 8 data bits, 1
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
1a0034cc:	b480      	push	{r7}
1a0034ce:	b083      	sub	sp, #12
1a0034d0:	af00      	add	r7, sp, #0
1a0034d2:	6078      	str	r0, [r7, #4]
1a0034d4:	6039      	str	r1, [r7, #0]
	pUART->LCR = config;
1a0034d6:	687b      	ldr	r3, [r7, #4]
1a0034d8:	683a      	ldr	r2, [r7, #0]
1a0034da:	60da      	str	r2, [r3, #12]
}
1a0034dc:	bf00      	nop
1a0034de:	370c      	adds	r7, #12
1a0034e0:	46bd      	mov	sp, r7
1a0034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0034e6:	4770      	bx	lr

1a0034e8 <Chip_UART_ReadLineStatus>:
 * @return	Line Status register (status)
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
1a0034e8:	b480      	push	{r7}
1a0034ea:	b083      	sub	sp, #12
1a0034ec:	af00      	add	r7, sp, #0
1a0034ee:	6078      	str	r0, [r7, #4]
	return pUART->LSR;
1a0034f0:	687b      	ldr	r3, [r7, #4]
1a0034f2:	695b      	ldr	r3, [r3, #20]
}
1a0034f4:	4618      	mov	r0, r3
1a0034f6:	370c      	adds	r7, #12
1a0034f8:	46bd      	mov	sp, r7
1a0034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0034fe:	4770      	bx	lr

1a003500 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a003500:	b580      	push	{r7, lr}
1a003502:	b082      	sub	sp, #8
1a003504:	af00      	add	r7, sp, #0
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003506:	2300      	movs	r3, #0
1a003508:	607b      	str	r3, [r7, #4]
1a00350a:	e017      	b.n	1a00353c <Board_LED_Init+0x3c>
      const struct gpio_t *io = &GpioLeds[i];
1a00350c:	687b      	ldr	r3, [r7, #4]
1a00350e:	005b      	lsls	r3, r3, #1
1a003510:	4a0e      	ldr	r2, [pc, #56]	; (1a00354c <Board_LED_Init+0x4c>)
1a003512:	4413      	add	r3, r2
1a003514:	603b      	str	r3, [r7, #0]
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a003516:	683b      	ldr	r3, [r7, #0]
1a003518:	7819      	ldrb	r1, [r3, #0]
1a00351a:	683b      	ldr	r3, [r7, #0]
1a00351c:	785b      	ldrb	r3, [r3, #1]
1a00351e:	461a      	mov	r2, r3
1a003520:	480b      	ldr	r0, [pc, #44]	; (1a003550 <Board_LED_Init+0x50>)
1a003522:	f7ff ff2f 	bl	1a003384 <Chip_GPIO_SetPinDIROutput>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
1a003526:	683b      	ldr	r3, [r7, #0]
1a003528:	7819      	ldrb	r1, [r3, #0]
1a00352a:	683b      	ldr	r3, [r7, #0]
1a00352c:	785a      	ldrb	r2, [r3, #1]
1a00352e:	2300      	movs	r3, #0
1a003530:	4807      	ldr	r0, [pc, #28]	; (1a003550 <Board_LED_Init+0x50>)
1a003532:	f7ff ff0b 	bl	1a00334c <Chip_GPIO_SetPinState>
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003536:	687b      	ldr	r3, [r7, #4]
1a003538:	3301      	adds	r3, #1
1a00353a:	607b      	str	r3, [r7, #4]
1a00353c:	687b      	ldr	r3, [r7, #4]
1a00353e:	2b05      	cmp	r3, #5
1a003540:	d9e4      	bls.n	1a00350c <Board_LED_Init+0xc>
   }
}
1a003542:	bf00      	nop
1a003544:	3708      	adds	r7, #8
1a003546:	46bd      	mov	sp, r7
1a003548:	bd80      	pop	{r7, pc}
1a00354a:	bf00      	nop
1a00354c:	1a00af18 	.word	0x1a00af18
1a003550:	400f4000 	.word	0x400f4000

1a003554 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a003554:	b580      	push	{r7, lr}
1a003556:	b082      	sub	sp, #8
1a003558:	af00      	add	r7, sp, #0
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00355a:	2300      	movs	r3, #0
1a00355c:	607b      	str	r3, [r7, #4]
1a00355e:	e00f      	b.n	1a003580 <Board_TEC_Init+0x2c>
      const struct gpio_t *io = &GpioButtons[i];
1a003560:	687b      	ldr	r3, [r7, #4]
1a003562:	005b      	lsls	r3, r3, #1
1a003564:	4a0a      	ldr	r2, [pc, #40]	; (1a003590 <Board_TEC_Init+0x3c>)
1a003566:	4413      	add	r3, r2
1a003568:	603b      	str	r3, [r7, #0]
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00356a:	683b      	ldr	r3, [r7, #0]
1a00356c:	7819      	ldrb	r1, [r3, #0]
1a00356e:	683b      	ldr	r3, [r7, #0]
1a003570:	785b      	ldrb	r3, [r3, #1]
1a003572:	461a      	mov	r2, r3
1a003574:	4807      	ldr	r0, [pc, #28]	; (1a003594 <Board_TEC_Init+0x40>)
1a003576:	f7ff ff24 	bl	1a0033c2 <Chip_GPIO_SetPinDIRInput>
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00357a:	687b      	ldr	r3, [r7, #4]
1a00357c:	3301      	adds	r3, #1
1a00357e:	607b      	str	r3, [r7, #4]
1a003580:	687b      	ldr	r3, [r7, #4]
1a003582:	2b03      	cmp	r3, #3
1a003584:	d9ec      	bls.n	1a003560 <Board_TEC_Init+0xc>
   }
}
1a003586:	bf00      	nop
1a003588:	3708      	adds	r7, #8
1a00358a:	46bd      	mov	sp, r7
1a00358c:	bd80      	pop	{r7, pc}
1a00358e:	bf00      	nop
1a003590:	1a00af24 	.word	0x1a00af24
1a003594:	400f4000 	.word	0x400f4000

1a003598 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a003598:	b580      	push	{r7, lr}
1a00359a:	b082      	sub	sp, #8
1a00359c:	af00      	add	r7, sp, #0
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00359e:	2300      	movs	r3, #0
1a0035a0:	607b      	str	r3, [r7, #4]
1a0035a2:	e00f      	b.n	1a0035c4 <Board_GPIO_Init+0x2c>
      const struct gpio_t *io = &GpioPorts[i];
1a0035a4:	687b      	ldr	r3, [r7, #4]
1a0035a6:	005b      	lsls	r3, r3, #1
1a0035a8:	4a0a      	ldr	r2, [pc, #40]	; (1a0035d4 <Board_GPIO_Init+0x3c>)
1a0035aa:	4413      	add	r3, r2
1a0035ac:	603b      	str	r3, [r7, #0]
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0035ae:	683b      	ldr	r3, [r7, #0]
1a0035b0:	7819      	ldrb	r1, [r3, #0]
1a0035b2:	683b      	ldr	r3, [r7, #0]
1a0035b4:	785b      	ldrb	r3, [r3, #1]
1a0035b6:	461a      	mov	r2, r3
1a0035b8:	4807      	ldr	r0, [pc, #28]	; (1a0035d8 <Board_GPIO_Init+0x40>)
1a0035ba:	f7ff ff02 	bl	1a0033c2 <Chip_GPIO_SetPinDIRInput>
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0035be:	687b      	ldr	r3, [r7, #4]
1a0035c0:	3301      	adds	r3, #1
1a0035c2:	607b      	str	r3, [r7, #4]
1a0035c4:	687b      	ldr	r3, [r7, #4]
1a0035c6:	2b08      	cmp	r3, #8
1a0035c8:	d9ec      	bls.n	1a0035a4 <Board_GPIO_Init+0xc>
   }
}
1a0035ca:	bf00      	nop
1a0035cc:	3708      	adds	r7, #8
1a0035ce:	46bd      	mov	sp, r7
1a0035d0:	bd80      	pop	{r7, pc}
1a0035d2:	bf00      	nop
1a0035d4:	1a00af2c 	.word	0x1a00af2c
1a0035d8:	400f4000 	.word	0x400f4000

1a0035dc <Board_I2C_Init>:


static void Board_I2C_Init()
{
1a0035dc:	b580      	push	{r7, lr}
1a0035de:	af00      	add	r7, sp, #0
   Chip_I2C_Init(I2C0);
1a0035e0:	2000      	movs	r0, #0
1a0035e2:	f000 f9cb 	bl	1a00397c <Chip_I2C_Init>
   Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
1a0035e6:	f640 0008 	movw	r0, #2056	; 0x808
1a0035ea:	f7ff fe9f 	bl	1a00332c <Chip_SCU_I2C0PinConfig>
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0035ee:	4903      	ldr	r1, [pc, #12]	; (1a0035fc <Board_I2C_Init+0x20>)
1a0035f0:	2000      	movs	r0, #0
1a0035f2:	f000 f9dd 	bl	1a0039b0 <Chip_I2C_SetClockRate>
}
1a0035f6:	bf00      	nop
1a0035f8:	bd80      	pop	{r7, pc}
1a0035fa:	bf00      	nop
1a0035fc:	000f4240 	.word	0x000f4240

1a003600 <Board_SPI_Init>:


static void Board_SPI_Init()
{
1a003600:	b580      	push	{r7, lr}
1a003602:	af00      	add	r7, sp, #0
   Chip_SSP_Init(LPC_SSP1);
1a003604:	480a      	ldr	r0, [pc, #40]	; (1a003630 <Board_SPI_Init+0x30>)
1a003606:	f001 fb05 	bl	1a004c14 <Chip_SSP_Init>
   Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
1a00360a:	2100      	movs	r1, #0
1a00360c:	4808      	ldr	r0, [pc, #32]	; (1a003630 <Board_SPI_Init+0x30>)
1a00360e:	f7ff ff21 	bl	1a003454 <Chip_SSP_Set_Mode>
   Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
1a003612:	2300      	movs	r3, #0
1a003614:	2200      	movs	r2, #0
1a003616:	2107      	movs	r1, #7
1a003618:	4805      	ldr	r0, [pc, #20]	; (1a003630 <Board_SPI_Init+0x30>)
1a00361a:	f7ff ff02 	bl	1a003422 <Chip_SSP_SetFormat>
                      BOARD_SPI_POLARITY);
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00361e:	4905      	ldr	r1, [pc, #20]	; (1a003634 <Board_SPI_Init+0x34>)
1a003620:	4803      	ldr	r0, [pc, #12]	; (1a003630 <Board_SPI_Init+0x30>)
1a003622:	f001 fabc 	bl	1a004b9e <Chip_SSP_SetBitRate>
   Chip_SSP_Enable(LPC_SSP1);
1a003626:	4802      	ldr	r0, [pc, #8]	; (1a003630 <Board_SPI_Init+0x30>)
1a003628:	f7ff feeb 	bl	1a003402 <Chip_SSP_Enable>
}
1a00362c:	bf00      	nop
1a00362e:	bd80      	pop	{r7, pc}
1a003630:	400c5000 	.word	0x400c5000
1a003634:	000186a0 	.word	0x000186a0

1a003638 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a003638:	b580      	push	{r7, lr}
1a00363a:	b082      	sub	sp, #8
1a00363c:	af00      	add	r7, sp, #0
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00363e:	463b      	mov	r3, r7
1a003640:	4619      	mov	r1, r3
1a003642:	4809      	ldr	r0, [pc, #36]	; (1a003668 <Board_ADC_Init+0x30>)
1a003644:	f000 fbc6 	bl	1a003dd4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a003648:	463b      	mov	r3, r7
1a00364a:	4a08      	ldr	r2, [pc, #32]	; (1a00366c <Board_ADC_Init+0x34>)
1a00364c:	4619      	mov	r1, r3
1a00364e:	4806      	ldr	r0, [pc, #24]	; (1a003668 <Board_ADC_Init+0x30>)
1a003650:	f000 fc04 	bl	1a003e5c <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003654:	463b      	mov	r3, r7
1a003656:	2200      	movs	r2, #0
1a003658:	4619      	mov	r1, r3
1a00365a:	4803      	ldr	r0, [pc, #12]	; (1a003668 <Board_ADC_Init+0x30>)
1a00365c:	f000 fc30 	bl	1a003ec0 <Chip_ADC_SetResolution>
}
1a003660:	bf00      	nop
1a003662:	3708      	adds	r7, #8
1a003664:	46bd      	mov	sp, r7
1a003666:	bd80      	pop	{r7, pc}
1a003668:	400e3000 	.word	0x400e3000
1a00366c:	00061a80 	.word	0x00061a80

1a003670 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003670:	b580      	push	{r7, lr}
1a003672:	af00      	add	r7, sp, #0
   Chip_UART_Init(DEBUG_UART);
1a003674:	4808      	ldr	r0, [pc, #32]	; (1a003698 <Board_Debug_Init+0x28>)
1a003676:	f000 fa61 	bl	1a003b3c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00367a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00367e:	4806      	ldr	r0, [pc, #24]	; (1a003698 <Board_Debug_Init+0x28>)
1a003680:	f000 faa0 	bl	1a003bc4 <Chip_UART_SetBaudFDR>
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
1a003684:	2103      	movs	r1, #3
1a003686:	4804      	ldr	r0, [pc, #16]	; (1a003698 <Board_Debug_Init+0x28>)
1a003688:	f7ff ff20 	bl	1a0034cc <Chip_UART_ConfigData>
   Chip_UART_TXEnable(DEBUG_UART);
1a00368c:	4802      	ldr	r0, [pc, #8]	; (1a003698 <Board_Debug_Init+0x28>)
1a00368e:	f7ff fef4 	bl	1a00347a <Chip_UART_TXEnable>
}
1a003692:	bf00      	nop
1a003694:	bd80      	pop	{r7, pc}
1a003696:	bf00      	nop
1a003698:	400c1000 	.word	0x400c1000

1a00369c <Board_UARTPutChar>:


void Board_UARTPutChar(char ch)
{
1a00369c:	b580      	push	{r7, lr}
1a00369e:	b082      	sub	sp, #8
1a0036a0:	af00      	add	r7, sp, #0
1a0036a2:	4603      	mov	r3, r0
1a0036a4:	71fb      	strb	r3, [r7, #7]
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0036a6:	bf00      	nop
1a0036a8:	4808      	ldr	r0, [pc, #32]	; (1a0036cc <Board_UARTPutChar+0x30>)
1a0036aa:	f7ff ff1d 	bl	1a0034e8 <Chip_UART_ReadLineStatus>
1a0036ae:	4603      	mov	r3, r0
1a0036b0:	f003 0320 	and.w	r3, r3, #32
1a0036b4:	2b00      	cmp	r3, #0
1a0036b6:	d0f7      	beq.n	1a0036a8 <Board_UARTPutChar+0xc>
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
1a0036b8:	79fb      	ldrb	r3, [r7, #7]
1a0036ba:	4619      	mov	r1, r3
1a0036bc:	4803      	ldr	r0, [pc, #12]	; (1a0036cc <Board_UARTPutChar+0x30>)
1a0036be:	f7ff fee9 	bl	1a003494 <Chip_UART_SendByte>
}
1a0036c2:	bf00      	nop
1a0036c4:	3708      	adds	r7, #8
1a0036c6:	46bd      	mov	sp, r7
1a0036c8:	bd80      	pop	{r7, pc}
1a0036ca:	bf00      	nop
1a0036cc:	400c1000 	.word	0x400c1000

1a0036d0 <Board_UARTGetChar>:


int Board_UARTGetChar(void)
{
1a0036d0:	b580      	push	{r7, lr}
1a0036d2:	af00      	add	r7, sp, #0
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0036d4:	4808      	ldr	r0, [pc, #32]	; (1a0036f8 <Board_UARTGetChar+0x28>)
1a0036d6:	f7ff ff07 	bl	1a0034e8 <Chip_UART_ReadLineStatus>
1a0036da:	4603      	mov	r3, r0
1a0036dc:	f003 0301 	and.w	r3, r3, #1
1a0036e0:	2b00      	cmp	r3, #0
1a0036e2:	d004      	beq.n	1a0036ee <Board_UARTGetChar+0x1e>
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0036e4:	4804      	ldr	r0, [pc, #16]	; (1a0036f8 <Board_UARTGetChar+0x28>)
1a0036e6:	f7ff fee4 	bl	1a0034b2 <Chip_UART_ReadByte>
1a0036ea:	4603      	mov	r3, r0
1a0036ec:	e001      	b.n	1a0036f2 <Board_UARTGetChar+0x22>
   }
   return EOF;
1a0036ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
1a0036f2:	4618      	mov	r0, r3
1a0036f4:	bd80      	pop	{r7, pc}
1a0036f6:	bf00      	nop
1a0036f8:	400c1000 	.word	0x400c1000

1a0036fc <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0036fc:	b580      	push	{r7, lr}
1a0036fe:	af00      	add	r7, sp, #0
   DEBUGINIT();
1a003700:	f7ff ffb6 	bl	1a003670 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a003704:	4809      	ldr	r0, [pc, #36]	; (1a00372c <Board_Init+0x30>)
1a003706:	f001 f8e1 	bl	1a0048cc <Chip_GPIO_Init>

   Board_GPIO_Init();
1a00370a:	f7ff ff45 	bl	1a003598 <Board_GPIO_Init>
   Board_ADC_Init();
1a00370e:	f7ff ff93 	bl	1a003638 <Board_ADC_Init>
   Board_SPI_Init();
1a003712:	f7ff ff75 	bl	1a003600 <Board_SPI_Init>
   Board_I2C_Init();
1a003716:	f7ff ff61 	bl	1a0035dc <Board_I2C_Init>

   Board_LED_Init();
1a00371a:	f7ff fef1 	bl	1a003500 <Board_LED_Init>
   Board_TEC_Init();
1a00371e:	f7ff ff19 	bl	1a003554 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a003722:	f000 fbe3 	bl	1a003eec <SystemCoreClockUpdate>
}
1a003726:	bf00      	nop
1a003728:	bd80      	pop	{r7, pc}
1a00372a:	bf00      	nop
1a00372c:	400f4000 	.word	0x400f4000

1a003730 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a003730:	b580      	push	{r7, lr}
1a003732:	b082      	sub	sp, #8
1a003734:	af00      	add	r7, sp, #0
1a003736:	6078      	str	r0, [r7, #4]
   Board_UARTPutChar(c);
1a003738:	687b      	ldr	r3, [r7, #4]
1a00373a:	b2db      	uxtb	r3, r3
1a00373c:	4618      	mov	r0, r3
1a00373e:	f7ff ffad 	bl	1a00369c <Board_UARTPutChar>
}
1a003742:	bf00      	nop
1a003744:	3708      	adds	r7, #8
1a003746:	46bd      	mov	sp, r7
1a003748:	bd80      	pop	{r7, pc}

1a00374a <__stdio_getchar>:

int __stdio_getchar()
{
1a00374a:	b580      	push	{r7, lr}
1a00374c:	af00      	add	r7, sp, #0
   return Board_UARTGetChar();;
1a00374e:	f7ff ffbf 	bl	1a0036d0 <Board_UARTGetChar>
1a003752:	4603      	mov	r3, r0
}
1a003754:	4618      	mov	r0, r3
1a003756:	bd80      	pop	{r7, pc}

1a003758 <__stdio_init>:

void __stdio_init()
{
1a003758:	b580      	push	{r7, lr}
1a00375a:	af00      	add	r7, sp, #0
   Board_Debug_Init();
1a00375c:	f7ff ff88 	bl	1a003670 <Board_Debug_Init>
1a003760:	bf00      	nop
1a003762:	bd80      	pop	{r7, pc}

1a003764 <Chip_SCU_PinMuxSet>:
{
1a003764:	b480      	push	{r7}
1a003766:	b083      	sub	sp, #12
1a003768:	af00      	add	r7, sp, #0
1a00376a:	4603      	mov	r3, r0
1a00376c:	71fb      	strb	r3, [r7, #7]
1a00376e:	460b      	mov	r3, r1
1a003770:	71bb      	strb	r3, [r7, #6]
1a003772:	4613      	mov	r3, r2
1a003774:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003776:	4807      	ldr	r0, [pc, #28]	; (1a003794 <Chip_SCU_PinMuxSet+0x30>)
1a003778:	79f9      	ldrb	r1, [r7, #7]
1a00377a:	79bb      	ldrb	r3, [r7, #6]
1a00377c:	88ba      	ldrh	r2, [r7, #4]
1a00377e:	0149      	lsls	r1, r1, #5
1a003780:	440b      	add	r3, r1
1a003782:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a003786:	bf00      	nop
1a003788:	370c      	adds	r7, #12
1a00378a:	46bd      	mov	sp, r7
1a00378c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003790:	4770      	bx	lr
1a003792:	bf00      	nop
1a003794:	40086000 	.word	0x40086000

1a003798 <Chip_SCU_SetPinMuxing>:
 * @param	pinArray    : Pointer to array of pin mux selections
 * @param	arrayLength : Number of entries in pinArray
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
1a003798:	b580      	push	{r7, lr}
1a00379a:	b084      	sub	sp, #16
1a00379c:	af00      	add	r7, sp, #0
1a00379e:	6078      	str	r0, [r7, #4]
1a0037a0:	6039      	str	r1, [r7, #0]
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0037a2:	2300      	movs	r3, #0
1a0037a4:	60fb      	str	r3, [r7, #12]
1a0037a6:	e014      	b.n	1a0037d2 <Chip_SCU_SetPinMuxing+0x3a>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0037a8:	68fb      	ldr	r3, [r7, #12]
1a0037aa:	009b      	lsls	r3, r3, #2
1a0037ac:	687a      	ldr	r2, [r7, #4]
1a0037ae:	4413      	add	r3, r2
1a0037b0:	7818      	ldrb	r0, [r3, #0]
1a0037b2:	68fb      	ldr	r3, [r7, #12]
1a0037b4:	009b      	lsls	r3, r3, #2
1a0037b6:	687a      	ldr	r2, [r7, #4]
1a0037b8:	4413      	add	r3, r2
1a0037ba:	7859      	ldrb	r1, [r3, #1]
1a0037bc:	68fb      	ldr	r3, [r7, #12]
1a0037be:	009b      	lsls	r3, r3, #2
1a0037c0:	687a      	ldr	r2, [r7, #4]
1a0037c2:	4413      	add	r3, r2
1a0037c4:	885b      	ldrh	r3, [r3, #2]
1a0037c6:	461a      	mov	r2, r3
1a0037c8:	f7ff ffcc 	bl	1a003764 <Chip_SCU_PinMuxSet>
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0037cc:	68fb      	ldr	r3, [r7, #12]
1a0037ce:	3301      	adds	r3, #1
1a0037d0:	60fb      	str	r3, [r7, #12]
1a0037d2:	68fa      	ldr	r2, [r7, #12]
1a0037d4:	683b      	ldr	r3, [r7, #0]
1a0037d6:	429a      	cmp	r2, r3
1a0037d8:	d3e6      	bcc.n	1a0037a8 <Chip_SCU_SetPinMuxing+0x10>
	}
}
1a0037da:	bf00      	nop
1a0037dc:	3710      	adds	r7, #16
1a0037de:	46bd      	mov	sp, r7
1a0037e0:	bd80      	pop	{r7, pc}
1a0037e2:	Address 0x000000001a0037e2 is out of bounds.


1a0037e4 <Chip_CREG_SetFlashAcceleration>:
 * This function should be called with the higher frequency before the clock frequency is
 * increased and it should be called with the new lower value after the clock frequency is
 * decreased.
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
1a0037e4:	b480      	push	{r7}
1a0037e6:	b085      	sub	sp, #20
1a0037e8:	af00      	add	r7, sp, #0
1a0037ea:	6078      	str	r0, [r7, #4]
	uint32_t FAValue = Hz / 21510000;
1a0037ec:	687b      	ldr	r3, [r7, #4]
1a0037ee:	4a10      	ldr	r2, [pc, #64]	; (1a003830 <Chip_CREG_SetFlashAcceleration+0x4c>)
1a0037f0:	fba2 2303 	umull	r2, r3, r2, r3
1a0037f4:	0ddb      	lsrs	r3, r3, #23
1a0037f6:	60fb      	str	r3, [r7, #12]

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0037f8:	4b0e      	ldr	r3, [pc, #56]	; (1a003834 <Chip_CREG_SetFlashAcceleration+0x50>)
1a0037fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1a0037fe:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
1a003802:	68fb      	ldr	r3, [r7, #12]
1a003804:	031b      	lsls	r3, r3, #12
1a003806:	490b      	ldr	r1, [pc, #44]	; (1a003834 <Chip_CREG_SetFlashAcceleration+0x50>)
1a003808:	4313      	orrs	r3, r2
1a00380a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00380e:	4b09      	ldr	r3, [pc, #36]	; (1a003834 <Chip_CREG_SetFlashAcceleration+0x50>)
1a003810:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
1a003814:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
1a003818:	68fb      	ldr	r3, [r7, #12]
1a00381a:	031b      	lsls	r3, r3, #12
1a00381c:	4905      	ldr	r1, [pc, #20]	; (1a003834 <Chip_CREG_SetFlashAcceleration+0x50>)
1a00381e:	4313      	orrs	r3, r2
1a003820:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
}
1a003824:	bf00      	nop
1a003826:	3714      	adds	r7, #20
1a003828:	46bd      	mov	sp, r7
1a00382a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00382e:	4770      	bx	lr
1a003830:	63d6267d 	.word	0x63d6267d
1a003834:	40043000 	.word	0x40043000

1a003838 <Board_SetupMuxing>:
    #endif
};


void Board_SetupMuxing(void)
{
1a003838:	b580      	push	{r7, lr}
1a00383a:	af00      	add	r7, sp, #0
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
1a00383c:	211d      	movs	r1, #29
1a00383e:	4802      	ldr	r0, [pc, #8]	; (1a003848 <Board_SetupMuxing+0x10>)
1a003840:	f7ff ffaa 	bl	1a003798 <Chip_SCU_SetPinMuxing>
}
1a003844:	bf00      	nop
1a003846:	bd80      	pop	{r7, pc}
1a003848:	1a00af44 	.word	0x1a00af44

1a00384c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00384c:	b580      	push	{r7, lr}
1a00384e:	b082      	sub	sp, #8
1a003850:	af00      	add	r7, sp, #0
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
1a003852:	4818      	ldr	r0, [pc, #96]	; (1a0038b4 <Board_SetupClocking+0x68>)
1a003854:	f7ff ffc6 	bl	1a0037e4 <Chip_CREG_SetFlashAcceleration>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003858:	2201      	movs	r2, #1
1a00385a:	4916      	ldr	r1, [pc, #88]	; (1a0038b4 <Board_SetupClocking+0x68>)
1a00385c:	2006      	movs	r0, #6
1a00385e:	f001 f885 	bl	1a00496c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003862:	2300      	movs	r3, #0
1a003864:	607b      	str	r3, [r7, #4]
1a003866:	e011      	b.n	1a00388c <Board_SetupClocking+0x40>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
1a003868:	687b      	ldr	r3, [r7, #4]
1a00386a:	009b      	lsls	r3, r3, #2
1a00386c:	4a12      	ldr	r2, [pc, #72]	; (1a0038b8 <Board_SetupClocking+0x6c>)
1a00386e:	4413      	add	r3, r2
1a003870:	603b      	str	r3, [r7, #0]
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003872:	683b      	ldr	r3, [r7, #0]
1a003874:	7818      	ldrb	r0, [r3, #0]
1a003876:	683b      	ldr	r3, [r7, #0]
1a003878:	7859      	ldrb	r1, [r3, #1]
1a00387a:	683b      	ldr	r3, [r7, #0]
1a00387c:	789a      	ldrb	r2, [r3, #2]
1a00387e:	683b      	ldr	r3, [r7, #0]
1a003880:	78db      	ldrb	r3, [r3, #3]
1a003882:	f000 fefd 	bl	1a004680 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003886:	687b      	ldr	r3, [r7, #4]
1a003888:	3301      	adds	r3, #1
1a00388a:	607b      	str	r3, [r7, #4]
1a00388c:	687b      	ldr	r3, [r7, #4]
1a00388e:	2b00      	cmp	r3, #0
1a003890:	d0ea      	beq.n	1a003868 <Board_SetupClocking+0x1c>
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a003892:	4b0a      	ldr	r3, [pc, #40]	; (1a0038bc <Board_SetupClocking+0x70>)
1a003894:	685b      	ldr	r3, [r3, #4]
1a003896:	4a09      	ldr	r2, [pc, #36]	; (1a0038bc <Board_SetupClocking+0x70>)
1a003898:	f023 030c 	bic.w	r3, r3, #12
1a00389c:	6053      	str	r3, [r2, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00389e:	4b07      	ldr	r3, [pc, #28]	; (1a0038bc <Board_SetupClocking+0x70>)
1a0038a0:	685b      	ldr	r3, [r3, #4]
1a0038a2:	4a06      	ldr	r2, [pc, #24]	; (1a0038bc <Board_SetupClocking+0x70>)
1a0038a4:	f043 0303 	orr.w	r3, r3, #3
1a0038a8:	6053      	str	r3, [r2, #4]
}
1a0038aa:	bf00      	nop
1a0038ac:	3708      	adds	r7, #8
1a0038ae:	46bd      	mov	sp, r7
1a0038b0:	bd80      	pop	{r7, pc}
1a0038b2:	bf00      	nop
1a0038b4:	0c28cb00 	.word	0x0c28cb00
1a0038b8:	1a00af40 	.word	0x1a00af40
1a0038bc:	40043000 	.word	0x40043000

1a0038c0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0038c0:	b580      	push	{r7, lr}
1a0038c2:	af00      	add	r7, sp, #0
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0038c4:	f7ff ffb8 	bl	1a003838 <Board_SetupMuxing>
    Board_SetupClocking();
1a0038c8:	f7ff ffc0 	bl	1a00384c <Board_SetupClocking>
}
1a0038cc:	bf00      	nop
1a0038ce:	bd80      	pop	{r7, pc}

1a0038d0 <enableClk>:
/*****************************************************************************
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
1a0038d0:	b580      	push	{r7, lr}
1a0038d2:	b082      	sub	sp, #8
1a0038d4:	af00      	add	r7, sp, #0
1a0038d6:	4603      	mov	r3, r0
1a0038d8:	71fb      	strb	r3, [r7, #7]
	Chip_Clock_Enable(i2c[id].clk);
1a0038da:	79fa      	ldrb	r2, [r7, #7]
1a0038dc:	4907      	ldr	r1, [pc, #28]	; (1a0038fc <enableClk+0x2c>)
1a0038de:	4613      	mov	r3, r2
1a0038e0:	00db      	lsls	r3, r3, #3
1a0038e2:	1a9b      	subs	r3, r3, r2
1a0038e4:	009b      	lsls	r3, r3, #2
1a0038e6:	440b      	add	r3, r1
1a0038e8:	3304      	adds	r3, #4
1a0038ea:	881b      	ldrh	r3, [r3, #0]
1a0038ec:	4618      	mov	r0, r3
1a0038ee:	f000 ff79 	bl	1a0047e4 <Chip_Clock_Enable>
}
1a0038f2:	bf00      	nop
1a0038f4:	3708      	adds	r7, #8
1a0038f6:	46bd      	mov	sp, r7
1a0038f8:	bd80      	pop	{r7, pc}
1a0038fa:	bf00      	nop
1a0038fc:	10000004 	.word	0x10000004

1a003900 <getClkRate>:
	Chip_Clock_Disable(i2c[id].clk);
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
1a003900:	b580      	push	{r7, lr}
1a003902:	b082      	sub	sp, #8
1a003904:	af00      	add	r7, sp, #0
1a003906:	4603      	mov	r3, r0
1a003908:	71fb      	strb	r3, [r7, #7]
	return Chip_Clock_GetRate(i2c[id].clk);
1a00390a:	79fa      	ldrb	r2, [r7, #7]
1a00390c:	4907      	ldr	r1, [pc, #28]	; (1a00392c <getClkRate+0x2c>)
1a00390e:	4613      	mov	r3, r2
1a003910:	00db      	lsls	r3, r3, #3
1a003912:	1a9b      	subs	r3, r3, r2
1a003914:	009b      	lsls	r3, r3, #2
1a003916:	440b      	add	r3, r1
1a003918:	3304      	adds	r3, #4
1a00391a:	881b      	ldrh	r3, [r3, #0]
1a00391c:	4618      	mov	r0, r3
1a00391e:	f000 ff91 	bl	1a004844 <Chip_Clock_GetRate>
1a003922:	4603      	mov	r3, r0
}
1a003924:	4618      	mov	r0, r3
1a003926:	3708      	adds	r7, #8
1a003928:	46bd      	mov	sp, r7
1a00392a:	bd80      	pop	{r7, pc}
1a00392c:	10000004 	.word	0x10000004

1a003930 <Chip_I2C_EventHandler>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Chip event handler interrupt based */
void Chip_I2C_EventHandler(I2C_ID_T id, I2C_EVENT_T event)
{
1a003930:	b480      	push	{r7}
1a003932:	b085      	sub	sp, #20
1a003934:	af00      	add	r7, sp, #0
1a003936:	4603      	mov	r3, r0
1a003938:	460a      	mov	r2, r1
1a00393a:	71fb      	strb	r3, [r7, #7]
1a00393c:	4613      	mov	r3, r2
1a00393e:	71bb      	strb	r3, [r7, #6]
	struct i2c_interface *iic = &i2c[id];
1a003940:	79fa      	ldrb	r2, [r7, #7]
1a003942:	4613      	mov	r3, r2
1a003944:	00db      	lsls	r3, r3, #3
1a003946:	1a9b      	subs	r3, r3, r2
1a003948:	009b      	lsls	r3, r3, #2
1a00394a:	4a0b      	ldr	r2, [pc, #44]	; (1a003978 <Chip_I2C_EventHandler+0x48>)
1a00394c:	4413      	add	r3, r2
1a00394e:	60fb      	str	r3, [r7, #12]
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003950:	79bb      	ldrb	r3, [r7, #6]
1a003952:	2b01      	cmp	r3, #1
1a003954:	d10a      	bne.n	1a00396c <Chip_I2C_EventHandler+0x3c>
		return;
	}

	stat = &iic->mXfer->status;
1a003956:	68fb      	ldr	r3, [r7, #12]
1a003958:	691b      	ldr	r3, [r3, #16]
1a00395a:	3314      	adds	r3, #20
1a00395c:	60bb      	str	r3, [r7, #8]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a00395e:	bf00      	nop
1a003960:	68bb      	ldr	r3, [r7, #8]
1a003962:	781b      	ldrb	r3, [r3, #0]
1a003964:	b2db      	uxtb	r3, r3
1a003966:	2b04      	cmp	r3, #4
1a003968:	d0fa      	beq.n	1a003960 <Chip_I2C_EventHandler+0x30>
1a00396a:	e000      	b.n	1a00396e <Chip_I2C_EventHandler+0x3e>
		return;
1a00396c:	bf00      	nop
}
1a00396e:	3714      	adds	r7, #20
1a003970:	46bd      	mov	sp, r7
1a003972:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003976:	4770      	bx	lr
1a003978:	10000004 	.word	0x10000004

1a00397c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00397c:	b580      	push	{r7, lr}
1a00397e:	b082      	sub	sp, #8
1a003980:	af00      	add	r7, sp, #0
1a003982:	4603      	mov	r3, r0
1a003984:	71fb      	strb	r3, [r7, #7]
	enableClk(id);
1a003986:	79fb      	ldrb	r3, [r7, #7]
1a003988:	4618      	mov	r0, r3
1a00398a:	f7ff ffa1 	bl	1a0038d0 <enableClk>

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a00398e:	79fa      	ldrb	r2, [r7, #7]
1a003990:	4906      	ldr	r1, [pc, #24]	; (1a0039ac <Chip_I2C_Init+0x30>)
1a003992:	4613      	mov	r3, r2
1a003994:	00db      	lsls	r3, r3, #3
1a003996:	1a9b      	subs	r3, r3, r2
1a003998:	009b      	lsls	r3, r3, #2
1a00399a:	440b      	add	r3, r1
1a00399c:	681b      	ldr	r3, [r3, #0]
1a00399e:	226c      	movs	r2, #108	; 0x6c
1a0039a0:	619a      	str	r2, [r3, #24]
}
1a0039a2:	bf00      	nop
1a0039a4:	3708      	adds	r7, #8
1a0039a6:	46bd      	mov	sp, r7
1a0039a8:	bd80      	pop	{r7, pc}
1a0039aa:	bf00      	nop
1a0039ac:	10000004 	.word	0x10000004

1a0039b0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0039b0:	b580      	push	{r7, lr}
1a0039b2:	b084      	sub	sp, #16
1a0039b4:	af00      	add	r7, sp, #0
1a0039b6:	4603      	mov	r3, r0
1a0039b8:	6039      	str	r1, [r7, #0]
1a0039ba:	71fb      	strb	r3, [r7, #7]
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0039bc:	79fb      	ldrb	r3, [r7, #7]
1a0039be:	4618      	mov	r0, r3
1a0039c0:	f7ff ff9e 	bl	1a003900 <getClkRate>
1a0039c4:	4602      	mov	r2, r0
1a0039c6:	683b      	ldr	r3, [r7, #0]
1a0039c8:	fbb2 f3f3 	udiv	r3, r2, r3
1a0039cc:	60fb      	str	r3, [r7, #12]
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0039ce:	79fa      	ldrb	r2, [r7, #7]
1a0039d0:	4910      	ldr	r1, [pc, #64]	; (1a003a14 <Chip_I2C_SetClockRate+0x64>)
1a0039d2:	4613      	mov	r3, r2
1a0039d4:	00db      	lsls	r3, r3, #3
1a0039d6:	1a9b      	subs	r3, r3, r2
1a0039d8:	009b      	lsls	r3, r3, #2
1a0039da:	440b      	add	r3, r1
1a0039dc:	681b      	ldr	r3, [r3, #0]
1a0039de:	68fa      	ldr	r2, [r7, #12]
1a0039e0:	0852      	lsrs	r2, r2, #1
1a0039e2:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0039e4:	79fa      	ldrb	r2, [r7, #7]
1a0039e6:	490b      	ldr	r1, [pc, #44]	; (1a003a14 <Chip_I2C_SetClockRate+0x64>)
1a0039e8:	4613      	mov	r3, r2
1a0039ea:	00db      	lsls	r3, r3, #3
1a0039ec:	1a9b      	subs	r3, r3, r2
1a0039ee:	009b      	lsls	r3, r3, #2
1a0039f0:	440b      	add	r3, r1
1a0039f2:	681b      	ldr	r3, [r3, #0]
1a0039f4:	6919      	ldr	r1, [r3, #16]
1a0039f6:	79fa      	ldrb	r2, [r7, #7]
1a0039f8:	4806      	ldr	r0, [pc, #24]	; (1a003a14 <Chip_I2C_SetClockRate+0x64>)
1a0039fa:	4613      	mov	r3, r2
1a0039fc:	00db      	lsls	r3, r3, #3
1a0039fe:	1a9b      	subs	r3, r3, r2
1a003a00:	009b      	lsls	r3, r3, #2
1a003a02:	4403      	add	r3, r0
1a003a04:	681b      	ldr	r3, [r3, #0]
1a003a06:	68fa      	ldr	r2, [r7, #12]
1a003a08:	1a52      	subs	r2, r2, r1
1a003a0a:	615a      	str	r2, [r3, #20]
}
1a003a0c:	bf00      	nop
1a003a0e:	3710      	adds	r7, #16
1a003a10:	46bd      	mov	sp, r7
1a003a12:	bd80      	pop	{r7, pc}
1a003a14:	10000004 	.word	0x10000004

1a003a18 <Chip_UART_TXDisable>:
{
1a003a18:	b480      	push	{r7}
1a003a1a:	b083      	sub	sp, #12
1a003a1c:	af00      	add	r7, sp, #0
1a003a1e:	6078      	str	r0, [r7, #4]
    pUART->TER2 = 0;
1a003a20:	687b      	ldr	r3, [r7, #4]
1a003a22:	2200      	movs	r2, #0
1a003a24:	65da      	str	r2, [r3, #92]	; 0x5c
}
1a003a26:	bf00      	nop
1a003a28:	370c      	adds	r7, #12
1a003a2a:	46bd      	mov	sp, r7
1a003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003a30:	4770      	bx	lr

1a003a32 <Chip_UART_SetupFIFOS>:
{
1a003a32:	b480      	push	{r7}
1a003a34:	b083      	sub	sp, #12
1a003a36:	af00      	add	r7, sp, #0
1a003a38:	6078      	str	r0, [r7, #4]
1a003a3a:	6039      	str	r1, [r7, #0]
	pUART->FCR = fcr;
1a003a3c:	687b      	ldr	r3, [r7, #4]
1a003a3e:	683a      	ldr	r2, [r7, #0]
1a003a40:	609a      	str	r2, [r3, #8]
}
1a003a42:	bf00      	nop
1a003a44:	370c      	adds	r7, #12
1a003a46:	46bd      	mov	sp, r7
1a003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003a4c:	4770      	bx	lr

1a003a4e <Chip_UART_ConfigData>:
{
1a003a4e:	b480      	push	{r7}
1a003a50:	b083      	sub	sp, #12
1a003a52:	af00      	add	r7, sp, #0
1a003a54:	6078      	str	r0, [r7, #4]
1a003a56:	6039      	str	r1, [r7, #0]
	pUART->LCR = config;
1a003a58:	687b      	ldr	r3, [r7, #4]
1a003a5a:	683a      	ldr	r2, [r7, #0]
1a003a5c:	60da      	str	r2, [r3, #12]
}
1a003a5e:	bf00      	nop
1a003a60:	370c      	adds	r7, #12
1a003a62:	46bd      	mov	sp, r7
1a003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003a68:	4770      	bx	lr

1a003a6a <Chip_UART_EnableDivisorAccess>:
{
1a003a6a:	b480      	push	{r7}
1a003a6c:	b083      	sub	sp, #12
1a003a6e:	af00      	add	r7, sp, #0
1a003a70:	6078      	str	r0, [r7, #4]
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003a72:	687b      	ldr	r3, [r7, #4]
1a003a74:	68db      	ldr	r3, [r3, #12]
1a003a76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
1a003a7a:	687b      	ldr	r3, [r7, #4]
1a003a7c:	60da      	str	r2, [r3, #12]
}
1a003a7e:	bf00      	nop
1a003a80:	370c      	adds	r7, #12
1a003a82:	46bd      	mov	sp, r7
1a003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003a88:	4770      	bx	lr

1a003a8a <Chip_UART_DisableDivisorAccess>:
{
1a003a8a:	b480      	push	{r7}
1a003a8c:	b083      	sub	sp, #12
1a003a8e:	af00      	add	r7, sp, #0
1a003a90:	6078      	str	r0, [r7, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003a92:	687b      	ldr	r3, [r7, #4]
1a003a94:	68db      	ldr	r3, [r3, #12]
1a003a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
1a003a9a:	687b      	ldr	r3, [r7, #4]
1a003a9c:	60da      	str	r2, [r3, #12]
}
1a003a9e:	bf00      	nop
1a003aa0:	370c      	adds	r7, #12
1a003aa2:	46bd      	mov	sp, r7
1a003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003aa8:	4770      	bx	lr

1a003aaa <Chip_UART_SetDivisorLatches>:
{
1a003aaa:	b480      	push	{r7}
1a003aac:	b083      	sub	sp, #12
1a003aae:	af00      	add	r7, sp, #0
1a003ab0:	6078      	str	r0, [r7, #4]
1a003ab2:	460b      	mov	r3, r1
1a003ab4:	70fb      	strb	r3, [r7, #3]
1a003ab6:	4613      	mov	r3, r2
1a003ab8:	70bb      	strb	r3, [r7, #2]
	pUART->DLL = (uint32_t) dll;
1a003aba:	78fa      	ldrb	r2, [r7, #3]
1a003abc:	687b      	ldr	r3, [r7, #4]
1a003abe:	601a      	str	r2, [r3, #0]
	pUART->DLM = (uint32_t) dlm;
1a003ac0:	78ba      	ldrb	r2, [r7, #2]
1a003ac2:	687b      	ldr	r3, [r7, #4]
1a003ac4:	605a      	str	r2, [r3, #4]
}
1a003ac6:	bf00      	nop
1a003ac8:	370c      	adds	r7, #12
1a003aca:	46bd      	mov	sp, r7
1a003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003ad0:	4770      	bx	lr
1a003ad2:	Address 0x000000001a003ad2 is out of bounds.


1a003ad4 <Chip_UART_GetIndex>:
/* UART Bus clocks */
static const CHIP_CCU_CLK_T UART_BClock[] = {CLK_APB0_UART0, CLK_APB0_UART1, CLK_APB2_UART2, CLK_APB2_UART3};

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
1a003ad4:	b480      	push	{r7}
1a003ad6:	b085      	sub	sp, #20
1a003ad8:	af00      	add	r7, sp, #0
1a003ada:	6078      	str	r0, [r7, #4]
	uint32_t base = (uint32_t) pUART;
1a003adc:	687b      	ldr	r3, [r7, #4]
1a003ade:	60fb      	str	r3, [r7, #12]
	switch(base) {
1a003ae0:	68fb      	ldr	r3, [r7, #12]
1a003ae2:	4a12      	ldr	r2, [pc, #72]	; (1a003b2c <Chip_UART_GetIndex+0x58>)
1a003ae4:	4293      	cmp	r3, r2
1a003ae6:	d013      	beq.n	1a003b10 <Chip_UART_GetIndex+0x3c>
1a003ae8:	68fb      	ldr	r3, [r7, #12]
1a003aea:	4a10      	ldr	r2, [pc, #64]	; (1a003b2c <Chip_UART_GetIndex+0x58>)
1a003aec:	4293      	cmp	r3, r2
1a003aee:	d804      	bhi.n	1a003afa <Chip_UART_GetIndex+0x26>
1a003af0:	68fb      	ldr	r3, [r7, #12]
1a003af2:	4a0f      	ldr	r2, [pc, #60]	; (1a003b30 <Chip_UART_GetIndex+0x5c>)
1a003af4:	4293      	cmp	r3, r2
1a003af6:	d009      	beq.n	1a003b0c <Chip_UART_GetIndex+0x38>
1a003af8:	e010      	b.n	1a003b1c <Chip_UART_GetIndex+0x48>
1a003afa:	68fb      	ldr	r3, [r7, #12]
1a003afc:	4a0d      	ldr	r2, [pc, #52]	; (1a003b34 <Chip_UART_GetIndex+0x60>)
1a003afe:	4293      	cmp	r3, r2
1a003b00:	d008      	beq.n	1a003b14 <Chip_UART_GetIndex+0x40>
1a003b02:	68fb      	ldr	r3, [r7, #12]
1a003b04:	4a0c      	ldr	r2, [pc, #48]	; (1a003b38 <Chip_UART_GetIndex+0x64>)
1a003b06:	4293      	cmp	r3, r2
1a003b08:	d006      	beq.n	1a003b18 <Chip_UART_GetIndex+0x44>
1a003b0a:	e007      	b.n	1a003b1c <Chip_UART_GetIndex+0x48>
		case LPC_USART0_BASE:
			return 0;
1a003b0c:	2300      	movs	r3, #0
1a003b0e:	e006      	b.n	1a003b1e <Chip_UART_GetIndex+0x4a>
		case LPC_UART1_BASE:
			return 1;
1a003b10:	2301      	movs	r3, #1
1a003b12:	e004      	b.n	1a003b1e <Chip_UART_GetIndex+0x4a>
		case LPC_USART2_BASE:
			return 2;
1a003b14:	2302      	movs	r3, #2
1a003b16:	e002      	b.n	1a003b1e <Chip_UART_GetIndex+0x4a>
		case LPC_USART3_BASE:
			return 3;
1a003b18:	2303      	movs	r3, #3
1a003b1a:	e000      	b.n	1a003b1e <Chip_UART_GetIndex+0x4a>
		default:
			return 0; /* Should never come here */
1a003b1c:	2300      	movs	r3, #0
	}
}
1a003b1e:	4618      	mov	r0, r3
1a003b20:	3714      	adds	r7, #20
1a003b22:	46bd      	mov	sp, r7
1a003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003b28:	4770      	bx	lr
1a003b2a:	bf00      	nop
1a003b2c:	40082000 	.word	0x40082000
1a003b30:	40081000 	.word	0x40081000
1a003b34:	400c1000 	.word	0x400c1000
1a003b38:	400c2000 	.word	0x400c2000

1a003b3c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a003b3c:	b580      	push	{r7, lr}
1a003b3e:	b084      	sub	sp, #16
1a003b40:	af00      	add	r7, sp, #0
1a003b42:	6078      	str	r0, [r7, #4]
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003b44:	6878      	ldr	r0, [r7, #4]
1a003b46:	f7ff ffc5 	bl	1a003ad4 <Chip_UART_GetIndex>
1a003b4a:	4602      	mov	r2, r0
1a003b4c:	4b1b      	ldr	r3, [pc, #108]	; (1a003bbc <Chip_UART_Init+0x80>)
1a003b4e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
1a003b52:	2301      	movs	r3, #1
1a003b54:	2201      	movs	r2, #1
1a003b56:	2101      	movs	r1, #1
1a003b58:	f000 fe06 	bl	1a004768 <Chip_Clock_EnableOpts>

	/* Enable FIFOs by default, reset them */
	Chip_UART_SetupFIFOS(pUART, (UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS));
1a003b5c:	2107      	movs	r1, #7
1a003b5e:	6878      	ldr	r0, [r7, #4]
1a003b60:	f7ff ff67 	bl	1a003a32 <Chip_UART_SetupFIFOS>

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);
1a003b64:	6878      	ldr	r0, [r7, #4]
1a003b66:	f7ff ff57 	bl	1a003a18 <Chip_UART_TXDisable>

    /* Disable interrupts */
	pUART->IER = 0;
1a003b6a:	687b      	ldr	r3, [r7, #4]
1a003b6c:	2200      	movs	r2, #0
1a003b6e:	605a      	str	r2, [r3, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003b70:	687b      	ldr	r3, [r7, #4]
1a003b72:	2200      	movs	r2, #0
1a003b74:	60da      	str	r2, [r3, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003b76:	687b      	ldr	r3, [r7, #4]
1a003b78:	2200      	movs	r2, #0
1a003b7a:	621a      	str	r2, [r3, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003b7c:	687b      	ldr	r3, [r7, #4]
1a003b7e:	2200      	movs	r2, #0
1a003b80:	64da      	str	r2, [r3, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003b82:	687b      	ldr	r3, [r7, #4]
1a003b84:	2200      	movs	r2, #0
1a003b86:	655a      	str	r2, [r3, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003b88:	687b      	ldr	r3, [r7, #4]
1a003b8a:	2200      	movs	r2, #0
1a003b8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a003b8e:	687b      	ldr	r3, [r7, #4]
1a003b90:	4a0b      	ldr	r2, [pc, #44]	; (1a003bc0 <Chip_UART_Init+0x84>)
1a003b92:	4293      	cmp	r3, r2
1a003b94:	d105      	bne.n	1a003ba2 <Chip_UART_Init+0x66>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a003b96:	687b      	ldr	r3, [r7, #4]
1a003b98:	2200      	movs	r2, #0
1a003b9a:	611a      	str	r2, [r3, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a003b9c:	687b      	ldr	r3, [r7, #4]
1a003b9e:	699b      	ldr	r3, [r3, #24]
1a003ba0:	60fb      	str	r3, [r7, #12]
	}

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
1a003ba2:	2103      	movs	r1, #3
1a003ba4:	6878      	ldr	r0, [r7, #4]
1a003ba6:	f7ff ff52 	bl	1a003a4e <Chip_UART_ConfigData>

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003baa:	687b      	ldr	r3, [r7, #4]
1a003bac:	2210      	movs	r2, #16
1a003bae:	629a      	str	r2, [r3, #40]	; 0x28

    (void) tmp;
1a003bb0:	68fb      	ldr	r3, [r7, #12]
}
1a003bb2:	bf00      	nop
1a003bb4:	3710      	adds	r7, #16
1a003bb6:	46bd      	mov	sp, r7
1a003bb8:	bd80      	pop	{r7, pc}
1a003bba:	bf00      	nop
1a003bbc:	1a00afb8 	.word	0x1a00afb8
1a003bc0:	40082000 	.word	0x40082000

1a003bc4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003bc6:	b08f      	sub	sp, #60	; 0x3c
1a003bc8:	af00      	add	r7, sp, #0
1a003bca:	6078      	str	r0, [r7, #4]
1a003bcc:	6039      	str	r1, [r7, #0]
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003bce:	2300      	movs	r3, #0
1a003bd0:	637b      	str	r3, [r7, #52]	; 0x34
1a003bd2:	2301      	movs	r3, #1
1a003bd4:	633b      	str	r3, [r7, #48]	; 0x30
1a003bd6:	2300      	movs	r3, #0
1a003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a003bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a003bde:	623b      	str	r3, [r7, #32]

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003be0:	6878      	ldr	r0, [r7, #4]
1a003be2:	f7ff ff77 	bl	1a003ad4 <Chip_UART_GetIndex>
1a003be6:	4602      	mov	r2, r0
1a003be8:	4b50      	ldr	r3, [pc, #320]	; (1a003d2c <Chip_UART_SetBaudFDR+0x168>)
1a003bea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
1a003bee:	4618      	mov	r0, r3
1a003bf0:	f000 fe28 	bl	1a004844 <Chip_Clock_GetRate>
1a003bf4:	6178      	str	r0, [r7, #20]

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003bf6:	2301      	movs	r3, #1
1a003bf8:	62bb      	str	r3, [r7, #40]	; 0x28
1a003bfa:	e063      	b.n	1a003cc4 <Chip_UART_SetBaudFDR+0x100>
		for (d = 0; d < m; d++) {
1a003bfc:	2300      	movs	r3, #0
1a003bfe:	627b      	str	r3, [r7, #36]	; 0x24
1a003c00:	e057      	b.n	1a003cb2 <Chip_UART_SetBaudFDR+0xee>
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003c02:	697b      	ldr	r3, [r7, #20]
1a003c04:	461a      	mov	r2, r3
1a003c06:	f04f 0300 	mov.w	r3, #0
1a003c0a:	0915      	lsrs	r5, r2, #4
1a003c0c:	0714      	lsls	r4, r2, #28
1a003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a003c10:	461a      	mov	r2, r3
1a003c12:	f04f 0300 	mov.w	r3, #0
1a003c16:	fb02 f005 	mul.w	r0, r2, r5
1a003c1a:	fb04 f103 	mul.w	r1, r4, r3
1a003c1e:	1846      	adds	r6, r0, r1
1a003c20:	fba4 0102 	umull	r0, r1, r4, r2
1a003c24:	1873      	adds	r3, r6, r1
1a003c26:	4619      	mov	r1, r3
1a003c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a003c2c:	4413      	add	r3, r2
1a003c2e:	683a      	ldr	r2, [r7, #0]
1a003c30:	fb02 f303 	mul.w	r3, r2, r3
1a003c34:	461a      	mov	r2, r3
1a003c36:	f04f 0300 	mov.w	r3, #0
1a003c3a:	f001 ff7b 	bl	1a005b34 <__aeabi_uldivmod>
1a003c3e:	4602      	mov	r2, r0
1a003c40:	460b      	mov	r3, r1
1a003c42:	e9c7 2302 	strd	r2, r3, [r7, #8]

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a003c46:	68bb      	ldr	r3, [r7, #8]
1a003c48:	61fb      	str	r3, [r7, #28]
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a003c4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
1a003c4e:	f04f 0200 	mov.w	r2, #0
1a003c52:	f04f 0300 	mov.w	r3, #0
1a003c56:	000a      	movs	r2, r1
1a003c58:	2300      	movs	r3, #0
1a003c5a:	4613      	mov	r3, r2
1a003c5c:	61bb      	str	r3, [r7, #24]

			/* Closer to next div */
			if ((int)diff < 0) {
1a003c5e:	69fb      	ldr	r3, [r7, #28]
1a003c60:	2b00      	cmp	r3, #0
1a003c62:	da05      	bge.n	1a003c70 <Chip_UART_SetBaudFDR+0xac>
				diff = -diff;
1a003c64:	69fb      	ldr	r3, [r7, #28]
1a003c66:	425b      	negs	r3, r3
1a003c68:	61fb      	str	r3, [r7, #28]
				div ++;
1a003c6a:	69bb      	ldr	r3, [r7, #24]
1a003c6c:	3301      	adds	r3, #1
1a003c6e:	61bb      	str	r3, [r7, #24]
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003c70:	6a3a      	ldr	r2, [r7, #32]
1a003c72:	69fb      	ldr	r3, [r7, #28]
1a003c74:	429a      	cmp	r2, r3
1a003c76:	d318      	bcc.n	1a003caa <Chip_UART_SetBaudFDR+0xe6>
1a003c78:	69bb      	ldr	r3, [r7, #24]
1a003c7a:	2b00      	cmp	r3, #0
1a003c7c:	d015      	beq.n	1a003caa <Chip_UART_SetBaudFDR+0xe6>
1a003c7e:	69bb      	ldr	r3, [r7, #24]
1a003c80:	0c1b      	lsrs	r3, r3, #16
1a003c82:	2b00      	cmp	r3, #0
1a003c84:	d111      	bne.n	1a003caa <Chip_UART_SetBaudFDR+0xe6>
1a003c86:	69bb      	ldr	r3, [r7, #24]
1a003c88:	2b02      	cmp	r3, #2
1a003c8a:	d802      	bhi.n	1a003c92 <Chip_UART_SetBaudFDR+0xce>
1a003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a003c8e:	2b00      	cmp	r3, #0
1a003c90:	d10b      	bne.n	1a003caa <Chip_UART_SetBaudFDR+0xe6>
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a003c92:	69bb      	ldr	r3, [r7, #24]
1a003c94:	637b      	str	r3, [r7, #52]	; 0x34
			sd = d;
1a003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
			sm = m;
1a003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a003c9c:	633b      	str	r3, [r7, #48]	; 0x30
			odiff = diff;
1a003c9e:	69fb      	ldr	r3, [r7, #28]
1a003ca0:	623b      	str	r3, [r7, #32]

			/* On perfect match, break loop */
			if(!diff) {
1a003ca2:	69fb      	ldr	r3, [r7, #28]
1a003ca4:	2b00      	cmp	r3, #0
1a003ca6:	d009      	beq.n	1a003cbc <Chip_UART_SetBaudFDR+0xf8>
1a003ca8:	e000      	b.n	1a003cac <Chip_UART_SetBaudFDR+0xe8>
				continue;
1a003caa:	bf00      	nop
		for (d = 0; d < m; d++) {
1a003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a003cae:	3301      	adds	r3, #1
1a003cb0:	627b      	str	r3, [r7, #36]	; 0x24
1a003cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1a003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a003cb6:	429a      	cmp	r2, r3
1a003cb8:	d3a3      	bcc.n	1a003c02 <Chip_UART_SetBaudFDR+0x3e>
1a003cba:	e000      	b.n	1a003cbe <Chip_UART_SetBaudFDR+0xfa>
				break;
1a003cbc:	bf00      	nop
	for (m = 1; odiff && m < 16; m++) {
1a003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a003cc0:	3301      	adds	r3, #1
1a003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
1a003cc4:	6a3b      	ldr	r3, [r7, #32]
1a003cc6:	2b00      	cmp	r3, #0
1a003cc8:	d002      	beq.n	1a003cd0 <Chip_UART_SetBaudFDR+0x10c>
1a003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a003ccc:	2b0f      	cmp	r3, #15
1a003cce:	d995      	bls.n	1a003bfc <Chip_UART_SetBaudFDR+0x38>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a003cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a003cd2:	2b00      	cmp	r3, #0
1a003cd4:	d101      	bne.n	1a003cda <Chip_UART_SetBaudFDR+0x116>
		return 0;
1a003cd6:	2300      	movs	r3, #0
1a003cd8:	e024      	b.n	1a003d24 <Chip_UART_SetBaudFDR+0x160>
	}

	/* Update UART registers */
	Chip_UART_EnableDivisorAccess(pUART);
1a003cda:	6878      	ldr	r0, [r7, #4]
1a003cdc:	f7ff fec5 	bl	1a003a6a <Chip_UART_EnableDivisorAccess>
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
1a003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a003ce2:	b2d9      	uxtb	r1, r3
1a003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a003ce6:	0a1b      	lsrs	r3, r3, #8
1a003ce8:	b2db      	uxtb	r3, r3
1a003cea:	461a      	mov	r2, r3
1a003cec:	6878      	ldr	r0, [r7, #4]
1a003cee:	f7ff fedc 	bl	1a003aaa <Chip_UART_SetDivisorLatches>
	Chip_UART_DisableDivisorAccess(pUART);
1a003cf2:	6878      	ldr	r0, [r7, #4]
1a003cf4:	f7ff fec9 	bl	1a003a8a <Chip_UART_DisableDivisorAccess>

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a003cfa:	011b      	lsls	r3, r3, #4
1a003cfc:	b2da      	uxtb	r2, r3
1a003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a003d00:	f003 030f 	and.w	r3, r3, #15
1a003d04:	431a      	orrs	r2, r3
1a003d06:	687b      	ldr	r3, [r7, #4]
1a003d08:	629a      	str	r2, [r3, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a003d0a:	697b      	ldr	r3, [r7, #20]
1a003d0c:	091b      	lsrs	r3, r3, #4
1a003d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1a003d10:	fb02 f203 	mul.w	r2, r2, r3
1a003d14:	6b39      	ldr	r1, [r7, #48]	; 0x30
1a003d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a003d18:	440b      	add	r3, r1
1a003d1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
1a003d1c:	fb01 f303 	mul.w	r3, r1, r3
1a003d20:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a003d24:	4618      	mov	r0, r3
1a003d26:	373c      	adds	r7, #60	; 0x3c
1a003d28:	46bd      	mov	sp, r7
1a003d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003d2c:	1a00afc0 	.word	0x1a00afc0

1a003d30 <getFullConvClk>:
 * Private functions
 ****************************************************************************/

/* Get the number of clock for a full conversion */
STATIC INLINE uint8_t getFullConvClk(void)
{
1a003d30:	b480      	push	{r7}
1a003d32:	af00      	add	r7, sp, #0
	return 11;
1a003d34:	230b      	movs	r3, #11
}
1a003d36:	4618      	mov	r0, r3
1a003d38:	46bd      	mov	sp, r7
1a003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003d3e:	4770      	bx	lr

1a003d40 <Chip_ADC_GetClockIndex>:

/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
1a003d40:	b480      	push	{r7}
1a003d42:	b085      	sub	sp, #20
1a003d44:	af00      	add	r7, sp, #0
1a003d46:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003d48:	687b      	ldr	r3, [r7, #4]
1a003d4a:	4a07      	ldr	r2, [pc, #28]	; (1a003d68 <Chip_ADC_GetClockIndex+0x28>)
1a003d4c:	4293      	cmp	r3, r2
1a003d4e:	d102      	bne.n	1a003d56 <Chip_ADC_GetClockIndex+0x16>
		clkADC = CLK_APB3_ADC1;
1a003d50:	2304      	movs	r3, #4
1a003d52:	81fb      	strh	r3, [r7, #14]
1a003d54:	e001      	b.n	1a003d5a <Chip_ADC_GetClockIndex+0x1a>
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a003d56:	2303      	movs	r3, #3
1a003d58:	81fb      	strh	r3, [r7, #14]
	}

	return clkADC;
1a003d5a:	89fb      	ldrh	r3, [r7, #14]
}
1a003d5c:	4618      	mov	r0, r3
1a003d5e:	3714      	adds	r7, #20
1a003d60:	46bd      	mov	sp, r7
1a003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003d66:	4770      	bx	lr
1a003d68:	400e4000 	.word	0x400e4000

1a003d6c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a003d6c:	b580      	push	{r7, lr}
1a003d6e:	b088      	sub	sp, #32
1a003d70:	af00      	add	r7, sp, #0
1a003d72:	60f8      	str	r0, [r7, #12]
1a003d74:	607a      	str	r2, [r7, #4]
1a003d76:	461a      	mov	r2, r3
1a003d78:	460b      	mov	r3, r1
1a003d7a:	72fb      	strb	r3, [r7, #11]
1a003d7c:	4613      	mov	r3, r2
1a003d7e:	72bb      	strb	r3, [r7, #10]
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003d80:	68f8      	ldr	r0, [r7, #12]
1a003d82:	f7ff ffdd 	bl	1a003d40 <Chip_ADC_GetClockIndex>
1a003d86:	4603      	mov	r3, r0
1a003d88:	4618      	mov	r0, r3
1a003d8a:	f000 fd5b 	bl	1a004844 <Chip_Clock_GetRate>
1a003d8e:	61b8      	str	r0, [r7, #24]
	if (burstMode) {
1a003d90:	7afb      	ldrb	r3, [r7, #11]
1a003d92:	2b00      	cmp	r3, #0
1a003d94:	d005      	beq.n	1a003da2 <getClkDiv+0x36>
		fullAdcRate = adcRate * clks;
1a003d96:	7aba      	ldrb	r2, [r7, #10]
1a003d98:	687b      	ldr	r3, [r7, #4]
1a003d9a:	fb02 f303 	mul.w	r3, r2, r3
1a003d9e:	61fb      	str	r3, [r7, #28]
1a003da0:	e007      	b.n	1a003db2 <getClkDiv+0x46>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a003da2:	f7ff ffc5 	bl	1a003d30 <getFullConvClk>
1a003da6:	4603      	mov	r3, r0
1a003da8:	461a      	mov	r2, r3
1a003daa:	687b      	ldr	r3, [r7, #4]
1a003dac:	fb02 f303 	mul.w	r3, r2, r3
1a003db0:	61fb      	str	r3, [r7, #28]
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003db2:	69bb      	ldr	r3, [r7, #24]
1a003db4:	005a      	lsls	r2, r3, #1
1a003db6:	69fb      	ldr	r3, [r7, #28]
1a003db8:	441a      	add	r2, r3
1a003dba:	69fb      	ldr	r3, [r7, #28]
1a003dbc:	005b      	lsls	r3, r3, #1
1a003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
1a003dc2:	b2db      	uxtb	r3, r3
1a003dc4:	3b01      	subs	r3, #1
1a003dc6:	75fb      	strb	r3, [r7, #23]
	return div;
1a003dc8:	7dfb      	ldrb	r3, [r7, #23]
}
1a003dca:	4618      	mov	r0, r3
1a003dcc:	3720      	adds	r7, #32
1a003dce:	46bd      	mov	sp, r7
1a003dd0:	bd80      	pop	{r7, pc}
1a003dd2:	Address 0x000000001a003dd2 is out of bounds.


1a003dd4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003dd4:	b580      	push	{r7, lr}
1a003dd6:	b086      	sub	sp, #24
1a003dd8:	af00      	add	r7, sp, #0
1a003dda:	6078      	str	r0, [r7, #4]
1a003ddc:	6039      	str	r1, [r7, #0]
	uint8_t div;
	uint32_t cr = 0;
1a003dde:	2300      	movs	r3, #0
1a003de0:	617b      	str	r3, [r7, #20]
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003de2:	6878      	ldr	r0, [r7, #4]
1a003de4:	f7ff ffac 	bl	1a003d40 <Chip_ADC_GetClockIndex>
1a003de8:	4603      	mov	r3, r0
1a003dea:	4618      	mov	r0, r3
1a003dec:	2301      	movs	r3, #1
1a003dee:	2201      	movs	r2, #1
1a003df0:	2101      	movs	r1, #1
1a003df2:	f000 fcb9 	bl	1a004768 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003df6:	687b      	ldr	r3, [r7, #4]
1a003df8:	2200      	movs	r2, #0
1a003dfa:	60da      	str	r2, [r3, #12]

	cr |= ADC_CR_PDN;
1a003dfc:	697b      	ldr	r3, [r7, #20]
1a003dfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a003e02:	617b      	str	r3, [r7, #20]
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003e04:	683b      	ldr	r3, [r7, #0]
1a003e06:	4a14      	ldr	r2, [pc, #80]	; (1a003e58 <Chip_ADC_Init+0x84>)
1a003e08:	601a      	str	r2, [r3, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003e0a:	683b      	ldr	r3, [r7, #0]
1a003e0c:	2200      	movs	r2, #0
1a003e0e:	711a      	strb	r2, [r3, #4]
	clk = 11;
1a003e10:	230b      	movs	r3, #11
1a003e12:	613b      	str	r3, [r7, #16]
	ADCSetup->burstMode = false;
1a003e14:	683b      	ldr	r3, [r7, #0]
1a003e16:	2200      	movs	r2, #0
1a003e18:	715a      	strb	r2, [r3, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003e1a:	683b      	ldr	r3, [r7, #0]
1a003e1c:	681a      	ldr	r2, [r3, #0]
1a003e1e:	693b      	ldr	r3, [r7, #16]
1a003e20:	b2db      	uxtb	r3, r3
1a003e22:	2100      	movs	r1, #0
1a003e24:	6878      	ldr	r0, [r7, #4]
1a003e26:	f7ff ffa1 	bl	1a003d6c <getClkDiv>
1a003e2a:	4603      	mov	r3, r0
1a003e2c:	73fb      	strb	r3, [r7, #15]
	cr |= ADC_CR_CLKDIV(div);
1a003e2e:	7bfb      	ldrb	r3, [r7, #15]
1a003e30:	021b      	lsls	r3, r3, #8
1a003e32:	461a      	mov	r2, r3
1a003e34:	697b      	ldr	r3, [r7, #20]
1a003e36:	4313      	orrs	r3, r2
1a003e38:	617b      	str	r3, [r7, #20]
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003e3a:	683b      	ldr	r3, [r7, #0]
1a003e3c:	791b      	ldrb	r3, [r3, #4]
1a003e3e:	045b      	lsls	r3, r3, #17
1a003e40:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a003e44:	697a      	ldr	r2, [r7, #20]
1a003e46:	4313      	orrs	r3, r2
1a003e48:	617b      	str	r3, [r7, #20]
	pADC->CR = cr;
1a003e4a:	687b      	ldr	r3, [r7, #4]
1a003e4c:	697a      	ldr	r2, [r7, #20]
1a003e4e:	601a      	str	r2, [r3, #0]
}
1a003e50:	bf00      	nop
1a003e52:	3718      	adds	r7, #24
1a003e54:	46bd      	mov	sp, r7
1a003e56:	bd80      	pop	{r7, pc}
1a003e58:	00061a80 	.word	0x00061a80

1a003e5c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003e5c:	b580      	push	{r7, lr}
1a003e5e:	b086      	sub	sp, #24
1a003e60:	af00      	add	r7, sp, #0
1a003e62:	60f8      	str	r0, [r7, #12]
1a003e64:	60b9      	str	r1, [r7, #8]
1a003e66:	607a      	str	r2, [r7, #4]
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a003e68:	68fb      	ldr	r3, [r7, #12]
1a003e6a:	681b      	ldr	r3, [r3, #0]
1a003e6c:	f423 236f 	bic.w	r3, r3, #978944	; 0xef000
1a003e70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
1a003e74:	617b      	str	r3, [r7, #20]
	ADCSetup->adcRate = rate;
1a003e76:	68bb      	ldr	r3, [r7, #8]
1a003e78:	687a      	ldr	r2, [r7, #4]
1a003e7a:	601a      	str	r2, [r3, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003e7c:	68bb      	ldr	r3, [r7, #8]
1a003e7e:	7959      	ldrb	r1, [r3, #5]
1a003e80:	68bb      	ldr	r3, [r7, #8]
1a003e82:	791b      	ldrb	r3, [r3, #4]
1a003e84:	f1c3 030b 	rsb	r3, r3, #11
1a003e88:	b2db      	uxtb	r3, r3
1a003e8a:	687a      	ldr	r2, [r7, #4]
1a003e8c:	68f8      	ldr	r0, [r7, #12]
1a003e8e:	f7ff ff6d 	bl	1a003d6c <getClkDiv>
1a003e92:	4603      	mov	r3, r0
1a003e94:	74fb      	strb	r3, [r7, #19]
	cr |= ADC_CR_CLKDIV(div);
1a003e96:	7cfb      	ldrb	r3, [r7, #19]
1a003e98:	021b      	lsls	r3, r3, #8
1a003e9a:	461a      	mov	r2, r3
1a003e9c:	697b      	ldr	r3, [r7, #20]
1a003e9e:	4313      	orrs	r3, r2
1a003ea0:	617b      	str	r3, [r7, #20]
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003ea2:	68bb      	ldr	r3, [r7, #8]
1a003ea4:	791b      	ldrb	r3, [r3, #4]
1a003ea6:	045b      	lsls	r3, r3, #17
1a003ea8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a003eac:	697a      	ldr	r2, [r7, #20]
1a003eae:	4313      	orrs	r3, r2
1a003eb0:	617b      	str	r3, [r7, #20]
	pADC->CR = cr;
1a003eb2:	68fb      	ldr	r3, [r7, #12]
1a003eb4:	697a      	ldr	r2, [r7, #20]
1a003eb6:	601a      	str	r2, [r3, #0]
}
1a003eb8:	bf00      	nop
1a003eba:	3718      	adds	r7, #24
1a003ebc:	46bd      	mov	sp, r7
1a003ebe:	bd80      	pop	{r7, pc}

1a003ec0 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003ec0:	b580      	push	{r7, lr}
1a003ec2:	b084      	sub	sp, #16
1a003ec4:	af00      	add	r7, sp, #0
1a003ec6:	60f8      	str	r0, [r7, #12]
1a003ec8:	60b9      	str	r1, [r7, #8]
1a003eca:	4613      	mov	r3, r2
1a003ecc:	71fb      	strb	r3, [r7, #7]
	ADCSetup->bitsAccuracy = resolution;
1a003ece:	68bb      	ldr	r3, [r7, #8]
1a003ed0:	79fa      	ldrb	r2, [r7, #7]
1a003ed2:	711a      	strb	r2, [r3, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003ed4:	68bb      	ldr	r3, [r7, #8]
1a003ed6:	681b      	ldr	r3, [r3, #0]
1a003ed8:	461a      	mov	r2, r3
1a003eda:	68b9      	ldr	r1, [r7, #8]
1a003edc:	68f8      	ldr	r0, [r7, #12]
1a003ede:	f7ff ffbd 	bl	1a003e5c <Chip_ADC_SetSampleRate>
}
1a003ee2:	bf00      	nop
1a003ee4:	3710      	adds	r7, #16
1a003ee6:	46bd      	mov	sp, r7
1a003ee8:	bd80      	pop	{r7, pc}
1a003eea:	Address 0x000000001a003eea is out of bounds.


1a003eec <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003eec:	b580      	push	{r7, lr}
1a003eee:	af00      	add	r7, sp, #0
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003ef0:	2069      	movs	r0, #105	; 0x69
1a003ef2:	f000 fca7 	bl	1a004844 <Chip_Clock_GetRate>
1a003ef6:	4602      	mov	r2, r0
1a003ef8:	4b01      	ldr	r3, [pc, #4]	; (1a003f00 <SystemCoreClockUpdate+0x14>)
1a003efa:	601a      	str	r2, [r3, #0]
}
1a003efc:	bf00      	nop
1a003efe:	bd80      	pop	{r7, pc}
1a003f00:	10002bc0 	.word	0x10002bc0

1a003f04 <ABS>:

/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
1a003f04:	b480      	push	{r7}
1a003f06:	b083      	sub	sp, #12
1a003f08:	af00      	add	r7, sp, #0
1a003f0a:	6078      	str	r0, [r7, #4]
	if (val < 0)
1a003f0c:	687b      	ldr	r3, [r7, #4]
1a003f0e:	2b00      	cmp	r3, #0
1a003f10:	da02      	bge.n	1a003f18 <ABS+0x14>
		return -val;
1a003f12:	687b      	ldr	r3, [r7, #4]
1a003f14:	425b      	negs	r3, r3
1a003f16:	e000      	b.n	1a003f1a <ABS+0x16>
	return val;
1a003f18:	687b      	ldr	r3, [r7, #4]
}
1a003f1a:	4618      	mov	r0, r3
1a003f1c:	370c      	adds	r7, #12
1a003f1e:	46bd      	mov	sp, r7
1a003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
1a003f24:	4770      	bx	lr
1a003f26:	Address 0x000000001a003f26 is out of bounds.


1a003f28 <pll_calc_divs>:

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003f28:	b580      	push	{r7, lr}
1a003f2a:	b088      	sub	sp, #32
1a003f2c:	af00      	add	r7, sp, #0
1a003f2e:	6078      	str	r0, [r7, #4]
1a003f30:	6039      	str	r1, [r7, #0]

	uint32_t prev = freq;
1a003f32:	687b      	ldr	r3, [r7, #4]
1a003f34:	61fb      	str	r3, [r7, #28]
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a003f36:	683b      	ldr	r3, [r7, #0]
1a003f38:	681b      	ldr	r3, [r3, #0]
1a003f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a003f3e:	2b00      	cmp	r3, #0
1a003f40:	d005      	beq.n	1a003f4e <pll_calc_divs+0x26>
		ppll->ctrl &= ~(1 << 6);
1a003f42:	683b      	ldr	r3, [r7, #0]
1a003f44:	681b      	ldr	r3, [r3, #0]
1a003f46:	f023 0240 	bic.w	r2, r3, #64	; 0x40
1a003f4a:	683b      	ldr	r3, [r7, #0]
1a003f4c:	601a      	str	r2, [r3, #0]
	}
	for (n = 1; n <= 4; n++) {
1a003f4e:	2301      	movs	r3, #1
1a003f50:	61bb      	str	r3, [r7, #24]
1a003f52:	e06f      	b.n	1a004034 <pll_calc_divs+0x10c>
		for (p = 0; p < 4; p ++) {
1a003f54:	2300      	movs	r3, #0
1a003f56:	613b      	str	r3, [r7, #16]
1a003f58:	e066      	b.n	1a004028 <pll_calc_divs+0x100>
			for (m = 1; m <= 256; m++) {
1a003f5a:	2301      	movs	r3, #1
1a003f5c:	617b      	str	r3, [r7, #20]
1a003f5e:	e05a      	b.n	1a004016 <pll_calc_divs+0xee>
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a003f60:	683b      	ldr	r3, [r7, #0]
1a003f62:	681b      	ldr	r3, [r3, #0]
1a003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a003f68:	2b00      	cmp	r3, #0
1a003f6a:	d00e      	beq.n	1a003f8a <pll_calc_divs+0x62>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003f6c:	693b      	ldr	r3, [r7, #16]
1a003f6e:	3301      	adds	r3, #1
1a003f70:	697a      	ldr	r2, [r7, #20]
1a003f72:	fa02 f303 	lsl.w	r3, r2, r3
1a003f76:	461a      	mov	r2, r3
1a003f78:	683b      	ldr	r3, [r7, #0]
1a003f7a:	695b      	ldr	r3, [r3, #20]
1a003f7c:	fb03 f202 	mul.w	r2, r3, r2
1a003f80:	69bb      	ldr	r3, [r7, #24]
1a003f82:	fbb2 f3f3 	udiv	r3, r2, r3
1a003f86:	60fb      	str	r3, [r7, #12]
1a003f88:	e008      	b.n	1a003f9c <pll_calc_divs+0x74>
				} else {
					fcco = (m * ppll->fin) / n;
1a003f8a:	683b      	ldr	r3, [r7, #0]
1a003f8c:	695b      	ldr	r3, [r3, #20]
1a003f8e:	697a      	ldr	r2, [r7, #20]
1a003f90:	fb02 f203 	mul.w	r2, r2, r3
1a003f94:	69bb      	ldr	r3, [r7, #24]
1a003f96:	fbb2 f3f3 	udiv	r3, r2, r3
1a003f9a:	60fb      	str	r3, [r7, #12]
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003f9c:	68fb      	ldr	r3, [r7, #12]
1a003f9e:	4a29      	ldr	r2, [pc, #164]	; (1a004044 <pll_calc_divs+0x11c>)
1a003fa0:	4293      	cmp	r3, r2
1a003fa2:	d934      	bls.n	1a00400e <pll_calc_divs+0xe6>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003fa4:	68fb      	ldr	r3, [r7, #12]
1a003fa6:	4a28      	ldr	r2, [pc, #160]	; (1a004048 <pll_calc_divs+0x120>)
1a003fa8:	4293      	cmp	r3, r2
1a003faa:	d839      	bhi.n	1a004020 <pll_calc_divs+0xf8>
				if (ppll->ctrl & (1 << 7)) {
1a003fac:	683b      	ldr	r3, [r7, #0]
1a003fae:	681b      	ldr	r3, [r3, #0]
1a003fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a003fb4:	2b00      	cmp	r3, #0
1a003fb6:	d002      	beq.n	1a003fbe <pll_calc_divs+0x96>
					fout = fcco;
1a003fb8:	68fb      	ldr	r3, [r7, #12]
1a003fba:	60bb      	str	r3, [r7, #8]
1a003fbc:	e005      	b.n	1a003fca <pll_calc_divs+0xa2>
				} else {
					fout = fcco >> (p + 1);
1a003fbe:	693b      	ldr	r3, [r7, #16]
1a003fc0:	3301      	adds	r3, #1
1a003fc2:	68fa      	ldr	r2, [r7, #12]
1a003fc4:	fa22 f303 	lsr.w	r3, r2, r3
1a003fc8:	60bb      	str	r3, [r7, #8]
				}

				if (ABS(freq - fout) < prev) {
1a003fca:	687a      	ldr	r2, [r7, #4]
1a003fcc:	68bb      	ldr	r3, [r7, #8]
1a003fce:	1ad3      	subs	r3, r2, r3
1a003fd0:	4618      	mov	r0, r3
1a003fd2:	f7ff ff97 	bl	1a003f04 <ABS>
1a003fd6:	4602      	mov	r2, r0
1a003fd8:	69fb      	ldr	r3, [r7, #28]
1a003fda:	4293      	cmp	r3, r2
1a003fdc:	d918      	bls.n	1a004010 <pll_calc_divs+0xe8>
					ppll->nsel = n;
1a003fde:	683b      	ldr	r3, [r7, #0]
1a003fe0:	69ba      	ldr	r2, [r7, #24]
1a003fe2:	609a      	str	r2, [r3, #8]
					ppll->psel = p + 1;
1a003fe4:	693b      	ldr	r3, [r7, #16]
1a003fe6:	1c5a      	adds	r2, r3, #1
1a003fe8:	683b      	ldr	r3, [r7, #0]
1a003fea:	60da      	str	r2, [r3, #12]
					ppll->msel = m;
1a003fec:	683b      	ldr	r3, [r7, #0]
1a003fee:	697a      	ldr	r2, [r7, #20]
1a003ff0:	611a      	str	r2, [r3, #16]
					ppll->fout = fout;
1a003ff2:	683b      	ldr	r3, [r7, #0]
1a003ff4:	68ba      	ldr	r2, [r7, #8]
1a003ff6:	619a      	str	r2, [r3, #24]
					ppll->fcco = fcco;
1a003ff8:	683b      	ldr	r3, [r7, #0]
1a003ffa:	68fa      	ldr	r2, [r7, #12]
1a003ffc:	61da      	str	r2, [r3, #28]
					prev = ABS(freq - fout);
1a003ffe:	687a      	ldr	r2, [r7, #4]
1a004000:	68bb      	ldr	r3, [r7, #8]
1a004002:	1ad3      	subs	r3, r2, r3
1a004004:	4618      	mov	r0, r3
1a004006:	f7ff ff7d 	bl	1a003f04 <ABS>
1a00400a:	61f8      	str	r0, [r7, #28]
1a00400c:	e000      	b.n	1a004010 <pll_calc_divs+0xe8>
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00400e:	bf00      	nop
			for (m = 1; m <= 256; m++) {
1a004010:	697b      	ldr	r3, [r7, #20]
1a004012:	3301      	adds	r3, #1
1a004014:	617b      	str	r3, [r7, #20]
1a004016:	697b      	ldr	r3, [r7, #20]
1a004018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1a00401c:	dda0      	ble.n	1a003f60 <pll_calc_divs+0x38>
1a00401e:	e000      	b.n	1a004022 <pll_calc_divs+0xfa>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a004020:	bf00      	nop
		for (p = 0; p < 4; p ++) {
1a004022:	693b      	ldr	r3, [r7, #16]
1a004024:	3301      	adds	r3, #1
1a004026:	613b      	str	r3, [r7, #16]
1a004028:	693b      	ldr	r3, [r7, #16]
1a00402a:	2b03      	cmp	r3, #3
1a00402c:	dd95      	ble.n	1a003f5a <pll_calc_divs+0x32>
	for (n = 1; n <= 4; n++) {
1a00402e:	69bb      	ldr	r3, [r7, #24]
1a004030:	3301      	adds	r3, #1
1a004032:	61bb      	str	r3, [r7, #24]
1a004034:	69bb      	ldr	r3, [r7, #24]
1a004036:	2b04      	cmp	r3, #4
1a004038:	dd8c      	ble.n	1a003f54 <pll_calc_divs+0x2c>
				}
			}
		}
	}
}
1a00403a:	bf00      	nop
1a00403c:	3720      	adds	r7, #32
1a00403e:	46bd      	mov	sp, r7
1a004040:	bd80      	pop	{r7, pc}
1a004042:	bf00      	nop
1a004044:	094c5eff 	.word	0x094c5eff
1a004048:	1312d000 	.word	0x1312d000

1a00404c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00404c:	b5b0      	push	{r4, r5, r7, lr}
1a00404e:	b09e      	sub	sp, #120	; 0x78
1a004050:	af00      	add	r7, sp, #0
1a004052:	6078      	str	r0, [r7, #4]
1a004054:	6039      	str	r1, [r7, #0]
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a004056:	f107 030c 	add.w	r3, r7, #12
1a00405a:	2260      	movs	r2, #96	; 0x60
1a00405c:	2100      	movs	r1, #0
1a00405e:	4618      	mov	r0, r3
1a004060:	f002 fd78 	bl	1a006b54 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a004064:	68fb      	ldr	r3, [r7, #12]
1a004066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00406a:	60fb      	str	r3, [r7, #12]
	pll[0].fin = ppll->fin;
1a00406c:	683b      	ldr	r3, [r7, #0]
1a00406e:	695b      	ldr	r3, [r3, #20]
1a004070:	623b      	str	r3, [r7, #32]
	pll[0].srcin = ppll->srcin;
1a004072:	683b      	ldr	r3, [r7, #0]
1a004074:	791b      	ldrb	r3, [r3, #4]
1a004076:	743b      	strb	r3, [r7, #16]
	pll_calc_divs(freq, &pll[0]);
1a004078:	f107 030c 	add.w	r3, r7, #12
1a00407c:	4619      	mov	r1, r3
1a00407e:	6878      	ldr	r0, [r7, #4]
1a004080:	f7ff ff52 	bl	1a003f28 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a004086:	687a      	ldr	r2, [r7, #4]
1a004088:	429a      	cmp	r2, r3
1a00408a:	d10a      	bne.n	1a0040a2 <pll_get_frac+0x56>
		*ppll = pll[0];
1a00408c:	683b      	ldr	r3, [r7, #0]
1a00408e:	461d      	mov	r5, r3
1a004090:	f107 040c 	add.w	r4, r7, #12
1a004094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a004096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a004098:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a00409c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		return ;
1a0040a0:	e08e      	b.n	1a0041c0 <pll_get_frac+0x174>
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a0040a4:	687a      	ldr	r2, [r7, #4]
1a0040a6:	1ad3      	subs	r3, r2, r3
1a0040a8:	4618      	mov	r0, r3
1a0040aa:	f7ff ff2b 	bl	1a003f04 <ABS>
1a0040ae:	4603      	mov	r3, r0
1a0040b0:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0040b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a0040b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0040b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	pll[2].fin = ppll->fin;
1a0040ba:	683b      	ldr	r3, [r7, #0]
1a0040bc:	695b      	ldr	r3, [r3, #20]
1a0040be:	663b      	str	r3, [r7, #96]	; 0x60
	pll[2].srcin = ppll->srcin;
1a0040c0:	683b      	ldr	r3, [r7, #0]
1a0040c2:	791b      	ldrb	r3, [r3, #4]
1a0040c4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	pll_calc_divs(freq, &pll[2]);
1a0040c8:	f107 030c 	add.w	r3, r7, #12
1a0040cc:	3340      	adds	r3, #64	; 0x40
1a0040ce:	4619      	mov	r1, r3
1a0040d0:	6878      	ldr	r0, [r7, #4]
1a0040d2:	f7ff ff29 	bl	1a003f28 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0040d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1a0040d8:	687a      	ldr	r2, [r7, #4]
1a0040da:	429a      	cmp	r2, r3
1a0040dc:	d10a      	bne.n	1a0040f4 <pll_get_frac+0xa8>
		*ppll = pll[2];
1a0040de:	683b      	ldr	r3, [r7, #0]
1a0040e0:	461d      	mov	r5, r3
1a0040e2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a0040e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a0040e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a0040ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a0040ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		return ;
1a0040f2:	e065      	b.n	1a0041c0 <pll_get_frac+0x174>
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0040f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1a0040f6:	687a      	ldr	r2, [r7, #4]
1a0040f8:	1ad3      	subs	r3, r2, r3
1a0040fa:	4618      	mov	r0, r3
1a0040fc:	f7ff ff02 	bl	1a003f04 <ABS>
1a004100:	4603      	mov	r3, r0
1a004102:	677b      	str	r3, [r7, #116]	; 0x74
	
	if (freq <= 110000000) {
1a004104:	687b      	ldr	r3, [r7, #4]
1a004106:	4a30      	ldr	r2, [pc, #192]	; (1a0041c8 <pll_get_frac+0x17c>)
1a004108:	4293      	cmp	r3, r2
1a00410a:	d81a      	bhi.n	1a004142 <pll_get_frac+0xf6>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a00410c:	2340      	movs	r3, #64	; 0x40
1a00410e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pll[1].fin = ppll->fin;
1a004110:	683b      	ldr	r3, [r7, #0]
1a004112:	695b      	ldr	r3, [r3, #20]
1a004114:	643b      	str	r3, [r7, #64]	; 0x40
		pll_calc_divs(freq, &pll[1]);
1a004116:	f107 030c 	add.w	r3, r7, #12
1a00411a:	3320      	adds	r3, #32
1a00411c:	4619      	mov	r1, r3
1a00411e:	6878      	ldr	r0, [r7, #4]
1a004120:	f7ff ff02 	bl	1a003f28 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a004124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a004126:	687a      	ldr	r2, [r7, #4]
1a004128:	429a      	cmp	r2, r3
1a00412a:	d10a      	bne.n	1a004142 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00412c:	683b      	ldr	r3, [r7, #0]
1a00412e:	461d      	mov	r5, r3
1a004130:	f107 042c 	add.w	r4, r7, #44	; 0x2c
1a004134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a004136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a004138:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a00413c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			return ;
1a004140:	e03e      	b.n	1a0041c0 <pll_get_frac+0x174>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a004142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1a004144:	687a      	ldr	r2, [r7, #4]
1a004146:	1ad3      	subs	r3, r2, r3
1a004148:	4618      	mov	r0, r3
1a00414a:	f7ff fedb 	bl	1a003f04 <ABS>
1a00414e:	4603      	mov	r3, r0
1a004150:	673b      	str	r3, [r7, #112]	; 0x70

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a004152:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1a004154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1a004156:	429a      	cmp	r2, r3
1a004158:	dc19      	bgt.n	1a00418e <pll_get_frac+0x142>
		if (diff[0] <= diff[2]) {
1a00415a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1a00415c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1a00415e:	429a      	cmp	r2, r3
1a004160:	dc0a      	bgt.n	1a004178 <pll_get_frac+0x12c>
			*ppll = pll[0];
1a004162:	683b      	ldr	r3, [r7, #0]
1a004164:	461d      	mov	r5, r3
1a004166:	f107 040c 	add.w	r4, r7, #12
1a00416a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a00416c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a00416e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a004172:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a004176:	e023      	b.n	1a0041c0 <pll_get_frac+0x174>
		} else {
			*ppll = pll[2];
1a004178:	683b      	ldr	r3, [r7, #0]
1a00417a:	461d      	mov	r5, r3
1a00417c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a004180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a004182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a004184:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a004188:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a00418c:	e018      	b.n	1a0041c0 <pll_get_frac+0x174>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a00418e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
1a004190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1a004192:	429a      	cmp	r2, r3
1a004194:	dc0a      	bgt.n	1a0041ac <pll_get_frac+0x160>
			*ppll = pll[1];
1a004196:	683b      	ldr	r3, [r7, #0]
1a004198:	461d      	mov	r5, r3
1a00419a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
1a00419e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a0041a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a0041a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a0041a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
1a0041aa:	e009      	b.n	1a0041c0 <pll_get_frac+0x174>
		} else {
			*ppll = pll[2];
1a0041ac:	683b      	ldr	r3, [r7, #0]
1a0041ae:	461d      	mov	r5, r3
1a0041b0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
1a0041b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
1a0041b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a0041b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a0041bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		}
	}
}
1a0041c0:	3778      	adds	r7, #120	; 0x78
1a0041c2:	46bd      	mov	sp, r7
1a0041c4:	bdb0      	pop	{r4, r5, r7, pc}
1a0041c6:	bf00      	nop
1a0041c8:	068e7780 	.word	0x068e7780

1a0041cc <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a0041cc:	b580      	push	{r7, lr}
1a0041ce:	b084      	sub	sp, #16
1a0041d0:	af00      	add	r7, sp, #0
1a0041d2:	4603      	mov	r3, r0
1a0041d4:	460a      	mov	r2, r1
1a0041d6:	71fb      	strb	r3, [r7, #7]
1a0041d8:	4613      	mov	r3, r2
1a0041da:	71bb      	strb	r3, [r7, #6]
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a0041dc:	79bb      	ldrb	r3, [r7, #6]
1a0041de:	4618      	mov	r0, r3
1a0041e0:	f000 f960 	bl	1a0044a4 <Chip_Clock_GetDividerSource>
1a0041e4:	4603      	mov	r3, r0
1a0041e6:	73fb      	strb	r3, [r7, #15]
	div = Chip_Clock_GetDividerDivisor(divider);
1a0041e8:	79bb      	ldrb	r3, [r7, #6]
1a0041ea:	4618      	mov	r0, r3
1a0041ec:	f000 f97a 	bl	1a0044e4 <Chip_Clock_GetDividerDivisor>
1a0041f0:	60b8      	str	r0, [r7, #8]
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0041f2:	7bfb      	ldrb	r3, [r7, #15]
1a0041f4:	4618      	mov	r0, r3
1a0041f6:	f000 f991 	bl	1a00451c <Chip_Clock_GetClockInputHz>
1a0041fa:	4602      	mov	r2, r0
1a0041fc:	68bb      	ldr	r3, [r7, #8]
1a0041fe:	3301      	adds	r3, #1
1a004200:	fbb2 f3f3 	udiv	r3, r2, r3
}
1a004204:	4618      	mov	r0, r3
1a004206:	3710      	adds	r7, #16
1a004208:	46bd      	mov	sp, r7
1a00420a:	bd80      	pop	{r7, pc}

1a00420c <Chip_Clock_FindBaseClock>:

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00420c:	b480      	push	{r7}
1a00420e:	b085      	sub	sp, #20
1a004210:	af00      	add	r7, sp, #0
1a004212:	4603      	mov	r3, r0
1a004214:	80fb      	strh	r3, [r7, #6]
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a004216:	231c      	movs	r3, #28
1a004218:	73fb      	strb	r3, [r7, #15]
	int i = 0;
1a00421a:	2300      	movs	r3, #0
1a00421c:	60bb      	str	r3, [r7, #8]

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00421e:	e024      	b.n	1a00426a <Chip_Clock_FindBaseClock+0x5e>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a004220:	491d      	ldr	r1, [pc, #116]	; (1a004298 <Chip_Clock_FindBaseClock+0x8c>)
1a004222:	68ba      	ldr	r2, [r7, #8]
1a004224:	4613      	mov	r3, r2
1a004226:	005b      	lsls	r3, r3, #1
1a004228:	4413      	add	r3, r2
1a00422a:	005b      	lsls	r3, r3, #1
1a00422c:	440b      	add	r3, r1
1a00422e:	881b      	ldrh	r3, [r3, #0]
1a004230:	88fa      	ldrh	r2, [r7, #6]
1a004232:	429a      	cmp	r2, r3
1a004234:	d316      	bcc.n	1a004264 <Chip_Clock_FindBaseClock+0x58>
1a004236:	4918      	ldr	r1, [pc, #96]	; (1a004298 <Chip_Clock_FindBaseClock+0x8c>)
1a004238:	68ba      	ldr	r2, [r7, #8]
1a00423a:	4613      	mov	r3, r2
1a00423c:	005b      	lsls	r3, r3, #1
1a00423e:	4413      	add	r3, r2
1a004240:	005b      	lsls	r3, r3, #1
1a004242:	440b      	add	r3, r1
1a004244:	3302      	adds	r3, #2
1a004246:	881b      	ldrh	r3, [r3, #0]
1a004248:	88fa      	ldrh	r2, [r7, #6]
1a00424a:	429a      	cmp	r2, r3
1a00424c:	d80a      	bhi.n	1a004264 <Chip_Clock_FindBaseClock+0x58>
			baseclk = periph_to_base[i].clkbase;
1a00424e:	4912      	ldr	r1, [pc, #72]	; (1a004298 <Chip_Clock_FindBaseClock+0x8c>)
1a004250:	68ba      	ldr	r2, [r7, #8]
1a004252:	4613      	mov	r3, r2
1a004254:	005b      	lsls	r3, r3, #1
1a004256:	4413      	add	r3, r2
1a004258:	005b      	lsls	r3, r3, #1
1a00425a:	440b      	add	r3, r1
1a00425c:	3304      	adds	r3, #4
1a00425e:	781b      	ldrb	r3, [r3, #0]
1a004260:	73fb      	strb	r3, [r7, #15]
1a004262:	e002      	b.n	1a00426a <Chip_Clock_FindBaseClock+0x5e>
		}
		else {
			i++;
1a004264:	68bb      	ldr	r3, [r7, #8]
1a004266:	3301      	adds	r3, #1
1a004268:	60bb      	str	r3, [r7, #8]
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00426a:	7bfb      	ldrb	r3, [r7, #15]
1a00426c:	2b1c      	cmp	r3, #28
1a00426e:	d10b      	bne.n	1a004288 <Chip_Clock_FindBaseClock+0x7c>
1a004270:	4909      	ldr	r1, [pc, #36]	; (1a004298 <Chip_Clock_FindBaseClock+0x8c>)
1a004272:	68ba      	ldr	r2, [r7, #8]
1a004274:	4613      	mov	r3, r2
1a004276:	005b      	lsls	r3, r3, #1
1a004278:	4413      	add	r3, r2
1a00427a:	005b      	lsls	r3, r3, #1
1a00427c:	440b      	add	r3, r1
1a00427e:	3304      	adds	r3, #4
1a004280:	781b      	ldrb	r3, [r3, #0]
1a004282:	7bfa      	ldrb	r2, [r7, #15]
1a004284:	429a      	cmp	r2, r3
1a004286:	d1cb      	bne.n	1a004220 <Chip_Clock_FindBaseClock+0x14>
		}
	}

	return baseclk;
1a004288:	7bfb      	ldrb	r3, [r7, #15]
}
1a00428a:	4618      	mov	r0, r3
1a00428c:	3714      	adds	r7, #20
1a00428e:	46bd      	mov	sp, r7
1a004290:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004294:	4770      	bx	lr
1a004296:	bf00      	nop
1a004298:	1a00afc8 	.word	0x1a00afc8

1a00429c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00429c:	b480      	push	{r7}
1a00429e:	b083      	sub	sp, #12
1a0042a0:	af00      	add	r7, sp, #0
	volatile uint32_t delay = 1000;
1a0042a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0042a6:	603b      	str	r3, [r7, #0]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0042a8:	4b15      	ldr	r3, [pc, #84]	; (1a004300 <Chip_Clock_EnableCrystal+0x64>)
1a0042aa:	699b      	ldr	r3, [r3, #24]
1a0042ac:	607b      	str	r3, [r7, #4]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0042ae:	687b      	ldr	r3, [r7, #4]
1a0042b0:	f023 0302 	bic.w	r3, r3, #2
1a0042b4:	607b      	str	r3, [r7, #4]
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0042b6:	4b12      	ldr	r3, [pc, #72]	; (1a004300 <Chip_Clock_EnableCrystal+0x64>)
1a0042b8:	699b      	ldr	r3, [r3, #24]
1a0042ba:	687a      	ldr	r2, [r7, #4]
1a0042bc:	429a      	cmp	r2, r3
1a0042be:	d002      	beq.n	1a0042c6 <Chip_Clock_EnableCrystal+0x2a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0042c0:	4a0f      	ldr	r2, [pc, #60]	; (1a004300 <Chip_Clock_EnableCrystal+0x64>)
1a0042c2:	687b      	ldr	r3, [r7, #4]
1a0042c4:	6193      	str	r3, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0042c6:	687b      	ldr	r3, [r7, #4]
1a0042c8:	f023 0301 	bic.w	r3, r3, #1
1a0042cc:	607b      	str	r3, [r7, #4]
	if (OscRateIn >= 20000000) {
1a0042ce:	4b0d      	ldr	r3, [pc, #52]	; (1a004304 <Chip_Clock_EnableCrystal+0x68>)
1a0042d0:	681b      	ldr	r3, [r3, #0]
1a0042d2:	4a0d      	ldr	r2, [pc, #52]	; (1a004308 <Chip_Clock_EnableCrystal+0x6c>)
1a0042d4:	4293      	cmp	r3, r2
1a0042d6:	d903      	bls.n	1a0042e0 <Chip_Clock_EnableCrystal+0x44>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0042d8:	687b      	ldr	r3, [r7, #4]
1a0042da:	f043 0304 	orr.w	r3, r3, #4
1a0042de:	607b      	str	r3, [r7, #4]

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0042e0:	4a07      	ldr	r2, [pc, #28]	; (1a004300 <Chip_Clock_EnableCrystal+0x64>)
1a0042e2:	687b      	ldr	r3, [r7, #4]
1a0042e4:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0042e6:	bf00      	nop
1a0042e8:	683b      	ldr	r3, [r7, #0]
1a0042ea:	1e5a      	subs	r2, r3, #1
1a0042ec:	603a      	str	r2, [r7, #0]
1a0042ee:	2b00      	cmp	r3, #0
1a0042f0:	d1fa      	bne.n	1a0042e8 <Chip_Clock_EnableCrystal+0x4c>
}
1a0042f2:	bf00      	nop
1a0042f4:	370c      	adds	r7, #12
1a0042f6:	46bd      	mov	sp, r7
1a0042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0042fc:	4770      	bx	lr
1a0042fe:	bf00      	nop
1a004300:	40050000 	.word	0x40050000
1a004304:	1a00af14 	.word	0x1a00af14
1a004308:	01312cff 	.word	0x01312cff

1a00430c <Chip_Clock_CalcMainPLLValue>:

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00430c:	b580      	push	{r7, lr}
1a00430e:	b082      	sub	sp, #8
1a004310:	af00      	add	r7, sp, #0
1a004312:	6078      	str	r0, [r7, #4]
1a004314:	6039      	str	r1, [r7, #0]
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a004316:	683b      	ldr	r3, [r7, #0]
1a004318:	791b      	ldrb	r3, [r3, #4]
1a00431a:	4618      	mov	r0, r3
1a00431c:	f000 f8fe 	bl	1a00451c <Chip_Clock_GetClockInputHz>
1a004320:	4602      	mov	r2, r0
1a004322:	683b      	ldr	r3, [r7, #0]
1a004324:	615a      	str	r2, [r3, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a004326:	687b      	ldr	r3, [r7, #4]
1a004328:	4a2b      	ldr	r2, [pc, #172]	; (1a0043d8 <Chip_Clock_CalcMainPLLValue+0xcc>)
1a00432a:	4293      	cmp	r3, r2
1a00432c:	d807      	bhi.n	1a00433e <Chip_Clock_CalcMainPLLValue+0x32>
1a00432e:	687b      	ldr	r3, [r7, #4]
1a004330:	4a2a      	ldr	r2, [pc, #168]	; (1a0043dc <Chip_Clock_CalcMainPLLValue+0xd0>)
1a004332:	4293      	cmp	r3, r2
1a004334:	d903      	bls.n	1a00433e <Chip_Clock_CalcMainPLLValue+0x32>
1a004336:	683b      	ldr	r3, [r7, #0]
1a004338:	695b      	ldr	r3, [r3, #20]
1a00433a:	2b00      	cmp	r3, #0
1a00433c:	d102      	bne.n	1a004344 <Chip_Clock_CalcMainPLLValue+0x38>
		return -1;
1a00433e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a004342:	e044      	b.n	1a0043ce <Chip_Clock_CalcMainPLLValue+0xc2>
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a004344:	683b      	ldr	r3, [r7, #0]
1a004346:	2280      	movs	r2, #128	; 0x80
1a004348:	601a      	str	r2, [r3, #0]
	ppll->nsel = 0;
1a00434a:	683b      	ldr	r3, [r7, #0]
1a00434c:	2200      	movs	r2, #0
1a00434e:	609a      	str	r2, [r3, #8]
	ppll->psel = 0;
1a004350:	683b      	ldr	r3, [r7, #0]
1a004352:	2200      	movs	r2, #0
1a004354:	60da      	str	r2, [r3, #12]
	ppll->msel = freq / ppll->fin;
1a004356:	683b      	ldr	r3, [r7, #0]
1a004358:	695b      	ldr	r3, [r3, #20]
1a00435a:	687a      	ldr	r2, [r7, #4]
1a00435c:	fbb2 f3f3 	udiv	r3, r2, r3
1a004360:	461a      	mov	r2, r3
1a004362:	683b      	ldr	r3, [r7, #0]
1a004364:	611a      	str	r2, [r3, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a004366:	687b      	ldr	r3, [r7, #4]
1a004368:	4a1d      	ldr	r2, [pc, #116]	; (1a0043e0 <Chip_Clock_CalcMainPLLValue+0xd4>)
1a00436a:	4293      	cmp	r3, r2
1a00436c:	d909      	bls.n	1a004382 <Chip_Clock_CalcMainPLLValue+0x76>
1a00436e:	683b      	ldr	r3, [r7, #0]
1a004370:	691b      	ldr	r3, [r3, #16]
1a004372:	461a      	mov	r2, r3
1a004374:	683b      	ldr	r3, [r7, #0]
1a004376:	695b      	ldr	r3, [r3, #20]
1a004378:	fb03 f302 	mul.w	r3, r3, r2
1a00437c:	687a      	ldr	r2, [r7, #4]
1a00437e:	429a      	cmp	r2, r3
1a004380:	d00f      	beq.n	1a0043a2 <Chip_Clock_CalcMainPLLValue+0x96>
		pll_get_frac(freq, ppll);
1a004382:	6839      	ldr	r1, [r7, #0]
1a004384:	6878      	ldr	r0, [r7, #4]
1a004386:	f7ff fe61 	bl	1a00404c <pll_get_frac>
		if (!ppll->nsel) {
1a00438a:	683b      	ldr	r3, [r7, #0]
1a00438c:	689b      	ldr	r3, [r3, #8]
1a00438e:	2b00      	cmp	r3, #0
1a004390:	d102      	bne.n	1a004398 <Chip_Clock_CalcMainPLLValue+0x8c>
			return -1;
1a004392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a004396:	e01a      	b.n	1a0043ce <Chip_Clock_CalcMainPLLValue+0xc2>
		}
		ppll->nsel --;
1a004398:	683b      	ldr	r3, [r7, #0]
1a00439a:	689b      	ldr	r3, [r3, #8]
1a00439c:	1e5a      	subs	r2, r3, #1
1a00439e:	683b      	ldr	r3, [r7, #0]
1a0043a0:	609a      	str	r2, [r3, #8]
	}

	if (ppll->msel == 0) {
1a0043a2:	683b      	ldr	r3, [r7, #0]
1a0043a4:	691b      	ldr	r3, [r3, #16]
1a0043a6:	2b00      	cmp	r3, #0
1a0043a8:	d102      	bne.n	1a0043b0 <Chip_Clock_CalcMainPLLValue+0xa4>
		return - 1;
1a0043aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0043ae:	e00e      	b.n	1a0043ce <Chip_Clock_CalcMainPLLValue+0xc2>
	}

	if (ppll->psel) {
1a0043b0:	683b      	ldr	r3, [r7, #0]
1a0043b2:	68db      	ldr	r3, [r3, #12]
1a0043b4:	2b00      	cmp	r3, #0
1a0043b6:	d004      	beq.n	1a0043c2 <Chip_Clock_CalcMainPLLValue+0xb6>
		ppll->psel --;
1a0043b8:	683b      	ldr	r3, [r7, #0]
1a0043ba:	68db      	ldr	r3, [r3, #12]
1a0043bc:	1e5a      	subs	r2, r3, #1
1a0043be:	683b      	ldr	r3, [r7, #0]
1a0043c0:	60da      	str	r2, [r3, #12]
	}

	ppll->msel --;
1a0043c2:	683b      	ldr	r3, [r7, #0]
1a0043c4:	691b      	ldr	r3, [r3, #16]
1a0043c6:	1e5a      	subs	r2, r3, #1
1a0043c8:	683b      	ldr	r3, [r7, #0]
1a0043ca:	611a      	str	r2, [r3, #16]

	return 0;
1a0043cc:	2300      	movs	r3, #0
}
1a0043ce:	4618      	mov	r0, r3
1a0043d0:	3708      	adds	r7, #8
1a0043d2:	46bd      	mov	sp, r7
1a0043d4:	bd80      	pop	{r7, pc}
1a0043d6:	bf00      	nop
1a0043d8:	0c28cb00 	.word	0x0c28cb00
1a0043dc:	0094c5ef 	.word	0x0094c5ef
1a0043e0:	094c5eff 	.word	0x094c5eff

1a0043e4 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a0043e4:	b580      	push	{r7, lr}
1a0043e6:	b08c      	sub	sp, #48	; 0x30
1a0043e8:	af00      	add	r7, sp, #0
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0043ea:	4b2c      	ldr	r3, [pc, #176]	; (1a00449c <Chip_Clock_GetMainPLLHz+0xb8>)
1a0043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a0043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0043f2:	0e1b      	lsrs	r3, r3, #24
1a0043f4:	b2db      	uxtb	r3, r3
1a0043f6:	f003 030f 	and.w	r3, r3, #15
1a0043fa:	b2db      	uxtb	r3, r3
1a0043fc:	4618      	mov	r0, r3
1a0043fe:	f000 f88d 	bl	1a00451c <Chip_Clock_GetClockInputHz>
1a004402:	62b8      	str	r0, [r7, #40]	; 0x28
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a004404:	4b26      	ldr	r3, [pc, #152]	; (1a0044a0 <Chip_Clock_GetMainPLLHz+0xbc>)
1a004406:	681b      	ldr	r3, [r3, #0]
1a004408:	607b      	str	r3, [r7, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00440a:	4b24      	ldr	r3, [pc, #144]	; (1a00449c <Chip_Clock_GetMainPLLHz+0xb8>)
1a00440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a00440e:	f003 0301 	and.w	r3, r3, #1
1a004412:	2b00      	cmp	r3, #0
1a004414:	d101      	bne.n	1a00441a <Chip_Clock_GetMainPLLHz+0x36>
		return 0;
1a004416:	2300      	movs	r3, #0
1a004418:	e03b      	b.n	1a004492 <Chip_Clock_GetMainPLLHz+0xae>
	}

	msel = (PLLReg >> 16) & 0xFF;
1a00441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00441c:	0c1b      	lsrs	r3, r3, #16
1a00441e:	b2db      	uxtb	r3, r3
1a004420:	627b      	str	r3, [r7, #36]	; 0x24
	nsel = (PLLReg >> 12) & 0x3;
1a004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a004424:	0b1b      	lsrs	r3, r3, #12
1a004426:	f003 0303 	and.w	r3, r3, #3
1a00442a:	623b      	str	r3, [r7, #32]
	psel = (PLLReg >> 8) & 0x3;
1a00442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00442e:	0a1b      	lsrs	r3, r3, #8
1a004430:	f003 0303 	and.w	r3, r3, #3
1a004434:	61fb      	str	r3, [r7, #28]
	direct = (PLLReg >> 7) & 0x1;
1a004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a004438:	09db      	lsrs	r3, r3, #7
1a00443a:	f003 0301 	and.w	r3, r3, #1
1a00443e:	61bb      	str	r3, [r7, #24]
	fbsel = (PLLReg >> 6) & 0x1;
1a004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a004442:	099b      	lsrs	r3, r3, #6
1a004444:	f003 0301 	and.w	r3, r3, #1
1a004448:	617b      	str	r3, [r7, #20]

	m = msel + 1;
1a00444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a00444c:	3301      	adds	r3, #1
1a00444e:	613b      	str	r3, [r7, #16]
	n = nsel + 1;
1a004450:	6a3b      	ldr	r3, [r7, #32]
1a004452:	3301      	adds	r3, #1
1a004454:	60fb      	str	r3, [r7, #12]
	p = ptab[psel];
1a004456:	1d3a      	adds	r2, r7, #4
1a004458:	69fb      	ldr	r3, [r7, #28]
1a00445a:	4413      	add	r3, r2
1a00445c:	781b      	ldrb	r3, [r3, #0]
1a00445e:	60bb      	str	r3, [r7, #8]

	if (direct || fbsel) {
1a004460:	69bb      	ldr	r3, [r7, #24]
1a004462:	2b00      	cmp	r3, #0
1a004464:	d102      	bne.n	1a00446c <Chip_Clock_GetMainPLLHz+0x88>
1a004466:	697b      	ldr	r3, [r7, #20]
1a004468:	2b00      	cmp	r3, #0
1a00446a:	d007      	beq.n	1a00447c <Chip_Clock_GetMainPLLHz+0x98>
		return m * (freq / n);
1a00446c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1a00446e:	68fb      	ldr	r3, [r7, #12]
1a004470:	fbb2 f3f3 	udiv	r3, r2, r3
1a004474:	693a      	ldr	r2, [r7, #16]
1a004476:	fb02 f303 	mul.w	r3, r2, r3
1a00447a:	e00a      	b.n	1a004492 <Chip_Clock_GetMainPLLHz+0xae>
	}

	return (m / (2 * p)) * (freq / n);
1a00447c:	68bb      	ldr	r3, [r7, #8]
1a00447e:	005b      	lsls	r3, r3, #1
1a004480:	693a      	ldr	r2, [r7, #16]
1a004482:	fbb2 f3f3 	udiv	r3, r2, r3
1a004486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1a004488:	68fa      	ldr	r2, [r7, #12]
1a00448a:	fbb1 f2f2 	udiv	r2, r1, r2
1a00448e:	fb02 f303 	mul.w	r3, r2, r3
}
1a004492:	4618      	mov	r0, r3
1a004494:	3730      	adds	r7, #48	; 0x30
1a004496:	46bd      	mov	sp, r7
1a004498:	bd80      	pop	{r7, pc}
1a00449a:	bf00      	nop
1a00449c:	40050000 	.word	0x40050000
1a0044a0:	1a00b034 	.word	0x1a00b034

1a0044a4 <Chip_Clock_GetDividerSource>:
	}
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
1a0044a4:	b480      	push	{r7}
1a0044a6:	b085      	sub	sp, #20
1a0044a8:	af00      	add	r7, sp, #0
1a0044aa:	4603      	mov	r3, r0
1a0044ac:	71fb      	strb	r3, [r7, #7]
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0044ae:	4a0c      	ldr	r2, [pc, #48]	; (1a0044e0 <Chip_Clock_GetDividerSource+0x3c>)
1a0044b0:	79fb      	ldrb	r3, [r7, #7]
1a0044b2:	3312      	adds	r3, #18
1a0044b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0044b8:	60fb      	str	r3, [r7, #12]

	if (reg & 1) {	/* divider is powered down */
1a0044ba:	68fb      	ldr	r3, [r7, #12]
1a0044bc:	f003 0301 	and.w	r3, r3, #1
1a0044c0:	2b00      	cmp	r3, #0
1a0044c2:	d001      	beq.n	1a0044c8 <Chip_Clock_GetDividerSource+0x24>
		return CLKINPUT_PD;
1a0044c4:	2311      	movs	r3, #17
1a0044c6:	e005      	b.n	1a0044d4 <Chip_Clock_GetDividerSource+0x30>
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0044c8:	68fb      	ldr	r3, [r7, #12]
1a0044ca:	0e1b      	lsrs	r3, r3, #24
1a0044cc:	b2db      	uxtb	r3, r3
1a0044ce:	f003 031f 	and.w	r3, r3, #31
1a0044d2:	b2db      	uxtb	r3, r3
}
1a0044d4:	4618      	mov	r0, r3
1a0044d6:	3714      	adds	r7, #20
1a0044d8:	46bd      	mov	sp, r7
1a0044da:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0044de:	4770      	bx	lr
1a0044e0:	40050000 	.word	0x40050000

1a0044e4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
1a0044e4:	b480      	push	{r7}
1a0044e6:	b083      	sub	sp, #12
1a0044e8:	af00      	add	r7, sp, #0
1a0044ea:	4603      	mov	r3, r0
1a0044ec:	71fb      	strb	r3, [r7, #7]
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0044ee:	4a09      	ldr	r2, [pc, #36]	; (1a004514 <Chip_Clock_GetDividerDivisor+0x30>)
1a0044f0:	79fb      	ldrb	r3, [r7, #7]
1a0044f2:	3312      	adds	r3, #18
1a0044f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0044f8:	089b      	lsrs	r3, r3, #2
1a0044fa:	b2da      	uxtb	r2, r3
1a0044fc:	79fb      	ldrb	r3, [r7, #7]
1a0044fe:	4906      	ldr	r1, [pc, #24]	; (1a004518 <Chip_Clock_GetDividerDivisor+0x34>)
1a004500:	5ccb      	ldrb	r3, [r1, r3]
1a004502:	4013      	ands	r3, r2
1a004504:	b2db      	uxtb	r3, r3
}
1a004506:	4618      	mov	r0, r3
1a004508:	370c      	adds	r7, #12
1a00450a:	46bd      	mov	sp, r7
1a00450c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004510:	4770      	bx	lr
1a004512:	bf00      	nop
1a004514:	40050000 	.word	0x40050000
1a004518:	1a00b038 	.word	0x1a00b038

1a00451c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00451c:	b580      	push	{r7, lr}
1a00451e:	b084      	sub	sp, #16
1a004520:	af00      	add	r7, sp, #0
1a004522:	4603      	mov	r3, r0
1a004524:	71fb      	strb	r3, [r7, #7]
	uint32_t rate = 0;
1a004526:	2300      	movs	r3, #0
1a004528:	60fb      	str	r3, [r7, #12]

	switch (input) {
1a00452a:	79fb      	ldrb	r3, [r7, #7]
1a00452c:	2b11      	cmp	r3, #17
1a00452e:	d87f      	bhi.n	1a004630 <Chip_Clock_GetClockInputHz+0x114>
1a004530:	a201      	add	r2, pc, #4	; (adr r2, 1a004538 <Chip_Clock_GetClockInputHz+0x1c>)
1a004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a004536:	bf00      	nop
1a004538:	1a004581 	.word	0x1a004581
1a00453c:	1a004589 	.word	0x1a004589
1a004540:	1a00458f 	.word	0x1a00458f
1a004544:	1a0045a3 	.word	0x1a0045a3
1a004548:	1a0045bd 	.word	0x1a0045bd
1a00454c:	1a004631 	.word	0x1a004631
1a004550:	1a0045c5 	.word	0x1a0045c5
1a004554:	1a0045cd 	.word	0x1a0045cd
1a004558:	1a0045d5 	.word	0x1a0045d5
1a00455c:	1a0045dd 	.word	0x1a0045dd
1a004560:	1a004631 	.word	0x1a004631
1a004564:	1a004631 	.word	0x1a004631
1a004568:	1a0045e5 	.word	0x1a0045e5
1a00456c:	1a0045f3 	.word	0x1a0045f3
1a004570:	1a004601 	.word	0x1a004601
1a004574:	1a00460f 	.word	0x1a00460f
1a004578:	1a00461d 	.word	0x1a00461d
1a00457c:	1a00462b 	.word	0x1a00462b
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a004580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1a004584:	60fb      	str	r3, [r7, #12]
		break;
1a004586:	e056      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a004588:	4b2d      	ldr	r3, [pc, #180]	; (1a004640 <Chip_Clock_GetClockInputHz+0x124>)
1a00458a:	60fb      	str	r3, [r7, #12]
		break;
1a00458c:	e053      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00458e:	4b2d      	ldr	r3, [pc, #180]	; (1a004644 <Chip_Clock_GetClockInputHz+0x128>)
1a004590:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a004594:	f003 0307 	and.w	r3, r3, #7
1a004598:	2b04      	cmp	r3, #4
1a00459a:	d04b      	beq.n	1a004634 <Chip_Clock_GetClockInputHz+0x118>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00459c:	4b2a      	ldr	r3, [pc, #168]	; (1a004648 <Chip_Clock_GetClockInputHz+0x12c>)
1a00459e:	60fb      	str	r3, [r7, #12]
		}
		break;
1a0045a0:	e048      	b.n	1a004634 <Chip_Clock_GetClockInputHz+0x118>

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0045a2:	4b28      	ldr	r3, [pc, #160]	; (1a004644 <Chip_Clock_GetClockInputHz+0x128>)
1a0045a4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0045a8:	f003 0307 	and.w	r3, r3, #7
1a0045ac:	2b04      	cmp	r3, #4
1a0045ae:	d002      	beq.n	1a0045b6 <Chip_Clock_GetClockInputHz+0x9a>
			rate = 25000000; /* MII uses 25 MHz */
1a0045b0:	4b25      	ldr	r3, [pc, #148]	; (1a004648 <Chip_Clock_GetClockInputHz+0x12c>)
1a0045b2:	60fb      	str	r3, [r7, #12]
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;
1a0045b4:	e03f      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>
			rate = 50000000; /* RMII uses 50 MHz */
1a0045b6:	4b25      	ldr	r3, [pc, #148]	; (1a00464c <Chip_Clock_GetClockInputHz+0x130>)
1a0045b8:	60fb      	str	r3, [r7, #12]
		break;
1a0045ba:	e03c      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0045bc:	4b24      	ldr	r3, [pc, #144]	; (1a004650 <Chip_Clock_GetClockInputHz+0x134>)
1a0045be:	681b      	ldr	r3, [r3, #0]
1a0045c0:	60fb      	str	r3, [r7, #12]
		break;
1a0045c2:	e038      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0045c4:	4b23      	ldr	r3, [pc, #140]	; (1a004654 <Chip_Clock_GetClockInputHz+0x138>)
1a0045c6:	681b      	ldr	r3, [r3, #0]
1a0045c8:	60fb      	str	r3, [r7, #12]
		break;
1a0045ca:	e034      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0045cc:	4b22      	ldr	r3, [pc, #136]	; (1a004658 <Chip_Clock_GetClockInputHz+0x13c>)
1a0045ce:	681b      	ldr	r3, [r3, #0]
1a0045d0:	60fb      	str	r3, [r7, #12]
		break;
1a0045d2:	e030      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0045d4:	4b20      	ldr	r3, [pc, #128]	; (1a004658 <Chip_Clock_GetClockInputHz+0x13c>)
1a0045d6:	685b      	ldr	r3, [r3, #4]
1a0045d8:	60fb      	str	r3, [r7, #12]
		break;
1a0045da:	e02c      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0045dc:	f7ff ff02 	bl	1a0043e4 <Chip_Clock_GetMainPLLHz>
1a0045e0:	60f8      	str	r0, [r7, #12]
		break;
1a0045e2:	e028      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0045e4:	79fb      	ldrb	r3, [r7, #7]
1a0045e6:	2100      	movs	r1, #0
1a0045e8:	4618      	mov	r0, r3
1a0045ea:	f7ff fdef 	bl	1a0041cc <Chip_Clock_GetDivRate>
1a0045ee:	60f8      	str	r0, [r7, #12]
		break;
1a0045f0:	e021      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0045f2:	79fb      	ldrb	r3, [r7, #7]
1a0045f4:	2101      	movs	r1, #1
1a0045f6:	4618      	mov	r0, r3
1a0045f8:	f7ff fde8 	bl	1a0041cc <Chip_Clock_GetDivRate>
1a0045fc:	60f8      	str	r0, [r7, #12]
		break;
1a0045fe:	e01a      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a004600:	79fb      	ldrb	r3, [r7, #7]
1a004602:	2102      	movs	r1, #2
1a004604:	4618      	mov	r0, r3
1a004606:	f7ff fde1 	bl	1a0041cc <Chip_Clock_GetDivRate>
1a00460a:	60f8      	str	r0, [r7, #12]
		break;
1a00460c:	e013      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00460e:	79fb      	ldrb	r3, [r7, #7]
1a004610:	2103      	movs	r1, #3
1a004612:	4618      	mov	r0, r3
1a004614:	f7ff fdda 	bl	1a0041cc <Chip_Clock_GetDivRate>
1a004618:	60f8      	str	r0, [r7, #12]
		break;
1a00461a:	e00c      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00461c:	79fb      	ldrb	r3, [r7, #7]
1a00461e:	2104      	movs	r1, #4
1a004620:	4618      	mov	r0, r3
1a004622:	f7ff fdd3 	bl	1a0041cc <Chip_Clock_GetDivRate>
1a004626:	60f8      	str	r0, [r7, #12]
		break;
1a004628:	e005      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	case CLKINPUT_PD:
		rate = 0;
1a00462a:	2300      	movs	r3, #0
1a00462c:	60fb      	str	r3, [r7, #12]
		break;
1a00462e:	e002      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>

	default:
		break;
1a004630:	bf00      	nop
1a004632:	e000      	b.n	1a004636 <Chip_Clock_GetClockInputHz+0x11a>
		break;
1a004634:	bf00      	nop
	}

	return rate;
1a004636:	68fb      	ldr	r3, [r7, #12]
}
1a004638:	4618      	mov	r0, r3
1a00463a:	3710      	adds	r7, #16
1a00463c:	46bd      	mov	sp, r7
1a00463e:	bd80      	pop	{r7, pc}
1a004640:	00b71b00 	.word	0x00b71b00
1a004644:	40043000 	.word	0x40043000
1a004648:	017d7840 	.word	0x017d7840
1a00464c:	02faf080 	.word	0x02faf080
1a004650:	1a00af10 	.word	0x1a00af10
1a004654:	1a00af14 	.word	0x1a00af14
1a004658:	10002b1c 	.word	0x10002b1c

1a00465c <Chip_Clock_GetBaseClocktHz>:

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a00465c:	b580      	push	{r7, lr}
1a00465e:	b082      	sub	sp, #8
1a004660:	af00      	add	r7, sp, #0
1a004662:	4603      	mov	r3, r0
1a004664:	71fb      	strb	r3, [r7, #7]
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a004666:	79fb      	ldrb	r3, [r7, #7]
1a004668:	4618      	mov	r0, r3
1a00466a:	f000 f857 	bl	1a00471c <Chip_Clock_GetBaseClock>
1a00466e:	4603      	mov	r3, r0
1a004670:	4618      	mov	r0, r3
1a004672:	f7ff ff53 	bl	1a00451c <Chip_Clock_GetClockInputHz>
1a004676:	4603      	mov	r3, r0
}
1a004678:	4618      	mov	r0, r3
1a00467a:	3708      	adds	r7, #8
1a00467c:	46bd      	mov	sp, r7
1a00467e:	bd80      	pop	{r7, pc}

1a004680 <Chip_Clock_SetBaseClock>:

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a004680:	b490      	push	{r4, r7}
1a004682:	b084      	sub	sp, #16
1a004684:	af00      	add	r7, sp, #0
1a004686:	4604      	mov	r4, r0
1a004688:	4608      	mov	r0, r1
1a00468a:	4611      	mov	r1, r2
1a00468c:	461a      	mov	r2, r3
1a00468e:	4623      	mov	r3, r4
1a004690:	71fb      	strb	r3, [r7, #7]
1a004692:	4603      	mov	r3, r0
1a004694:	71bb      	strb	r3, [r7, #6]
1a004696:	460b      	mov	r3, r1
1a004698:	717b      	strb	r3, [r7, #5]
1a00469a:	4613      	mov	r3, r2
1a00469c:	713b      	strb	r3, [r7, #4]
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00469e:	4a1d      	ldr	r2, [pc, #116]	; (1a004714 <Chip_Clock_SetBaseClock+0x94>)
1a0046a0:	79fb      	ldrb	r3, [r7, #7]
1a0046a2:	3316      	adds	r3, #22
1a0046a4:	009b      	lsls	r3, r3, #2
1a0046a6:	4413      	add	r3, r2
1a0046a8:	685b      	ldr	r3, [r3, #4]
1a0046aa:	60fb      	str	r3, [r7, #12]

	if (BaseClock < CLK_BASE_NONE) {
1a0046ac:	79fb      	ldrb	r3, [r7, #7]
1a0046ae:	2b1b      	cmp	r3, #27
1a0046b0:	d822      	bhi.n	1a0046f8 <Chip_Clock_SetBaseClock+0x78>
		if (Input != CLKINPUT_PD) {
1a0046b2:	79bb      	ldrb	r3, [r7, #6]
1a0046b4:	2b11      	cmp	r3, #17
1a0046b6:	d028      	beq.n	1a00470a <Chip_Clock_SetBaseClock+0x8a>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0046b8:	68fa      	ldr	r2, [r7, #12]
1a0046ba:	4b17      	ldr	r3, [pc, #92]	; (1a004718 <Chip_Clock_SetBaseClock+0x98>)
1a0046bc:	4013      	ands	r3, r2
1a0046be:	60fb      	str	r3, [r7, #12]

			if (autoblocken) {
1a0046c0:	797b      	ldrb	r3, [r7, #5]
1a0046c2:	2b00      	cmp	r3, #0
1a0046c4:	d003      	beq.n	1a0046ce <Chip_Clock_SetBaseClock+0x4e>
				reg |= (1 << 11);
1a0046c6:	68fb      	ldr	r3, [r7, #12]
1a0046c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0046cc:	60fb      	str	r3, [r7, #12]
			}
			if (powerdn) {
1a0046ce:	793b      	ldrb	r3, [r7, #4]
1a0046d0:	2b00      	cmp	r3, #0
1a0046d2:	d003      	beq.n	1a0046dc <Chip_Clock_SetBaseClock+0x5c>
				reg |= (1 << 0);
1a0046d4:	68fb      	ldr	r3, [r7, #12]
1a0046d6:	f043 0301 	orr.w	r3, r3, #1
1a0046da:	60fb      	str	r3, [r7, #12]
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0046dc:	79bb      	ldrb	r3, [r7, #6]
1a0046de:	061b      	lsls	r3, r3, #24
1a0046e0:	461a      	mov	r2, r3
1a0046e2:	68fb      	ldr	r3, [r7, #12]
1a0046e4:	4313      	orrs	r3, r2
1a0046e6:	60fb      	str	r3, [r7, #12]

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0046e8:	4a0a      	ldr	r2, [pc, #40]	; (1a004714 <Chip_Clock_SetBaseClock+0x94>)
1a0046ea:	79fb      	ldrb	r3, [r7, #7]
1a0046ec:	3316      	adds	r3, #22
1a0046ee:	009b      	lsls	r3, r3, #2
1a0046f0:	4413      	add	r3, r2
1a0046f2:	68fa      	ldr	r2, [r7, #12]
1a0046f4:	605a      	str	r2, [r3, #4]
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
	}
}
1a0046f6:	e008      	b.n	1a00470a <Chip_Clock_SetBaseClock+0x8a>
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0046f8:	4906      	ldr	r1, [pc, #24]	; (1a004714 <Chip_Clock_SetBaseClock+0x94>)
1a0046fa:	79fb      	ldrb	r3, [r7, #7]
1a0046fc:	68fa      	ldr	r2, [r7, #12]
1a0046fe:	f042 0201 	orr.w	r2, r2, #1
1a004702:	3316      	adds	r3, #22
1a004704:	009b      	lsls	r3, r3, #2
1a004706:	440b      	add	r3, r1
1a004708:	605a      	str	r2, [r3, #4]
}
1a00470a:	bf00      	nop
1a00470c:	3710      	adds	r7, #16
1a00470e:	46bd      	mov	sp, r7
1a004710:	bc90      	pop	{r4, r7}
1a004712:	4770      	bx	lr
1a004714:	40050000 	.word	0x40050000
1a004718:	e0fff7fe 	.word	0xe0fff7fe

1a00471c <Chip_Clock_GetBaseClock>:
	return enabled;
}

/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
1a00471c:	b480      	push	{r7}
1a00471e:	b085      	sub	sp, #20
1a004720:	af00      	add	r7, sp, #0
1a004722:	4603      	mov	r3, r0
1a004724:	71fb      	strb	r3, [r7, #7]
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a004726:	79fb      	ldrb	r3, [r7, #7]
1a004728:	2b1b      	cmp	r3, #27
1a00472a:	d901      	bls.n	1a004730 <Chip_Clock_GetBaseClock+0x14>
		return CLKINPUT_PD;
1a00472c:	2311      	movs	r3, #17
1a00472e:	e013      	b.n	1a004758 <Chip_Clock_GetBaseClock+0x3c>
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a004730:	4a0c      	ldr	r2, [pc, #48]	; (1a004764 <Chip_Clock_GetBaseClock+0x48>)
1a004732:	79fb      	ldrb	r3, [r7, #7]
1a004734:	3316      	adds	r3, #22
1a004736:	009b      	lsls	r3, r3, #2
1a004738:	4413      	add	r3, r2
1a00473a:	685b      	ldr	r3, [r3, #4]
1a00473c:	60fb      	str	r3, [r7, #12]

	/* base clock is powered down? */
	if (reg & 1) {
1a00473e:	68fb      	ldr	r3, [r7, #12]
1a004740:	f003 0301 	and.w	r3, r3, #1
1a004744:	2b00      	cmp	r3, #0
1a004746:	d001      	beq.n	1a00474c <Chip_Clock_GetBaseClock+0x30>
		return CLKINPUT_PD;
1a004748:	2311      	movs	r3, #17
1a00474a:	e005      	b.n	1a004758 <Chip_Clock_GetBaseClock+0x3c>
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00474c:	68fb      	ldr	r3, [r7, #12]
1a00474e:	0e1b      	lsrs	r3, r3, #24
1a004750:	b2db      	uxtb	r3, r3
1a004752:	f003 031f 	and.w	r3, r3, #31
1a004756:	b2db      	uxtb	r3, r3
}
1a004758:	4618      	mov	r0, r3
1a00475a:	3714      	adds	r7, #20
1a00475c:	46bd      	mov	sp, r7
1a00475e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004762:	4770      	bx	lr
1a004764:	40050000 	.word	0x40050000

1a004768 <Chip_Clock_EnableOpts>:

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
1a004768:	b480      	push	{r7}
1a00476a:	b085      	sub	sp, #20
1a00476c:	af00      	add	r7, sp, #0
1a00476e:	603b      	str	r3, [r7, #0]
1a004770:	4603      	mov	r3, r0
1a004772:	80fb      	strh	r3, [r7, #6]
1a004774:	460b      	mov	r3, r1
1a004776:	717b      	strb	r3, [r7, #5]
1a004778:	4613      	mov	r3, r2
1a00477a:	713b      	strb	r3, [r7, #4]
	uint32_t reg = 1;
1a00477c:	2301      	movs	r3, #1
1a00477e:	60fb      	str	r3, [r7, #12]

	if (autoen) {
1a004780:	797b      	ldrb	r3, [r7, #5]
1a004782:	2b00      	cmp	r3, #0
1a004784:	d003      	beq.n	1a00478e <Chip_Clock_EnableOpts+0x26>
		reg |= (1 << 1);
1a004786:	68fb      	ldr	r3, [r7, #12]
1a004788:	f043 0302 	orr.w	r3, r3, #2
1a00478c:	60fb      	str	r3, [r7, #12]
	}
	if (wakeupen) {
1a00478e:	793b      	ldrb	r3, [r7, #4]
1a004790:	2b00      	cmp	r3, #0
1a004792:	d003      	beq.n	1a00479c <Chip_Clock_EnableOpts+0x34>
		reg |= (1 << 2);
1a004794:	68fb      	ldr	r3, [r7, #12]
1a004796:	f043 0304 	orr.w	r3, r3, #4
1a00479a:	60fb      	str	r3, [r7, #12]
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00479c:	683b      	ldr	r3, [r7, #0]
1a00479e:	2b02      	cmp	r3, #2
1a0047a0:	d103      	bne.n	1a0047aa <Chip_Clock_EnableOpts+0x42>
		reg |= (1 << 5);
1a0047a2:	68fb      	ldr	r3, [r7, #12]
1a0047a4:	f043 0320 	orr.w	r3, r3, #32
1a0047a8:	60fb      	str	r3, [r7, #12]
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0047aa:	88fb      	ldrh	r3, [r7, #6]
1a0047ac:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a0047b0:	d308      	bcc.n	1a0047c4 <Chip_Clock_EnableOpts+0x5c>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0047b2:	490a      	ldr	r1, [pc, #40]	; (1a0047dc <Chip_Clock_EnableOpts+0x74>)
1a0047b4:	88fb      	ldrh	r3, [r7, #6]
1a0047b6:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a0047ba:	3320      	adds	r3, #32
1a0047bc:	68fa      	ldr	r2, [r7, #12]
1a0047be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
	}
}
1a0047c2:	e005      	b.n	1a0047d0 <Chip_Clock_EnableOpts+0x68>
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0047c4:	4906      	ldr	r1, [pc, #24]	; (1a0047e0 <Chip_Clock_EnableOpts+0x78>)
1a0047c6:	88fb      	ldrh	r3, [r7, #6]
1a0047c8:	3320      	adds	r3, #32
1a0047ca:	68fa      	ldr	r2, [r7, #12]
1a0047cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
1a0047d0:	bf00      	nop
1a0047d2:	3714      	adds	r7, #20
1a0047d4:	46bd      	mov	sp, r7
1a0047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0047da:	4770      	bx	lr
1a0047dc:	40052000 	.word	0x40052000
1a0047e0:	40051000 	.word	0x40051000

1a0047e4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
1a0047e4:	b480      	push	{r7}
1a0047e6:	b083      	sub	sp, #12
1a0047e8:	af00      	add	r7, sp, #0
1a0047ea:	4603      	mov	r3, r0
1a0047ec:	80fb      	strh	r3, [r7, #6]
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0047ee:	88fb      	ldrh	r3, [r7, #6]
1a0047f0:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a0047f4:	d310      	bcc.n	1a004818 <Chip_Clock_Enable+0x34>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0047f6:	4a11      	ldr	r2, [pc, #68]	; (1a00483c <Chip_Clock_Enable+0x58>)
1a0047f8:	88fb      	ldrh	r3, [r7, #6]
1a0047fa:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a0047fe:	3320      	adds	r3, #32
1a004800:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a004804:	490d      	ldr	r1, [pc, #52]	; (1a00483c <Chip_Clock_Enable+0x58>)
1a004806:	88fb      	ldrh	r3, [r7, #6]
1a004808:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a00480c:	f042 0201 	orr.w	r2, r2, #1
1a004810:	3320      	adds	r3, #32
1a004812:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
	}
}
1a004816:	e00b      	b.n	1a004830 <Chip_Clock_Enable+0x4c>
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a004818:	4a09      	ldr	r2, [pc, #36]	; (1a004840 <Chip_Clock_Enable+0x5c>)
1a00481a:	88fb      	ldrh	r3, [r7, #6]
1a00481c:	3320      	adds	r3, #32
1a00481e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a004822:	4907      	ldr	r1, [pc, #28]	; (1a004840 <Chip_Clock_Enable+0x5c>)
1a004824:	88fb      	ldrh	r3, [r7, #6]
1a004826:	f042 0201 	orr.w	r2, r2, #1
1a00482a:	3320      	adds	r3, #32
1a00482c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
1a004830:	bf00      	nop
1a004832:	370c      	adds	r7, #12
1a004834:	46bd      	mov	sp, r7
1a004836:	f85d 7b04 	ldr.w	r7, [sp], #4
1a00483a:	4770      	bx	lr
1a00483c:	40052000 	.word	0x40052000
1a004840:	40051000 	.word	0x40051000

1a004844 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a004844:	b580      	push	{r7, lr}
1a004846:	b086      	sub	sp, #24
1a004848:	af00      	add	r7, sp, #0
1a00484a:	4603      	mov	r3, r0
1a00484c:	80fb      	strh	r3, [r7, #6]
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00484e:	88fb      	ldrh	r3, [r7, #6]
1a004850:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
1a004854:	d308      	bcc.n	1a004868 <Chip_Clock_GetRate+0x24>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a004856:	4a1b      	ldr	r2, [pc, #108]	; (1a0048c4 <Chip_Clock_GetRate+0x80>)
1a004858:	88fb      	ldrh	r3, [r7, #6]
1a00485a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
1a00485e:	3320      	adds	r3, #32
1a004860:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a004864:	617b      	str	r3, [r7, #20]
1a004866:	e005      	b.n	1a004874 <Chip_Clock_GetRate+0x30>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a004868:	4a17      	ldr	r2, [pc, #92]	; (1a0048c8 <Chip_Clock_GetRate+0x84>)
1a00486a:	88fb      	ldrh	r3, [r7, #6]
1a00486c:	3320      	adds	r3, #32
1a00486e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
1a004872:	617b      	str	r3, [r7, #20]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a004874:	697b      	ldr	r3, [r7, #20]
1a004876:	f003 0301 	and.w	r3, r3, #1
1a00487a:	2b00      	cmp	r3, #0
1a00487c:	d01b      	beq.n	1a0048b6 <Chip_Clock_GetRate+0x72>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00487e:	88fb      	ldrh	r3, [r7, #6]
1a004880:	4618      	mov	r0, r3
1a004882:	f7ff fcc3 	bl	1a00420c <Chip_Clock_FindBaseClock>
1a004886:	4603      	mov	r3, r0
1a004888:	72fb      	strb	r3, [r7, #11]

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00488a:	7afb      	ldrb	r3, [r7, #11]
1a00488c:	4618      	mov	r0, r3
1a00488e:	f7ff fee5 	bl	1a00465c <Chip_Clock_GetBaseClocktHz>
1a004892:	60f8      	str	r0, [r7, #12]

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a004894:	697b      	ldr	r3, [r7, #20]
1a004896:	095b      	lsrs	r3, r3, #5
1a004898:	f003 0307 	and.w	r3, r3, #7
1a00489c:	2b00      	cmp	r3, #0
1a00489e:	d102      	bne.n	1a0048a6 <Chip_Clock_GetRate+0x62>
			div = 1;
1a0048a0:	2301      	movs	r3, #1
1a0048a2:	613b      	str	r3, [r7, #16]
1a0048a4:	e001      	b.n	1a0048aa <Chip_Clock_GetRate+0x66>
		}
		else {
			div = 2;/* No other dividers supported */
1a0048a6:	2302      	movs	r3, #2
1a0048a8:	613b      	str	r3, [r7, #16]

		}
		rate = rate / div;
1a0048aa:	68fa      	ldr	r2, [r7, #12]
1a0048ac:	693b      	ldr	r3, [r7, #16]
1a0048ae:	fbb2 f3f3 	udiv	r3, r2, r3
1a0048b2:	60fb      	str	r3, [r7, #12]
1a0048b4:	e001      	b.n	1a0048ba <Chip_Clock_GetRate+0x76>
	}
	else {
		rate = 0;
1a0048b6:	2300      	movs	r3, #0
1a0048b8:	60fb      	str	r3, [r7, #12]
	}

	return rate;
1a0048ba:	68fb      	ldr	r3, [r7, #12]
}
1a0048bc:	4618      	mov	r0, r3
1a0048be:	3718      	adds	r7, #24
1a0048c0:	46bd      	mov	sp, r7
1a0048c2:	bd80      	pop	{r7, pc}
1a0048c4:	40052000 	.word	0x40052000
1a0048c8:	40051000 	.word	0x40051000

1a0048cc <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0048cc:	b480      	push	{r7}
1a0048ce:	b083      	sub	sp, #12
1a0048d0:	af00      	add	r7, sp, #0
1a0048d2:	6078      	str	r0, [r7, #4]
}
1a0048d4:	bf00      	nop
1a0048d6:	370c      	adds	r7, #12
1a0048d8:	46bd      	mov	sp, r7
1a0048da:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0048de:	4770      	bx	lr

1a0048e0 <Chip_Clock_DisableMainPLL>:
 * @return	none
 * Make sure the main PLL is not needed to clock the part before disabling it.
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
1a0048e0:	b480      	push	{r7}
1a0048e2:	af00      	add	r7, sp, #0
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0048e4:	4b05      	ldr	r3, [pc, #20]	; (1a0048fc <Chip_Clock_DisableMainPLL+0x1c>)
1a0048e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
1a0048e8:	4a04      	ldr	r2, [pc, #16]	; (1a0048fc <Chip_Clock_DisableMainPLL+0x1c>)
1a0048ea:	f043 0301 	orr.w	r3, r3, #1
1a0048ee:	6453      	str	r3, [r2, #68]	; 0x44
}
1a0048f0:	bf00      	nop
1a0048f2:	46bd      	mov	sp, r7
1a0048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
1a0048f8:	4770      	bx	lr
1a0048fa:	bf00      	nop
1a0048fc:	40050000 	.word	0x40050000

1a004900 <Chip_Clock_SetupMainPLL>:
 * @param	ppll	: Pointer to pll param structure #PLL_PARAM_T
 * @return	none
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
1a004900:	b480      	push	{r7}
1a004902:	b083      	sub	sp, #12
1a004904:	af00      	add	r7, sp, #0
1a004906:	6078      	str	r0, [r7, #4]
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a004908:	687b      	ldr	r3, [r7, #4]
1a00490a:	681b      	ldr	r3, [r3, #0]
1a00490c:	461a      	mov	r2, r3
1a00490e:	687b      	ldr	r3, [r7, #4]
1a004910:	791b      	ldrb	r3, [r3, #4]
1a004912:	061b      	lsls	r3, r3, #24
1a004914:	4313      	orrs	r3, r2
1a004916:	687a      	ldr	r2, [r7, #4]
1a004918:	6912      	ldr	r2, [r2, #16]
1a00491a:	0412      	lsls	r2, r2, #16
1a00491c:	4313      	orrs	r3, r2
1a00491e:	687a      	ldr	r2, [r7, #4]
1a004920:	6892      	ldr	r2, [r2, #8]
1a004922:	0312      	lsls	r2, r2, #12
1a004924:	4313      	orrs	r3, r2
1a004926:	687a      	ldr	r2, [r7, #4]
1a004928:	68d2      	ldr	r2, [r2, #12]
1a00492a:	0212      	lsls	r2, r2, #8
1a00492c:	4313      	orrs	r3, r2
1a00492e:	4a05      	ldr	r2, [pc, #20]	; (1a004944 <Chip_Clock_SetupMainPLL+0x44>)
1a004930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004934:	6453      	str	r3, [r2, #68]	; 0x44
}
1a004936:	bf00      	nop
1a004938:	370c      	adds	r7, #12
1a00493a:	46bd      	mov	sp, r7
1a00493c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004940:	4770      	bx	lr
1a004942:	bf00      	nop
1a004944:	40050000 	.word	0x40050000

1a004948 <Chip_Clock_MainPLLLocked>:
 * @brief	Wait for Main PLL to be locked
 * @return	1 - PLL is LOCKED; 0 - PLL is not locked
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
1a004948:	b480      	push	{r7}
1a00494a:	af00      	add	r7, sp, #0
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00494c:	4b06      	ldr	r3, [pc, #24]	; (1a004968 <Chip_Clock_MainPLLLocked+0x20>)
1a00494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1a004950:	f003 0301 	and.w	r3, r3, #1
1a004954:	2b00      	cmp	r3, #0
1a004956:	bf14      	ite	ne
1a004958:	2301      	movne	r3, #1
1a00495a:	2300      	moveq	r3, #0
1a00495c:	b2db      	uxtb	r3, r3
}
1a00495e:	4618      	mov	r0, r3
1a004960:	46bd      	mov	sp, r7
1a004962:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004966:	4770      	bx	lr
1a004968:	40050000 	.word	0x40050000

1a00496c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00496c:	b590      	push	{r4, r7, lr}
1a00496e:	b08f      	sub	sp, #60	; 0x3c
1a004970:	af00      	add	r7, sp, #0
1a004972:	4603      	mov	r3, r0
1a004974:	6039      	str	r1, [r7, #0]
1a004976:	71fb      	strb	r3, [r7, #7]
1a004978:	4613      	mov	r3, r2
1a00497a:	71bb      	strb	r3, [r7, #6]
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00497c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a004980:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t direct = 0, pdivide = 0;
1a004982:	2300      	movs	r3, #0
1a004984:	633b      	str	r3, [r7, #48]	; 0x30
1a004986:	2300      	movs	r3, #0
1a004988:	62fb      	str	r3, [r7, #44]	; 0x2c
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00498a:	79fb      	ldrb	r3, [r7, #7]
1a00498c:	2b06      	cmp	r3, #6
1a00498e:	d101      	bne.n	1a004994 <Chip_SetupCoreClock+0x28>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a004990:	f7ff fc84 	bl	1a00429c <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a004994:	79f9      	ldrb	r1, [r7, #7]
1a004996:	2300      	movs	r3, #0
1a004998:	2201      	movs	r2, #1
1a00499a:	2004      	movs	r0, #4
1a00499c:	f7ff fe70 	bl	1a004680 <Chip_Clock_SetBaseClock>
	Chip_Clock_DisableMainPLL(); /* Disable PLL */
1a0049a0:	f7ff ff9e 	bl	1a0048e0 <Chip_Clock_DisableMainPLL>

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0049a4:	79fb      	ldrb	r3, [r7, #7]
1a0049a6:	733b      	strb	r3, [r7, #12]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0049a8:	f107 0308 	add.w	r3, r7, #8
1a0049ac:	4619      	mov	r1, r3
1a0049ae:	6838      	ldr	r0, [r7, #0]
1a0049b0:	f7ff fcac 	bl	1a00430c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0049b4:	683b      	ldr	r3, [r7, #0]
1a0049b6:	4a3d      	ldr	r2, [pc, #244]	; (1a004aac <Chip_SetupCoreClock+0x140>)
1a0049b8:	4293      	cmp	r3, r2
1a0049ba:	d916      	bls.n	1a0049ea <Chip_SetupCoreClock+0x7e>
		if (ppll.ctrl & (1 << 6)) {
1a0049bc:	68bb      	ldr	r3, [r7, #8]
1a0049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
1a0049c2:	2b00      	cmp	r3, #0
1a0049c4:	d000      	beq.n	1a0049c8 <Chip_SetupCoreClock+0x5c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0049c6:	e7fe      	b.n	1a0049c6 <Chip_SetupCoreClock+0x5a>
		} else if (ppll.ctrl & (1 << 7)){
1a0049c8:	68bb      	ldr	r3, [r7, #8]
1a0049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
1a0049ce:	2b00      	cmp	r3, #0
1a0049d0:	d006      	beq.n	1a0049e0 <Chip_SetupCoreClock+0x74>
			direct = 1;
1a0049d2:	2301      	movs	r3, #1
1a0049d4:	633b      	str	r3, [r7, #48]	; 0x30
			ppll.ctrl &= ~(1 << 7);
1a0049d6:	68bb      	ldr	r3, [r7, #8]
1a0049d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0049dc:	60bb      	str	r3, [r7, #8]
1a0049de:	e004      	b.n	1a0049ea <Chip_SetupCoreClock+0x7e>
		} else {
			pdivide = 1;
1a0049e0:	2301      	movs	r3, #1
1a0049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			ppll.psel++;
1a0049e4:	697b      	ldr	r3, [r7, #20]
1a0049e6:	3301      	adds	r3, #1
1a0049e8:	617b      	str	r3, [r7, #20]
		}
	}

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);
1a0049ea:	f107 0308 	add.w	r3, r7, #8
1a0049ee:	4618      	mov	r0, r3
1a0049f0:	f7ff ff86 	bl	1a004900 <Chip_Clock_SetupMainPLL>

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0049f4:	bf00      	nop
1a0049f6:	f7ff ffa7 	bl	1a004948 <Chip_Clock_MainPLLLocked>
1a0049fa:	4603      	mov	r3, r0
1a0049fc:	2b00      	cmp	r3, #0
1a0049fe:	d0fa      	beq.n	1a0049f6 <Chip_SetupCoreClock+0x8a>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a004a00:	2300      	movs	r3, #0
1a004a02:	2201      	movs	r2, #1
1a004a04:	2109      	movs	r1, #9
1a004a06:	2004      	movs	r0, #4
1a004a08:	f7ff fe3a 	bl	1a004680 <Chip_Clock_SetBaseClock>

	if (direct) {
1a004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1a004a0e:	2b00      	cmp	r3, #0
1a004a10:	d012      	beq.n	1a004a38 <Chip_SetupCoreClock+0xcc>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a004a12:	f24c 3350 	movw	r3, #50000	; 0xc350
1a004a16:	62bb      	str	r3, [r7, #40]	; 0x28
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a004a18:	bf00      	nop
1a004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a004a1c:	1e5a      	subs	r2, r3, #1
1a004a1e:	62ba      	str	r2, [r7, #40]	; 0x28
1a004a20:	2b00      	cmp	r3, #0
1a004a22:	d1fa      	bne.n	1a004a1a <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a004a24:	68bb      	ldr	r3, [r7, #8]
1a004a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004a2a:	60bb      	str	r3, [r7, #8]
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
1a004a2c:	f107 0308 	add.w	r3, r7, #8
1a004a30:	4618      	mov	r0, r3
1a004a32:	f7ff ff65 	bl	1a004900 <Chip_Clock_SetupMainPLL>
1a004a36:	e013      	b.n	1a004a60 <Chip_SetupCoreClock+0xf4>
	} else if (pdivide) {
1a004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a004a3a:	2b00      	cmp	r3, #0
1a004a3c:	d010      	beq.n	1a004a60 <Chip_SetupCoreClock+0xf4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a004a3e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a004a42:	62bb      	str	r3, [r7, #40]	; 0x28
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a004a44:	bf00      	nop
1a004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
1a004a48:	1e5a      	subs	r2, r3, #1
1a004a4a:	62ba      	str	r2, [r7, #40]	; 0x28
1a004a4c:	2b00      	cmp	r3, #0
1a004a4e:	d1fa      	bne.n	1a004a46 <Chip_SetupCoreClock+0xda>
		ppll.psel--;
1a004a50:	697b      	ldr	r3, [r7, #20]
1a004a52:	3b01      	subs	r3, #1
1a004a54:	617b      	str	r3, [r7, #20]
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
1a004a56:	f107 0308 	add.w	r3, r7, #8
1a004a5a:	4618      	mov	r0, r3
1a004a5c:	f7ff ff50 	bl	1a004900 <Chip_Clock_SetupMainPLL>
	}

	if (setbase) {
1a004a60:	79bb      	ldrb	r3, [r7, #6]
1a004a62:	2b00      	cmp	r3, #0
1a004a64:	d01e      	beq.n	1a004aa4 <Chip_SetupCoreClock+0x138>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a004a66:	2300      	movs	r3, #0
1a004a68:	637b      	str	r3, [r7, #52]	; 0x34
1a004a6a:	e018      	b.n	1a004a9e <Chip_SetupCoreClock+0x132>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a004a6c:	4a10      	ldr	r2, [pc, #64]	; (1a004ab0 <Chip_SetupCoreClock+0x144>)
1a004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a004a70:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
1a004a74:	4a0e      	ldr	r2, [pc, #56]	; (1a004ab0 <Chip_SetupCoreClock+0x144>)
1a004a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a004a78:	009b      	lsls	r3, r3, #2
1a004a7a:	4413      	add	r3, r2
1a004a7c:	7859      	ldrb	r1, [r3, #1]
1a004a7e:	4a0c      	ldr	r2, [pc, #48]	; (1a004ab0 <Chip_SetupCoreClock+0x144>)
1a004a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a004a82:	009b      	lsls	r3, r3, #2
1a004a84:	4413      	add	r3, r2
1a004a86:	789c      	ldrb	r4, [r3, #2]
1a004a88:	4a09      	ldr	r2, [pc, #36]	; (1a004ab0 <Chip_SetupCoreClock+0x144>)
1a004a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a004a8c:	009b      	lsls	r3, r3, #2
1a004a8e:	4413      	add	r3, r2
1a004a90:	78db      	ldrb	r3, [r3, #3]
1a004a92:	4622      	mov	r2, r4
1a004a94:	f7ff fdf4 	bl	1a004680 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a004a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a004a9a:	3301      	adds	r3, #1
1a004a9c:	637b      	str	r3, [r7, #52]	; 0x34
1a004a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1a004aa0:	2b11      	cmp	r3, #17
1a004aa2:	d9e3      	bls.n	1a004a6c <Chip_SetupCoreClock+0x100>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a004aa4:	bf00      	nop
1a004aa6:	373c      	adds	r7, #60	; 0x3c
1a004aa8:	46bd      	mov	sp, r7
1a004aaa:	bd90      	pop	{r4, r7, pc}
1a004aac:	068e7780 	.word	0x068e7780
1a004ab0:	1a00b040 	.word	0x1a00b040

1a004ab4 <Chip_SSP_SetFormat>:
{
1a004ab4:	b480      	push	{r7}
1a004ab6:	b085      	sub	sp, #20
1a004ab8:	af00      	add	r7, sp, #0
1a004aba:	60f8      	str	r0, [r7, #12]
1a004abc:	60b9      	str	r1, [r7, #8]
1a004abe:	607a      	str	r2, [r7, #4]
1a004ac0:	603b      	str	r3, [r7, #0]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a004ac2:	68fb      	ldr	r3, [r7, #12]
1a004ac4:	681b      	ldr	r3, [r3, #0]
1a004ac6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
1a004aca:	68bb      	ldr	r3, [r7, #8]
1a004acc:	431a      	orrs	r2, r3
1a004ace:	687b      	ldr	r3, [r7, #4]
1a004ad0:	431a      	orrs	r2, r3
1a004ad2:	683b      	ldr	r3, [r7, #0]
1a004ad4:	431a      	orrs	r2, r3
1a004ad6:	68fb      	ldr	r3, [r7, #12]
1a004ad8:	601a      	str	r2, [r3, #0]
}
1a004ada:	bf00      	nop
1a004adc:	3714      	adds	r7, #20
1a004ade:	46bd      	mov	sp, r7
1a004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004ae4:	4770      	bx	lr

1a004ae6 <Chip_SSP_Set_Mode>:
{
1a004ae6:	b480      	push	{r7}
1a004ae8:	b083      	sub	sp, #12
1a004aea:	af00      	add	r7, sp, #0
1a004aec:	6078      	str	r0, [r7, #4]
1a004aee:	6039      	str	r1, [r7, #0]
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a004af0:	687b      	ldr	r3, [r7, #4]
1a004af2:	685b      	ldr	r3, [r3, #4]
1a004af4:	f023 0204 	bic.w	r2, r3, #4
1a004af8:	683b      	ldr	r3, [r7, #0]
1a004afa:	431a      	orrs	r2, r3
1a004afc:	687b      	ldr	r3, [r7, #4]
1a004afe:	605a      	str	r2, [r3, #4]
}
1a004b00:	bf00      	nop
1a004b02:	370c      	adds	r7, #12
1a004b04:	46bd      	mov	sp, r7
1a004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b0a:	4770      	bx	lr

1a004b0c <Chip_SSP_GetClockIndex>:
	}
}

/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
1a004b0c:	b480      	push	{r7}
1a004b0e:	b085      	sub	sp, #20
1a004b10:	af00      	add	r7, sp, #0
1a004b12:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004b14:	687b      	ldr	r3, [r7, #4]
1a004b16:	4a07      	ldr	r2, [pc, #28]	; (1a004b34 <Chip_SSP_GetClockIndex+0x28>)
1a004b18:	4293      	cmp	r3, r2
1a004b1a:	d102      	bne.n	1a004b22 <Chip_SSP_GetClockIndex+0x16>
		clkSSP = CLK_MX_SSP1;
1a004b1c:	23a5      	movs	r3, #165	; 0xa5
1a004b1e:	81fb      	strh	r3, [r7, #14]
1a004b20:	e001      	b.n	1a004b26 <Chip_SSP_GetClockIndex+0x1a>
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a004b22:	2383      	movs	r3, #131	; 0x83
1a004b24:	81fb      	strh	r3, [r7, #14]
	}

	return clkSSP;
1a004b26:	89fb      	ldrh	r3, [r7, #14]
}
1a004b28:	4618      	mov	r0, r3
1a004b2a:	3714      	adds	r7, #20
1a004b2c:	46bd      	mov	sp, r7
1a004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b32:	4770      	bx	lr
1a004b34:	400c5000 	.word	0x400c5000

1a004b38 <Chip_SSP_GetPeriphClockIndex>:

/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
1a004b38:	b480      	push	{r7}
1a004b3a:	b085      	sub	sp, #20
1a004b3c:	af00      	add	r7, sp, #0
1a004b3e:	6078      	str	r0, [r7, #4]
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a004b40:	687b      	ldr	r3, [r7, #4]
1a004b42:	4a08      	ldr	r2, [pc, #32]	; (1a004b64 <Chip_SSP_GetPeriphClockIndex+0x2c>)
1a004b44:	4293      	cmp	r3, r2
1a004b46:	d103      	bne.n	1a004b50 <Chip_SSP_GetPeriphClockIndex+0x18>
		clkSSP = CLK_APB2_SSP1;
1a004b48:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
1a004b4c:	81fb      	strh	r3, [r7, #14]
1a004b4e:	e002      	b.n	1a004b56 <Chip_SSP_GetPeriphClockIndex+0x1e>
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a004b50:	f240 2302 	movw	r3, #514	; 0x202
1a004b54:	81fb      	strh	r3, [r7, #14]
	}

	return clkSSP;
1a004b56:	89fb      	ldrh	r3, [r7, #14]
}
1a004b58:	4618      	mov	r0, r3
1a004b5a:	3714      	adds	r7, #20
1a004b5c:	46bd      	mov	sp, r7
1a004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b62:	4770      	bx	lr
1a004b64:	400c5000 	.word	0x400c5000

1a004b68 <Chip_SSP_SetClockRate>:
 * Public functions
 ****************************************************************************/

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
1a004b68:	b480      	push	{r7}
1a004b6a:	b087      	sub	sp, #28
1a004b6c:	af00      	add	r7, sp, #0
1a004b6e:	60f8      	str	r0, [r7, #12]
1a004b70:	60b9      	str	r1, [r7, #8]
1a004b72:	607a      	str	r2, [r7, #4]
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a004b74:	68fb      	ldr	r3, [r7, #12]
1a004b76:	681b      	ldr	r3, [r3, #0]
1a004b78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1a004b7c:	617b      	str	r3, [r7, #20]
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a004b7e:	68bb      	ldr	r3, [r7, #8]
1a004b80:	021b      	lsls	r3, r3, #8
1a004b82:	b29a      	uxth	r2, r3
1a004b84:	697b      	ldr	r3, [r7, #20]
1a004b86:	431a      	orrs	r2, r3
1a004b88:	68fb      	ldr	r3, [r7, #12]
1a004b8a:	601a      	str	r2, [r3, #0]
	pSSP->CPSR = prescale;
1a004b8c:	68fb      	ldr	r3, [r7, #12]
1a004b8e:	687a      	ldr	r2, [r7, #4]
1a004b90:	611a      	str	r2, [r3, #16]
}
1a004b92:	bf00      	nop
1a004b94:	371c      	adds	r7, #28
1a004b96:	46bd      	mov	sp, r7
1a004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004b9c:	4770      	bx	lr

1a004b9e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a004b9e:	b580      	push	{r7, lr}
1a004ba0:	b086      	sub	sp, #24
1a004ba2:	af00      	add	r7, sp, #0
1a004ba4:	6078      	str	r0, [r7, #4]
1a004ba6:	6039      	str	r1, [r7, #0]
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004ba8:	6878      	ldr	r0, [r7, #4]
1a004baa:	f7ff ffc5 	bl	1a004b38 <Chip_SSP_GetPeriphClockIndex>
1a004bae:	4603      	mov	r3, r0
1a004bb0:	4618      	mov	r0, r3
1a004bb2:	f7ff fe47 	bl	1a004844 <Chip_Clock_GetRate>
1a004bb6:	60b8      	str	r0, [r7, #8]

	cr0_div = 0;
1a004bb8:	2300      	movs	r3, #0
1a004bba:	617b      	str	r3, [r7, #20]
	cmp_clk = 0xFFFFFFFF;
1a004bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a004bc0:	613b      	str	r3, [r7, #16]
	prescale = 2;
1a004bc2:	2302      	movs	r3, #2
1a004bc4:	60fb      	str	r3, [r7, #12]

	while (cmp_clk > bitRate) {
1a004bc6:	e017      	b.n	1a004bf8 <Chip_SSP_SetBitRate+0x5a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a004bc8:	697b      	ldr	r3, [r7, #20]
1a004bca:	3301      	adds	r3, #1
1a004bcc:	68fa      	ldr	r2, [r7, #12]
1a004bce:	fb02 f303 	mul.w	r3, r2, r3
1a004bd2:	68ba      	ldr	r2, [r7, #8]
1a004bd4:	fbb2 f3f3 	udiv	r3, r2, r3
1a004bd8:	613b      	str	r3, [r7, #16]
		if (cmp_clk > bitRate) {
1a004bda:	693a      	ldr	r2, [r7, #16]
1a004bdc:	683b      	ldr	r3, [r7, #0]
1a004bde:	429a      	cmp	r2, r3
1a004be0:	d90a      	bls.n	1a004bf8 <Chip_SSP_SetBitRate+0x5a>
			cr0_div++;
1a004be2:	697b      	ldr	r3, [r7, #20]
1a004be4:	3301      	adds	r3, #1
1a004be6:	617b      	str	r3, [r7, #20]
			if (cr0_div > 0xFF) {
1a004be8:	697b      	ldr	r3, [r7, #20]
1a004bea:	2bff      	cmp	r3, #255	; 0xff
1a004bec:	d904      	bls.n	1a004bf8 <Chip_SSP_SetBitRate+0x5a>
				cr0_div = 0;
1a004bee:	2300      	movs	r3, #0
1a004bf0:	617b      	str	r3, [r7, #20]
				prescale += 2;
1a004bf2:	68fb      	ldr	r3, [r7, #12]
1a004bf4:	3302      	adds	r3, #2
1a004bf6:	60fb      	str	r3, [r7, #12]
	while (cmp_clk > bitRate) {
1a004bf8:	693a      	ldr	r2, [r7, #16]
1a004bfa:	683b      	ldr	r3, [r7, #0]
1a004bfc:	429a      	cmp	r2, r3
1a004bfe:	d8e3      	bhi.n	1a004bc8 <Chip_SSP_SetBitRate+0x2a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a004c00:	68fa      	ldr	r2, [r7, #12]
1a004c02:	6979      	ldr	r1, [r7, #20]
1a004c04:	6878      	ldr	r0, [r7, #4]
1a004c06:	f7ff ffaf 	bl	1a004b68 <Chip_SSP_SetClockRate>
}
1a004c0a:	bf00      	nop
1a004c0c:	3718      	adds	r7, #24
1a004c0e:	46bd      	mov	sp, r7
1a004c10:	bd80      	pop	{r7, pc}
1a004c12:	Address 0x000000001a004c12 is out of bounds.


1a004c14 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a004c14:	b580      	push	{r7, lr}
1a004c16:	b082      	sub	sp, #8
1a004c18:	af00      	add	r7, sp, #0
1a004c1a:	6078      	str	r0, [r7, #4]
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a004c1c:	6878      	ldr	r0, [r7, #4]
1a004c1e:	f7ff ff75 	bl	1a004b0c <Chip_SSP_GetClockIndex>
1a004c22:	4603      	mov	r3, r0
1a004c24:	4618      	mov	r0, r3
1a004c26:	f7ff fddd 	bl	1a0047e4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004c2a:	6878      	ldr	r0, [r7, #4]
1a004c2c:	f7ff ff84 	bl	1a004b38 <Chip_SSP_GetPeriphClockIndex>
1a004c30:	4603      	mov	r3, r0
1a004c32:	4618      	mov	r0, r3
1a004c34:	f7ff fdd6 	bl	1a0047e4 <Chip_Clock_Enable>

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
1a004c38:	2100      	movs	r1, #0
1a004c3a:	6878      	ldr	r0, [r7, #4]
1a004c3c:	f7ff ff53 	bl	1a004ae6 <Chip_SSP_Set_Mode>
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
1a004c40:	2300      	movs	r3, #0
1a004c42:	2200      	movs	r2, #0
1a004c44:	2107      	movs	r1, #7
1a004c46:	6878      	ldr	r0, [r7, #4]
1a004c48:	f7ff ff34 	bl	1a004ab4 <Chip_SSP_SetFormat>
	Chip_SSP_SetBitRate(pSSP, 100000);
1a004c4c:	4903      	ldr	r1, [pc, #12]	; (1a004c5c <Chip_SSP_Init+0x48>)
1a004c4e:	6878      	ldr	r0, [r7, #4]
1a004c50:	f7ff ffa5 	bl	1a004b9e <Chip_SSP_SetBitRate>
}
1a004c54:	bf00      	nop
1a004c56:	3708      	adds	r7, #8
1a004c58:	46bd      	mov	sp, r7
1a004c5a:	bd80      	pop	{r7, pc}
1a004c5c:	000186a0 	.word	0x000186a0

1a004c60 <SCB_GetFPUType>:
   - \b  0: No FPU
   - \b  1: Single precision FPU
   - \b  2: Double + Single precision FPU
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
1a004c60:	b480      	push	{r7}
1a004c62:	b083      	sub	sp, #12
1a004c64:	af00      	add	r7, sp, #0
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a004c66:	4b08      	ldr	r3, [pc, #32]	; (1a004c88 <SCB_GetFPUType+0x28>)
1a004c68:	691b      	ldr	r3, [r3, #16]
1a004c6a:	607b      	str	r3, [r7, #4]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a004c6c:	687b      	ldr	r3, [r7, #4]
1a004c6e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a004c72:	2b20      	cmp	r3, #32
1a004c74:	d101      	bne.n	1a004c7a <SCB_GetFPUType+0x1a>
  {
    return 1U;           /* Single precision FPU */
1a004c76:	2301      	movs	r3, #1
1a004c78:	e000      	b.n	1a004c7c <SCB_GetFPUType+0x1c>
  }
  else
  {
    return 0U;           /* No FPU */
1a004c7a:	2300      	movs	r3, #0
  }
}
1a004c7c:	4618      	mov	r0, r3
1a004c7e:	370c      	adds	r7, #12
1a004c80:	46bd      	mov	sp, r7
1a004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004c86:	4770      	bx	lr
1a004c88:	e000ef30 	.word	0xe000ef30

1a004c8c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a004c8c:	b580      	push	{r7, lr}
1a004c8e:	af00      	add	r7, sp, #0
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a004c90:	4b0a      	ldr	r3, [pc, #40]	; (1a004cbc <SystemInit+0x30>)
1a004c92:	4a0b      	ldr	r2, [pc, #44]	; (1a004cc0 <SystemInit+0x34>)
1a004c94:	609a      	str	r2, [r3, #8]

   if (SCB_GetFPUType() > 0)
1a004c96:	f7ff ffe3 	bl	1a004c60 <SCB_GetFPUType>
1a004c9a:	4603      	mov	r3, r0
1a004c9c:	2b00      	cmp	r3, #0
1a004c9e:	d007      	beq.n	1a004cb0 <SystemInit+0x24>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a004ca0:	4b06      	ldr	r3, [pc, #24]	; (1a004cbc <SystemInit+0x30>)
1a004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1a004ca6:	4a05      	ldr	r2, [pc, #20]	; (1a004cbc <SystemInit+0x30>)
1a004ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a004cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a004cb0:	f7fe fe06 	bl	1a0038c0 <Board_SystemInit>
   Board_Init();
1a004cb4:	f7fe fd22 	bl	1a0036fc <Board_Init>
#endif
}
1a004cb8:	bf00      	nop
1a004cba:	bd80      	pop	{r7, pc}
1a004cbc:	e000ed00 	.word	0xe000ed00
1a004cc0:	1a000000 	.word	0x1a000000

1a004cc4 <cyclesCounterInit>:
/**
 * Funcion para configurar los registros para contar ciclos de clock.
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
1a004cc4:	b480      	push	{r7}
1a004cc6:	b083      	sub	sp, #12
1a004cc8:	af00      	add	r7, sp, #0
1a004cca:	6078      	str	r0, [r7, #4]
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a004ccc:	4a07      	ldr	r2, [pc, #28]	; (1a004cec <cyclesCounterInit+0x28>)
1a004cce:	687b      	ldr	r3, [r7, #4]
1a004cd0:	6013      	str	r3, [r2, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a004cd2:	4b07      	ldr	r3, [pc, #28]	; (1a004cf0 <cyclesCounterInit+0x2c>)
1a004cd4:	681b      	ldr	r3, [r3, #0]
1a004cd6:	4a06      	ldr	r2, [pc, #24]	; (1a004cf0 <cyclesCounterInit+0x2c>)
1a004cd8:	f043 0301 	orr.w	r3, r3, #1
1a004cdc:	6013      	str	r3, [r2, #0]
   return TRUE;
1a004cde:	2301      	movs	r3, #1
}
1a004ce0:	4618      	mov	r0, r3
1a004ce2:	370c      	adds	r7, #12
1a004ce4:	46bd      	mov	sp, r7
1a004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004cea:	4770      	bx	lr
1a004cec:	1000003c 	.word	0x1000003c
1a004cf0:	e0001000 	.word	0xe0001000

1a004cf4 <Chip_SCU_PinMuxSet>:
{
1a004cf4:	b480      	push	{r7}
1a004cf6:	b083      	sub	sp, #12
1a004cf8:	af00      	add	r7, sp, #0
1a004cfa:	4603      	mov	r3, r0
1a004cfc:	71fb      	strb	r3, [r7, #7]
1a004cfe:	460b      	mov	r3, r1
1a004d00:	71bb      	strb	r3, [r7, #6]
1a004d02:	4613      	mov	r3, r2
1a004d04:	80bb      	strh	r3, [r7, #4]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004d06:	4807      	ldr	r0, [pc, #28]	; (1a004d24 <Chip_SCU_PinMuxSet+0x30>)
1a004d08:	79f9      	ldrb	r1, [r7, #7]
1a004d0a:	79bb      	ldrb	r3, [r7, #6]
1a004d0c:	88ba      	ldrh	r2, [r7, #4]
1a004d0e:	0149      	lsls	r1, r1, #5
1a004d10:	440b      	add	r3, r1
1a004d12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
1a004d16:	bf00      	nop
1a004d18:	370c      	adds	r7, #12
1a004d1a:	46bd      	mov	sp, r7
1a004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004d20:	4770      	bx	lr
1a004d22:	bf00      	nop
1a004d24:	40086000 	.word	0x40086000

1a004d28 <Chip_SCU_PinMux>:
{
1a004d28:	b590      	push	{r4, r7, lr}
1a004d2a:	b083      	sub	sp, #12
1a004d2c:	af00      	add	r7, sp, #0
1a004d2e:	4604      	mov	r4, r0
1a004d30:	4608      	mov	r0, r1
1a004d32:	4611      	mov	r1, r2
1a004d34:	461a      	mov	r2, r3
1a004d36:	4623      	mov	r3, r4
1a004d38:	71fb      	strb	r3, [r7, #7]
1a004d3a:	4603      	mov	r3, r0
1a004d3c:	71bb      	strb	r3, [r7, #6]
1a004d3e:	460b      	mov	r3, r1
1a004d40:	80bb      	strh	r3, [r7, #4]
1a004d42:	4613      	mov	r3, r2
1a004d44:	70fb      	strb	r3, [r7, #3]
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a004d46:	78fb      	ldrb	r3, [r7, #3]
1a004d48:	b29a      	uxth	r2, r3
1a004d4a:	88bb      	ldrh	r3, [r7, #4]
1a004d4c:	4313      	orrs	r3, r2
1a004d4e:	b29a      	uxth	r2, r3
1a004d50:	79b9      	ldrb	r1, [r7, #6]
1a004d52:	79fb      	ldrb	r3, [r7, #7]
1a004d54:	4618      	mov	r0, r3
1a004d56:	f7ff ffcd 	bl	1a004cf4 <Chip_SCU_PinMuxSet>
}
1a004d5a:	bf00      	nop
1a004d5c:	370c      	adds	r7, #12
1a004d5e:	46bd      	mov	sp, r7
1a004d60:	bd90      	pop	{r4, r7, pc}

1a004d62 <Chip_GPIO_SetPinState>:
{
1a004d62:	b480      	push	{r7}
1a004d64:	b083      	sub	sp, #12
1a004d66:	af00      	add	r7, sp, #0
1a004d68:	6078      	str	r0, [r7, #4]
1a004d6a:	4608      	mov	r0, r1
1a004d6c:	4611      	mov	r1, r2
1a004d6e:	461a      	mov	r2, r3
1a004d70:	4603      	mov	r3, r0
1a004d72:	70fb      	strb	r3, [r7, #3]
1a004d74:	460b      	mov	r3, r1
1a004d76:	70bb      	strb	r3, [r7, #2]
1a004d78:	4613      	mov	r3, r2
1a004d7a:	707b      	strb	r3, [r7, #1]
	pGPIO->B[port][pin] = setting;
1a004d7c:	78fa      	ldrb	r2, [r7, #3]
1a004d7e:	78bb      	ldrb	r3, [r7, #2]
1a004d80:	7878      	ldrb	r0, [r7, #1]
1a004d82:	6879      	ldr	r1, [r7, #4]
1a004d84:	0152      	lsls	r2, r2, #5
1a004d86:	440a      	add	r2, r1
1a004d88:	4413      	add	r3, r2
1a004d8a:	4602      	mov	r2, r0
1a004d8c:	701a      	strb	r2, [r3, #0]
}
1a004d8e:	bf00      	nop
1a004d90:	370c      	adds	r7, #12
1a004d92:	46bd      	mov	sp, r7
1a004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004d98:	4770      	bx	lr

1a004d9a <Chip_GPIO_ReadPortBit>:
{
1a004d9a:	b480      	push	{r7}
1a004d9c:	b085      	sub	sp, #20
1a004d9e:	af00      	add	r7, sp, #0
1a004da0:	60f8      	str	r0, [r7, #12]
1a004da2:	60b9      	str	r1, [r7, #8]
1a004da4:	4613      	mov	r3, r2
1a004da6:	71fb      	strb	r3, [r7, #7]
	return (bool) pGPIO->B[port][pin];
1a004da8:	79fb      	ldrb	r3, [r7, #7]
1a004daa:	68f9      	ldr	r1, [r7, #12]
1a004dac:	68ba      	ldr	r2, [r7, #8]
1a004dae:	0152      	lsls	r2, r2, #5
1a004db0:	440a      	add	r2, r1
1a004db2:	4413      	add	r3, r2
1a004db4:	781b      	ldrb	r3, [r3, #0]
1a004db6:	b2db      	uxtb	r3, r3
1a004db8:	2b00      	cmp	r3, #0
1a004dba:	bf14      	ite	ne
1a004dbc:	2301      	movne	r3, #1
1a004dbe:	2300      	moveq	r3, #0
1a004dc0:	b2db      	uxtb	r3, r3
}
1a004dc2:	4618      	mov	r0, r3
1a004dc4:	3714      	adds	r7, #20
1a004dc6:	46bd      	mov	sp, r7
1a004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004dcc:	4770      	bx	lr

1a004dce <Chip_GPIO_SetDir>:
 * @return	None
 * @note	Bits set to '0' are not altered. It is recommended to use the
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
1a004dce:	b480      	push	{r7}
1a004dd0:	b085      	sub	sp, #20
1a004dd2:	af00      	add	r7, sp, #0
1a004dd4:	60f8      	str	r0, [r7, #12]
1a004dd6:	607a      	str	r2, [r7, #4]
1a004dd8:	461a      	mov	r2, r3
1a004dda:	460b      	mov	r3, r1
1a004ddc:	72fb      	strb	r3, [r7, #11]
1a004dde:	4613      	mov	r3, r2
1a004de0:	72bb      	strb	r3, [r7, #10]
	if (out) {
1a004de2:	7abb      	ldrb	r3, [r7, #10]
1a004de4:	2b00      	cmp	r3, #0
1a004de6:	d00e      	beq.n	1a004e06 <Chip_GPIO_SetDir+0x38>
		pGPIO->DIR[portNum] |= bitValue;
1a004de8:	7afa      	ldrb	r2, [r7, #11]
1a004dea:	68fb      	ldr	r3, [r7, #12]
1a004dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a004df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a004df4:	7afa      	ldrb	r2, [r7, #11]
1a004df6:	687b      	ldr	r3, [r7, #4]
1a004df8:	4319      	orrs	r1, r3
1a004dfa:	68fb      	ldr	r3, [r7, #12]
1a004dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a004e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
	}
}
1a004e04:	e00e      	b.n	1a004e24 <Chip_GPIO_SetDir+0x56>
		pGPIO->DIR[portNum] &= ~bitValue;
1a004e06:	7afa      	ldrb	r2, [r7, #11]
1a004e08:	68fb      	ldr	r3, [r7, #12]
1a004e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a004e0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a004e12:	687b      	ldr	r3, [r7, #4]
1a004e14:	43db      	mvns	r3, r3
1a004e16:	7afa      	ldrb	r2, [r7, #11]
1a004e18:	4019      	ands	r1, r3
1a004e1a:	68fb      	ldr	r3, [r7, #12]
1a004e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a004e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1a004e24:	bf00      	nop
1a004e26:	3714      	adds	r7, #20
1a004e28:	46bd      	mov	sp, r7
1a004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004e2e:	4770      	bx	lr

1a004e30 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a004e30:	b480      	push	{r7}
1a004e32:	b085      	sub	sp, #20
1a004e34:	af00      	add	r7, sp, #0
1a004e36:	60b9      	str	r1, [r7, #8]
1a004e38:	607a      	str	r2, [r7, #4]
1a004e3a:	603b      	str	r3, [r7, #0]
1a004e3c:	4603      	mov	r3, r0
1a004e3e:	73fb      	strb	r3, [r7, #15]

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a004e40:	f997 200f 	ldrsb.w	r2, [r7, #15]
1a004e44:	491f      	ldr	r1, [pc, #124]	; (1a004ec4 <gpioObtainPinInit+0x94>)
1a004e46:	4613      	mov	r3, r2
1a004e48:	009b      	lsls	r3, r3, #2
1a004e4a:	4413      	add	r3, r2
1a004e4c:	440b      	add	r3, r1
1a004e4e:	f993 2000 	ldrsb.w	r2, [r3]
1a004e52:	68bb      	ldr	r3, [r7, #8]
1a004e54:	701a      	strb	r2, [r3, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a004e56:	f997 200f 	ldrsb.w	r2, [r7, #15]
1a004e5a:	491a      	ldr	r1, [pc, #104]	; (1a004ec4 <gpioObtainPinInit+0x94>)
1a004e5c:	4613      	mov	r3, r2
1a004e5e:	009b      	lsls	r3, r3, #2
1a004e60:	4413      	add	r3, r2
1a004e62:	440b      	add	r3, r1
1a004e64:	3301      	adds	r3, #1
1a004e66:	f993 2000 	ldrsb.w	r2, [r3]
1a004e6a:	687b      	ldr	r3, [r7, #4]
1a004e6c:	701a      	strb	r2, [r3, #0]
   *func        = gpioPinsInit[pin].func;
1a004e6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
1a004e72:	4914      	ldr	r1, [pc, #80]	; (1a004ec4 <gpioObtainPinInit+0x94>)
1a004e74:	4613      	mov	r3, r2
1a004e76:	009b      	lsls	r3, r3, #2
1a004e78:	4413      	add	r3, r2
1a004e7a:	440b      	add	r3, r1
1a004e7c:	3302      	adds	r3, #2
1a004e7e:	f993 2000 	ldrsb.w	r2, [r3]
1a004e82:	683b      	ldr	r3, [r7, #0]
1a004e84:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a004e86:	f997 200f 	ldrsb.w	r2, [r7, #15]
1a004e8a:	490e      	ldr	r1, [pc, #56]	; (1a004ec4 <gpioObtainPinInit+0x94>)
1a004e8c:	4613      	mov	r3, r2
1a004e8e:	009b      	lsls	r3, r3, #2
1a004e90:	4413      	add	r3, r2
1a004e92:	440b      	add	r3, r1
1a004e94:	3303      	adds	r3, #3
1a004e96:	f993 2000 	ldrsb.w	r2, [r3]
1a004e9a:	69bb      	ldr	r3, [r7, #24]
1a004e9c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a004e9e:	f997 200f 	ldrsb.w	r2, [r7, #15]
1a004ea2:	4908      	ldr	r1, [pc, #32]	; (1a004ec4 <gpioObtainPinInit+0x94>)
1a004ea4:	4613      	mov	r3, r2
1a004ea6:	009b      	lsls	r3, r3, #2
1a004ea8:	4413      	add	r3, r2
1a004eaa:	440b      	add	r3, r1
1a004eac:	3304      	adds	r3, #4
1a004eae:	f993 2000 	ldrsb.w	r2, [r3]
1a004eb2:	69fb      	ldr	r3, [r7, #28]
1a004eb4:	701a      	strb	r2, [r3, #0]
}
1a004eb6:	bf00      	nop
1a004eb8:	3714      	adds	r7, #20
1a004eba:	46bd      	mov	sp, r7
1a004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
1a004ec0:	4770      	bx	lr
1a004ec2:	bf00      	nop
1a004ec4:	1a00b088 	.word	0x1a00b088

1a004ec8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a004ec8:	b590      	push	{r4, r7, lr}
1a004eca:	b087      	sub	sp, #28
1a004ecc:	af02      	add	r7, sp, #8
1a004ece:	4603      	mov	r3, r0
1a004ed0:	460a      	mov	r2, r1
1a004ed2:	71fb      	strb	r3, [r7, #7]
1a004ed4:	4613      	mov	r3, r2
1a004ed6:	71bb      	strb	r3, [r7, #6]
   if( pin == VCC ){
1a004ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a004edc:	f113 0f02 	cmn.w	r3, #2
1a004ee0:	d101      	bne.n	1a004ee6 <gpioInit+0x1e>
	  return FALSE;
1a004ee2:	2300      	movs	r3, #0
1a004ee4:	e0ca      	b.n	1a00507c <gpioInit+0x1b4>
   }
   if( pin == GND ){
1a004ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a004eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a004eee:	d101      	bne.n	1a004ef4 <gpioInit+0x2c>
	  return FALSE;
1a004ef0:	2300      	movs	r3, #0
1a004ef2:	e0c3      	b.n	1a00507c <gpioInit+0x1b4>
   }

   bool_t ret_val     = 1;
1a004ef4:	2301      	movs	r3, #1
1a004ef6:	73fb      	strb	r3, [r7, #15]

   int8_t pinNamePort = 0;
1a004ef8:	2300      	movs	r3, #0
1a004efa:	73bb      	strb	r3, [r7, #14]
   int8_t pinNamePin  = 0;
1a004efc:	2300      	movs	r3, #0
1a004efe:	737b      	strb	r3, [r7, #13]

   int8_t func        = 0;
1a004f00:	2300      	movs	r3, #0
1a004f02:	733b      	strb	r3, [r7, #12]

   int8_t gpioPort    = 0;
1a004f04:	2300      	movs	r3, #0
1a004f06:	72fb      	strb	r3, [r7, #11]
   int8_t gpioPin     = 0;
1a004f08:	2300      	movs	r3, #0
1a004f0a:	72bb      	strb	r3, [r7, #10]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004f0c:	f107 040c 	add.w	r4, r7, #12
1a004f10:	f107 020d 	add.w	r2, r7, #13
1a004f14:	f107 010e 	add.w	r1, r7, #14
1a004f18:	f997 0007 	ldrsb.w	r0, [r7, #7]
1a004f1c:	f107 030a 	add.w	r3, r7, #10
1a004f20:	9301      	str	r3, [sp, #4]
1a004f22:	f107 030b 	add.w	r3, r7, #11
1a004f26:	9300      	str	r3, [sp, #0]
1a004f28:	4623      	mov	r3, r4
1a004f2a:	f7ff ff81 	bl	1a004e30 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a004f2e:	79bb      	ldrb	r3, [r7, #6]
1a004f30:	2b05      	cmp	r3, #5
1a004f32:	f200 809f 	bhi.w	1a005074 <gpioInit+0x1ac>
1a004f36:	a201      	add	r2, pc, #4	; (adr r2, 1a004f3c <gpioInit+0x74>)
1a004f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a004f3c:	1a004f5d 	.word	0x1a004f5d
1a004f40:	1a00502d 	.word	0x1a00502d
1a004f44:	1a004f91 	.word	0x1a004f91
1a004f48:	1a004fc5 	.word	0x1a004fc5
1a004f4c:	1a004ff9 	.word	0x1a004ff9
1a004f50:	1a004f55 	.word	0x1a004f55

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a004f54:	484b      	ldr	r0, [pc, #300]	; (1a005084 <gpioInit+0x1bc>)
1a004f56:	f7ff fcb9 	bl	1a0048cc <Chip_GPIO_Init>
      break;
1a004f5a:	e08e      	b.n	1a00507a <gpioInit+0x1b2>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a004f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a004f60:	b2d8      	uxtb	r0, r3
1a004f62:	f997 300d 	ldrsb.w	r3, [r7, #13]
1a004f66:	b2d9      	uxtb	r1, r3
1a004f68:	f997 300c 	ldrsb.w	r3, [r7, #12]
1a004f6c:	b2db      	uxtb	r3, r3
1a004f6e:	22d0      	movs	r2, #208	; 0xd0
1a004f70:	f7ff feda 	bl	1a004d28 <Chip_SCU_PinMux>
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004f74:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a004f78:	b2d9      	uxtb	r1, r3
1a004f7a:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a004f7e:	461a      	mov	r2, r3
1a004f80:	2301      	movs	r3, #1
1a004f82:	4093      	lsls	r3, r2
1a004f84:	461a      	mov	r2, r3
1a004f86:	2300      	movs	r3, #0
1a004f88:	483e      	ldr	r0, [pc, #248]	; (1a005084 <gpioInit+0x1bc>)
1a004f8a:	f7ff ff20 	bl	1a004dce <Chip_GPIO_SetDir>
      break;
1a004f8e:	e074      	b.n	1a00507a <gpioInit+0x1b2>

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a004f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a004f94:	b2d8      	uxtb	r0, r3
1a004f96:	f997 300d 	ldrsb.w	r3, [r7, #13]
1a004f9a:	b2d9      	uxtb	r1, r3
1a004f9c:	f997 300c 	ldrsb.w	r3, [r7, #12]
1a004fa0:	b2db      	uxtb	r3, r3
1a004fa2:	22c0      	movs	r2, #192	; 0xc0
1a004fa4:	f7ff fec0 	bl	1a004d28 <Chip_SCU_PinMux>
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004fa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a004fac:	b2d9      	uxtb	r1, r3
1a004fae:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a004fb2:	461a      	mov	r2, r3
1a004fb4:	2301      	movs	r3, #1
1a004fb6:	4093      	lsls	r3, r2
1a004fb8:	461a      	mov	r2, r3
1a004fba:	2300      	movs	r3, #0
1a004fbc:	4831      	ldr	r0, [pc, #196]	; (1a005084 <gpioInit+0x1bc>)
1a004fbe:	f7ff ff06 	bl	1a004dce <Chip_GPIO_SetDir>
      break;
1a004fc2:	e05a      	b.n	1a00507a <gpioInit+0x1b2>

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a004fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a004fc8:	b2d8      	uxtb	r0, r3
1a004fca:	f997 300d 	ldrsb.w	r3, [r7, #13]
1a004fce:	b2d9      	uxtb	r1, r3
1a004fd0:	f997 300c 	ldrsb.w	r3, [r7, #12]
1a004fd4:	b2db      	uxtb	r3, r3
1a004fd6:	22d8      	movs	r2, #216	; 0xd8
1a004fd8:	f7ff fea6 	bl	1a004d28 <Chip_SCU_PinMux>
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004fdc:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a004fe0:	b2d9      	uxtb	r1, r3
1a004fe2:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a004fe6:	461a      	mov	r2, r3
1a004fe8:	2301      	movs	r3, #1
1a004fea:	4093      	lsls	r3, r2
1a004fec:	461a      	mov	r2, r3
1a004fee:	2300      	movs	r3, #0
1a004ff0:	4824      	ldr	r0, [pc, #144]	; (1a005084 <gpioInit+0x1bc>)
1a004ff2:	f7ff feec 	bl	1a004dce <Chip_GPIO_SetDir>
      break;
1a004ff6:	e040      	b.n	1a00507a <gpioInit+0x1b2>
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a004ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a004ffc:	b2d8      	uxtb	r0, r3
1a004ffe:	f997 300d 	ldrsb.w	r3, [r7, #13]
1a005002:	b2d9      	uxtb	r1, r3
1a005004:	f997 300c 	ldrsb.w	r3, [r7, #12]
1a005008:	b2db      	uxtb	r3, r3
1a00500a:	22c8      	movs	r2, #200	; 0xc8
1a00500c:	f7ff fe8c 	bl	1a004d28 <Chip_SCU_PinMux>
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a005010:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a005014:	b2d9      	uxtb	r1, r3
1a005016:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a00501a:	461a      	mov	r2, r3
1a00501c:	2301      	movs	r3, #1
1a00501e:	4093      	lsls	r3, r2
1a005020:	461a      	mov	r2, r3
1a005022:	2300      	movs	r3, #0
1a005024:	4817      	ldr	r0, [pc, #92]	; (1a005084 <gpioInit+0x1bc>)
1a005026:	f7ff fed2 	bl	1a004dce <Chip_GPIO_SetDir>
      break;
1a00502a:	e026      	b.n	1a00507a <gpioInit+0x1b2>

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a00502c:	f997 300e 	ldrsb.w	r3, [r7, #14]
1a005030:	b2d8      	uxtb	r0, r3
1a005032:	f997 300d 	ldrsb.w	r3, [r7, #13]
1a005036:	b2d9      	uxtb	r1, r3
1a005038:	f997 300c 	ldrsb.w	r3, [r7, #12]
1a00503c:	b2db      	uxtb	r3, r3
1a00503e:	22d0      	movs	r2, #208	; 0xd0
1a005040:	f7ff fe72 	bl	1a004d28 <Chip_SCU_PinMux>
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a005044:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a005048:	b2d9      	uxtb	r1, r3
1a00504a:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a00504e:	461a      	mov	r2, r3
1a005050:	2301      	movs	r3, #1
1a005052:	4093      	lsls	r3, r2
1a005054:	461a      	mov	r2, r3
1a005056:	2301      	movs	r3, #1
1a005058:	480a      	ldr	r0, [pc, #40]	; (1a005084 <gpioInit+0x1bc>)
1a00505a:	f7ff feb8 	bl	1a004dce <Chip_GPIO_SetDir>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00505e:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a005062:	b2d9      	uxtb	r1, r3
1a005064:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a005068:	b2da      	uxtb	r2, r3
1a00506a:	2300      	movs	r3, #0
1a00506c:	4805      	ldr	r0, [pc, #20]	; (1a005084 <gpioInit+0x1bc>)
1a00506e:	f7ff fe78 	bl	1a004d62 <Chip_GPIO_SetPinState>
      break;
1a005072:	e002      	b.n	1a00507a <gpioInit+0x1b2>

   default:
      ret_val = 0;
1a005074:	2300      	movs	r3, #0
1a005076:	73fb      	strb	r3, [r7, #15]
      break;
1a005078:	bf00      	nop
   }

   return ret_val;
1a00507a:	7bfb      	ldrb	r3, [r7, #15]

}
1a00507c:	4618      	mov	r0, r3
1a00507e:	3714      	adds	r7, #20
1a005080:	46bd      	mov	sp, r7
1a005082:	bd90      	pop	{r4, r7, pc}
1a005084:	400f4000 	.word	0x400f4000

1a005088 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a005088:	b590      	push	{r4, r7, lr}
1a00508a:	b087      	sub	sp, #28
1a00508c:	af02      	add	r7, sp, #8
1a00508e:	4603      	mov	r3, r0
1a005090:	460a      	mov	r2, r1
1a005092:	71fb      	strb	r3, [r7, #7]
1a005094:	4613      	mov	r3, r2
1a005096:	71bb      	strb	r3, [r7, #6]
   if( pin == VCC ){
1a005098:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a00509c:	f113 0f02 	cmn.w	r3, #2
1a0050a0:	d101      	bne.n	1a0050a6 <gpioWrite+0x1e>
	  return FALSE;
1a0050a2:	2300      	movs	r3, #0
1a0050a4:	e033      	b.n	1a00510e <gpioWrite+0x86>
   }
   if( pin == GND ){
1a0050a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a0050aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0050ae:	d101      	bne.n	1a0050b4 <gpioWrite+0x2c>
	  return FALSE;
1a0050b0:	2300      	movs	r3, #0
1a0050b2:	e02c      	b.n	1a00510e <gpioWrite+0x86>
   }

   bool_t ret_val     = 1;
1a0050b4:	2301      	movs	r3, #1
1a0050b6:	73fb      	strb	r3, [r7, #15]

   int8_t pinNamePort = 0;
1a0050b8:	2300      	movs	r3, #0
1a0050ba:	73bb      	strb	r3, [r7, #14]
   int8_t pinNamePin  = 0;
1a0050bc:	2300      	movs	r3, #0
1a0050be:	737b      	strb	r3, [r7, #13]

   int8_t func        = 0;
1a0050c0:	2300      	movs	r3, #0
1a0050c2:	733b      	strb	r3, [r7, #12]

   int8_t gpioPort    = 0;
1a0050c4:	2300      	movs	r3, #0
1a0050c6:	72fb      	strb	r3, [r7, #11]
   int8_t gpioPin     = 0;
1a0050c8:	2300      	movs	r3, #0
1a0050ca:	72bb      	strb	r3, [r7, #10]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0050cc:	f107 040c 	add.w	r4, r7, #12
1a0050d0:	f107 020d 	add.w	r2, r7, #13
1a0050d4:	f107 010e 	add.w	r1, r7, #14
1a0050d8:	f997 0007 	ldrsb.w	r0, [r7, #7]
1a0050dc:	f107 030a 	add.w	r3, r7, #10
1a0050e0:	9301      	str	r3, [sp, #4]
1a0050e2:	f107 030b 	add.w	r3, r7, #11
1a0050e6:	9300      	str	r3, [sp, #0]
1a0050e8:	4623      	mov	r3, r4
1a0050ea:	f7ff fea1 	bl	1a004e30 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0050ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a0050f2:	b2d9      	uxtb	r1, r3
1a0050f4:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a0050f8:	b2da      	uxtb	r2, r3
1a0050fa:	79bb      	ldrb	r3, [r7, #6]
1a0050fc:	2b00      	cmp	r3, #0
1a0050fe:	bf14      	ite	ne
1a005100:	2301      	movne	r3, #1
1a005102:	2300      	moveq	r3, #0
1a005104:	b2db      	uxtb	r3, r3
1a005106:	4804      	ldr	r0, [pc, #16]	; (1a005118 <gpioWrite+0x90>)
1a005108:	f7ff fe2b 	bl	1a004d62 <Chip_GPIO_SetPinState>

   return ret_val;
1a00510c:	7bfb      	ldrb	r3, [r7, #15]
}
1a00510e:	4618      	mov	r0, r3
1a005110:	3714      	adds	r7, #20
1a005112:	46bd      	mov	sp, r7
1a005114:	bd90      	pop	{r4, r7, pc}
1a005116:	bf00      	nop
1a005118:	400f4000 	.word	0x400f4000

1a00511c <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a00511c:	b590      	push	{r4, r7, lr}
1a00511e:	b087      	sub	sp, #28
1a005120:	af02      	add	r7, sp, #8
1a005122:	4603      	mov	r3, r0
1a005124:	71fb      	strb	r3, [r7, #7]
   if( pin == VCC ){
1a005126:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a00512a:	f113 0f02 	cmn.w	r3, #2
1a00512e:	d101      	bne.n	1a005134 <gpioRead+0x18>
      return TRUE;
1a005130:	2301      	movs	r3, #1
1a005132:	e030      	b.n	1a005196 <gpioRead+0x7a>
   }
   if( pin == GND ){
1a005134:	f997 3007 	ldrsb.w	r3, [r7, #7]
1a005138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00513c:	d101      	bne.n	1a005142 <gpioRead+0x26>
      return FALSE;
1a00513e:	2300      	movs	r3, #0
1a005140:	e029      	b.n	1a005196 <gpioRead+0x7a>
   }

   bool_t ret_val     = OFF;
1a005142:	2300      	movs	r3, #0
1a005144:	73fb      	strb	r3, [r7, #15]

   int8_t pinNamePort = 0;
1a005146:	2300      	movs	r3, #0
1a005148:	73bb      	strb	r3, [r7, #14]
   int8_t pinNamePin  = 0;
1a00514a:	2300      	movs	r3, #0
1a00514c:	737b      	strb	r3, [r7, #13]

   int8_t func        = 0;
1a00514e:	2300      	movs	r3, #0
1a005150:	733b      	strb	r3, [r7, #12]

   int8_t gpioPort    = 0;
1a005152:	2300      	movs	r3, #0
1a005154:	72fb      	strb	r3, [r7, #11]
   int8_t gpioPin     = 0;
1a005156:	2300      	movs	r3, #0
1a005158:	72bb      	strb	r3, [r7, #10]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00515a:	f107 040c 	add.w	r4, r7, #12
1a00515e:	f107 020d 	add.w	r2, r7, #13
1a005162:	f107 010e 	add.w	r1, r7, #14
1a005166:	f997 0007 	ldrsb.w	r0, [r7, #7]
1a00516a:	f107 030a 	add.w	r3, r7, #10
1a00516e:	9301      	str	r3, [sp, #4]
1a005170:	f107 030b 	add.w	r3, r7, #11
1a005174:	9300      	str	r3, [sp, #0]
1a005176:	4623      	mov	r3, r4
1a005178:	f7ff fe5a 	bl	1a004e30 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00517c:	f997 300b 	ldrsb.w	r3, [r7, #11]
1a005180:	4619      	mov	r1, r3
1a005182:	f997 300a 	ldrsb.w	r3, [r7, #10]
1a005186:	b2db      	uxtb	r3, r3
1a005188:	461a      	mov	r2, r3
1a00518a:	4805      	ldr	r0, [pc, #20]	; (1a0051a0 <gpioRead+0x84>)
1a00518c:	f7ff fe05 	bl	1a004d9a <Chip_GPIO_ReadPortBit>
1a005190:	4603      	mov	r3, r0
1a005192:	73fb      	strb	r3, [r7, #15]

   return ret_val;
1a005194:	7bfb      	ldrb	r3, [r7, #15]
}
1a005196:	4618      	mov	r0, r3
1a005198:	3714      	adds	r7, #20
1a00519a:	46bd      	mov	sp, r7
1a00519c:	bd90      	pop	{r4, r7, pc}
1a00519e:	bf00      	nop
1a0051a0:	400f4000 	.word	0x400f4000

1a0051a4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0051a4:	b580      	push	{r7, lr}
1a0051a6:	af00      	add	r7, sp, #0
   USBD_API->hw->ISR(g_hUsb);
1a0051a8:	4b04      	ldr	r3, [pc, #16]	; (1a0051bc <USB0_IRQHandler+0x18>)
1a0051aa:	681b      	ldr	r3, [r3, #0]
1a0051ac:	681b      	ldr	r3, [r3, #0]
1a0051ae:	68db      	ldr	r3, [r3, #12]
1a0051b0:	4a03      	ldr	r2, [pc, #12]	; (1a0051c0 <USB0_IRQHandler+0x1c>)
1a0051b2:	6812      	ldr	r2, [r2, #0]
1a0051b4:	4610      	mov	r0, r2
1a0051b6:	4798      	blx	r3
}
1a0051b8:	bf00      	nop
1a0051ba:	bd80      	pop	{r7, pc}
1a0051bc:	10002bc4 	.word	0x10002bc4
1a0051c0:	10002b24 	.word	0x10002b24

1a0051c4 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0051c4:	b580      	push	{r7, lr}
1a0051c6:	af00      	add	r7, sp, #0
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0051c8:	f7fe fe90 	bl	1a003eec <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0051cc:	4b19      	ldr	r3, [pc, #100]	; (1a005234 <boardInit+0x70>)
1a0051ce:	681b      	ldr	r3, [r3, #0]
1a0051d0:	4618      	mov	r0, r3
1a0051d2:	f7ff fd77 	bl	1a004cc4 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0051d6:	2105      	movs	r1, #5
1a0051d8:	2000      	movs	r0, #0
1a0051da:	f7ff fe75 	bl	1a004ec8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0051de:	2100      	movs	r1, #0
1a0051e0:	2024      	movs	r0, #36	; 0x24
1a0051e2:	f7ff fe71 	bl	1a004ec8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0051e6:	2100      	movs	r1, #0
1a0051e8:	2025      	movs	r0, #37	; 0x25
1a0051ea:	f7ff fe6d 	bl	1a004ec8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0051ee:	2100      	movs	r1, #0
1a0051f0:	2026      	movs	r0, #38	; 0x26
1a0051f2:	f7ff fe69 	bl	1a004ec8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0051f6:	2100      	movs	r1, #0
1a0051f8:	2027      	movs	r0, #39	; 0x27
1a0051fa:	f7ff fe65 	bl	1a004ec8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0051fe:	2101      	movs	r1, #1
1a005200:	2028      	movs	r0, #40	; 0x28
1a005202:	f7ff fe61 	bl	1a004ec8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a005206:	2101      	movs	r1, #1
1a005208:	2029      	movs	r0, #41	; 0x29
1a00520a:	f7ff fe5d 	bl	1a004ec8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00520e:	2101      	movs	r1, #1
1a005210:	202a      	movs	r0, #42	; 0x2a
1a005212:	f7ff fe59 	bl	1a004ec8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a005216:	2101      	movs	r1, #1
1a005218:	202b      	movs	r0, #43	; 0x2b
1a00521a:	f7ff fe55 	bl	1a004ec8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00521e:	2101      	movs	r1, #1
1a005220:	202c      	movs	r0, #44	; 0x2c
1a005222:	f7ff fe51 	bl	1a004ec8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a005226:	2101      	movs	r1, #1
1a005228:	202d      	movs	r0, #45	; 0x2d
1a00522a:	f7ff fe4d 	bl	1a004ec8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00522e:	bf00      	nop
1a005230:	bd80      	pop	{r7, pc}
1a005232:	bf00      	nop
1a005234:	10002bc0 	.word	0x10002bc0

1a005238 <__aeabi_drsub>:
1a005238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a00523c:	e002      	b.n	1a005244 <__adddf3>
1a00523e:	bf00      	nop

1a005240 <__aeabi_dsub>:
1a005240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a005244 <__adddf3>:
1a005244:	b530      	push	{r4, r5, lr}
1a005246:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00524a:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00524e:	ea94 0f05 	teq	r4, r5
1a005252:	bf08      	it	eq
1a005254:	ea90 0f02 	teqeq	r0, r2
1a005258:	bf1f      	itttt	ne
1a00525a:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00525e:	ea55 0c02 	orrsne.w	ip, r5, r2
1a005262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a005266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00526a:	f000 80e2 	beq.w	1a005432 <__adddf3+0x1ee>
1a00526e:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a005272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a005276:	bfb8      	it	lt
1a005278:	426d      	neglt	r5, r5
1a00527a:	dd0c      	ble.n	1a005296 <__adddf3+0x52>
1a00527c:	442c      	add	r4, r5
1a00527e:	ea80 0202 	eor.w	r2, r0, r2
1a005282:	ea81 0303 	eor.w	r3, r1, r3
1a005286:	ea82 0000 	eor.w	r0, r2, r0
1a00528a:	ea83 0101 	eor.w	r1, r3, r1
1a00528e:	ea80 0202 	eor.w	r2, r0, r2
1a005292:	ea81 0303 	eor.w	r3, r1, r3
1a005296:	2d36      	cmp	r5, #54	; 0x36
1a005298:	bf88      	it	hi
1a00529a:	bd30      	pophi	{r4, r5, pc}
1a00529c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0052a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0052a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0052a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0052ac:	d002      	beq.n	1a0052b4 <__adddf3+0x70>
1a0052ae:	4240      	negs	r0, r0
1a0052b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0052b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a0052b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0052bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0052c0:	d002      	beq.n	1a0052c8 <__adddf3+0x84>
1a0052c2:	4252      	negs	r2, r2
1a0052c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0052c8:	ea94 0f05 	teq	r4, r5
1a0052cc:	f000 80a7 	beq.w	1a00541e <__adddf3+0x1da>
1a0052d0:	f1a4 0401 	sub.w	r4, r4, #1
1a0052d4:	f1d5 0e20 	rsbs	lr, r5, #32
1a0052d8:	db0d      	blt.n	1a0052f6 <__adddf3+0xb2>
1a0052da:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0052de:	fa22 f205 	lsr.w	r2, r2, r5
1a0052e2:	1880      	adds	r0, r0, r2
1a0052e4:	f141 0100 	adc.w	r1, r1, #0
1a0052e8:	fa03 f20e 	lsl.w	r2, r3, lr
1a0052ec:	1880      	adds	r0, r0, r2
1a0052ee:	fa43 f305 	asr.w	r3, r3, r5
1a0052f2:	4159      	adcs	r1, r3
1a0052f4:	e00e      	b.n	1a005314 <__adddf3+0xd0>
1a0052f6:	f1a5 0520 	sub.w	r5, r5, #32
1a0052fa:	f10e 0e20 	add.w	lr, lr, #32
1a0052fe:	2a01      	cmp	r2, #1
1a005300:	fa03 fc0e 	lsl.w	ip, r3, lr
1a005304:	bf28      	it	cs
1a005306:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00530a:	fa43 f305 	asr.w	r3, r3, r5
1a00530e:	18c0      	adds	r0, r0, r3
1a005310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a005314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a005318:	d507      	bpl.n	1a00532a <__adddf3+0xe6>
1a00531a:	f04f 0e00 	mov.w	lr, #0
1a00531e:	f1dc 0c00 	rsbs	ip, ip, #0
1a005322:	eb7e 0000 	sbcs.w	r0, lr, r0
1a005326:	eb6e 0101 	sbc.w	r1, lr, r1
1a00532a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00532e:	d31b      	bcc.n	1a005368 <__adddf3+0x124>
1a005330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a005334:	d30c      	bcc.n	1a005350 <__adddf3+0x10c>
1a005336:	0849      	lsrs	r1, r1, #1
1a005338:	ea5f 0030 	movs.w	r0, r0, rrx
1a00533c:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a005340:	f104 0401 	add.w	r4, r4, #1
1a005344:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a005348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a00534c:	f080 809a 	bcs.w	1a005484 <__adddf3+0x240>
1a005350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a005354:	bf08      	it	eq
1a005356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00535a:	f150 0000 	adcs.w	r0, r0, #0
1a00535e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a005362:	ea41 0105 	orr.w	r1, r1, r5
1a005366:	bd30      	pop	{r4, r5, pc}
1a005368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a00536c:	4140      	adcs	r0, r0
1a00536e:	eb41 0101 	adc.w	r1, r1, r1
1a005372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005376:	f1a4 0401 	sub.w	r4, r4, #1
1a00537a:	d1e9      	bne.n	1a005350 <__adddf3+0x10c>
1a00537c:	f091 0f00 	teq	r1, #0
1a005380:	bf04      	itt	eq
1a005382:	4601      	moveq	r1, r0
1a005384:	2000      	moveq	r0, #0
1a005386:	fab1 f381 	clz	r3, r1
1a00538a:	bf08      	it	eq
1a00538c:	3320      	addeq	r3, #32
1a00538e:	f1a3 030b 	sub.w	r3, r3, #11
1a005392:	f1b3 0220 	subs.w	r2, r3, #32
1a005396:	da0c      	bge.n	1a0053b2 <__adddf3+0x16e>
1a005398:	320c      	adds	r2, #12
1a00539a:	dd08      	ble.n	1a0053ae <__adddf3+0x16a>
1a00539c:	f102 0c14 	add.w	ip, r2, #20
1a0053a0:	f1c2 020c 	rsb	r2, r2, #12
1a0053a4:	fa01 f00c 	lsl.w	r0, r1, ip
1a0053a8:	fa21 f102 	lsr.w	r1, r1, r2
1a0053ac:	e00c      	b.n	1a0053c8 <__adddf3+0x184>
1a0053ae:	f102 0214 	add.w	r2, r2, #20
1a0053b2:	bfd8      	it	le
1a0053b4:	f1c2 0c20 	rsble	ip, r2, #32
1a0053b8:	fa01 f102 	lsl.w	r1, r1, r2
1a0053bc:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0053c0:	bfdc      	itt	le
1a0053c2:	ea41 010c 	orrle.w	r1, r1, ip
1a0053c6:	4090      	lslle	r0, r2
1a0053c8:	1ae4      	subs	r4, r4, r3
1a0053ca:	bfa2      	ittt	ge
1a0053cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0053d0:	4329      	orrge	r1, r5
1a0053d2:	bd30      	popge	{r4, r5, pc}
1a0053d4:	ea6f 0404 	mvn.w	r4, r4
1a0053d8:	3c1f      	subs	r4, #31
1a0053da:	da1c      	bge.n	1a005416 <__adddf3+0x1d2>
1a0053dc:	340c      	adds	r4, #12
1a0053de:	dc0e      	bgt.n	1a0053fe <__adddf3+0x1ba>
1a0053e0:	f104 0414 	add.w	r4, r4, #20
1a0053e4:	f1c4 0220 	rsb	r2, r4, #32
1a0053e8:	fa20 f004 	lsr.w	r0, r0, r4
1a0053ec:	fa01 f302 	lsl.w	r3, r1, r2
1a0053f0:	ea40 0003 	orr.w	r0, r0, r3
1a0053f4:	fa21 f304 	lsr.w	r3, r1, r4
1a0053f8:	ea45 0103 	orr.w	r1, r5, r3
1a0053fc:	bd30      	pop	{r4, r5, pc}
1a0053fe:	f1c4 040c 	rsb	r4, r4, #12
1a005402:	f1c4 0220 	rsb	r2, r4, #32
1a005406:	fa20 f002 	lsr.w	r0, r0, r2
1a00540a:	fa01 f304 	lsl.w	r3, r1, r4
1a00540e:	ea40 0003 	orr.w	r0, r0, r3
1a005412:	4629      	mov	r1, r5
1a005414:	bd30      	pop	{r4, r5, pc}
1a005416:	fa21 f004 	lsr.w	r0, r1, r4
1a00541a:	4629      	mov	r1, r5
1a00541c:	bd30      	pop	{r4, r5, pc}
1a00541e:	f094 0f00 	teq	r4, #0
1a005422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a005426:	bf06      	itte	eq
1a005428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a00542c:	3401      	addeq	r4, #1
1a00542e:	3d01      	subne	r5, #1
1a005430:	e74e      	b.n	1a0052d0 <__adddf3+0x8c>
1a005432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a005436:	bf18      	it	ne
1a005438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00543c:	d029      	beq.n	1a005492 <__adddf3+0x24e>
1a00543e:	ea94 0f05 	teq	r4, r5
1a005442:	bf08      	it	eq
1a005444:	ea90 0f02 	teqeq	r0, r2
1a005448:	d005      	beq.n	1a005456 <__adddf3+0x212>
1a00544a:	ea54 0c00 	orrs.w	ip, r4, r0
1a00544e:	bf04      	itt	eq
1a005450:	4619      	moveq	r1, r3
1a005452:	4610      	moveq	r0, r2
1a005454:	bd30      	pop	{r4, r5, pc}
1a005456:	ea91 0f03 	teq	r1, r3
1a00545a:	bf1e      	ittt	ne
1a00545c:	2100      	movne	r1, #0
1a00545e:	2000      	movne	r0, #0
1a005460:	bd30      	popne	{r4, r5, pc}
1a005462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a005466:	d105      	bne.n	1a005474 <__adddf3+0x230>
1a005468:	0040      	lsls	r0, r0, #1
1a00546a:	4149      	adcs	r1, r1
1a00546c:	bf28      	it	cs
1a00546e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a005472:	bd30      	pop	{r4, r5, pc}
1a005474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a005478:	bf3c      	itt	cc
1a00547a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a00547e:	bd30      	popcc	{r4, r5, pc}
1a005480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a005484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a005488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00548c:	f04f 0000 	mov.w	r0, #0
1a005490:	bd30      	pop	{r4, r5, pc}
1a005492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a005496:	bf1a      	itte	ne
1a005498:	4619      	movne	r1, r3
1a00549a:	4610      	movne	r0, r2
1a00549c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0054a0:	bf1c      	itt	ne
1a0054a2:	460b      	movne	r3, r1
1a0054a4:	4602      	movne	r2, r0
1a0054a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0054aa:	bf06      	itte	eq
1a0054ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a0054b0:	ea91 0f03 	teqeq	r1, r3
1a0054b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a0054b8:	bd30      	pop	{r4, r5, pc}
1a0054ba:	bf00      	nop

1a0054bc <__aeabi_ui2d>:
1a0054bc:	f090 0f00 	teq	r0, #0
1a0054c0:	bf04      	itt	eq
1a0054c2:	2100      	moveq	r1, #0
1a0054c4:	4770      	bxeq	lr
1a0054c6:	b530      	push	{r4, r5, lr}
1a0054c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0054cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0054d0:	f04f 0500 	mov.w	r5, #0
1a0054d4:	f04f 0100 	mov.w	r1, #0
1a0054d8:	e750      	b.n	1a00537c <__adddf3+0x138>
1a0054da:	bf00      	nop

1a0054dc <__aeabi_i2d>:
1a0054dc:	f090 0f00 	teq	r0, #0
1a0054e0:	bf04      	itt	eq
1a0054e2:	2100      	moveq	r1, #0
1a0054e4:	4770      	bxeq	lr
1a0054e6:	b530      	push	{r4, r5, lr}
1a0054e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0054ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0054f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0054f4:	bf48      	it	mi
1a0054f6:	4240      	negmi	r0, r0
1a0054f8:	f04f 0100 	mov.w	r1, #0
1a0054fc:	e73e      	b.n	1a00537c <__adddf3+0x138>
1a0054fe:	bf00      	nop

1a005500 <__aeabi_f2d>:
1a005500:	0042      	lsls	r2, r0, #1
1a005502:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a005506:	ea4f 0131 	mov.w	r1, r1, rrx
1a00550a:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a00550e:	bf1f      	itttt	ne
1a005510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a005514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a005518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a00551c:	4770      	bxne	lr
1a00551e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a005522:	bf08      	it	eq
1a005524:	4770      	bxeq	lr
1a005526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00552a:	bf04      	itt	eq
1a00552c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a005530:	4770      	bxeq	lr
1a005532:	b530      	push	{r4, r5, lr}
1a005534:	f44f 7460 	mov.w	r4, #896	; 0x380
1a005538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00553c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a005540:	e71c      	b.n	1a00537c <__adddf3+0x138>
1a005542:	bf00      	nop

1a005544 <__aeabi_ul2d>:
1a005544:	ea50 0201 	orrs.w	r2, r0, r1
1a005548:	bf08      	it	eq
1a00554a:	4770      	bxeq	lr
1a00554c:	b530      	push	{r4, r5, lr}
1a00554e:	f04f 0500 	mov.w	r5, #0
1a005552:	e00a      	b.n	1a00556a <__aeabi_l2d+0x16>

1a005554 <__aeabi_l2d>:
1a005554:	ea50 0201 	orrs.w	r2, r0, r1
1a005558:	bf08      	it	eq
1a00555a:	4770      	bxeq	lr
1a00555c:	b530      	push	{r4, r5, lr}
1a00555e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a005562:	d502      	bpl.n	1a00556a <__aeabi_l2d+0x16>
1a005564:	4240      	negs	r0, r0
1a005566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00556a:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00556e:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a005572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a005576:	f43f aed8 	beq.w	1a00532a <__adddf3+0xe6>
1a00557a:	f04f 0203 	mov.w	r2, #3
1a00557e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a005582:	bf18      	it	ne
1a005584:	3203      	addne	r2, #3
1a005586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00558a:	bf18      	it	ne
1a00558c:	3203      	addne	r2, #3
1a00558e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a005592:	f1c2 0320 	rsb	r3, r2, #32
1a005596:	fa00 fc03 	lsl.w	ip, r0, r3
1a00559a:	fa20 f002 	lsr.w	r0, r0, r2
1a00559e:	fa01 fe03 	lsl.w	lr, r1, r3
1a0055a2:	ea40 000e 	orr.w	r0, r0, lr
1a0055a6:	fa21 f102 	lsr.w	r1, r1, r2
1a0055aa:	4414      	add	r4, r2
1a0055ac:	e6bd      	b.n	1a00532a <__adddf3+0xe6>
1a0055ae:	bf00      	nop

1a0055b0 <__aeabi_dmul>:
1a0055b0:	b570      	push	{r4, r5, r6, lr}
1a0055b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0055b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0055ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0055be:	bf1d      	ittte	ne
1a0055c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0055c4:	ea94 0f0c 	teqne	r4, ip
1a0055c8:	ea95 0f0c 	teqne	r5, ip
1a0055cc:	f000 f8de 	bleq	1a00578c <__aeabi_dmul+0x1dc>
1a0055d0:	442c      	add	r4, r5
1a0055d2:	ea81 0603 	eor.w	r6, r1, r3
1a0055d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a0055da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a0055de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a0055e2:	bf18      	it	ne
1a0055e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a0055e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0055ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0055f0:	d038      	beq.n	1a005664 <__aeabi_dmul+0xb4>
1a0055f2:	fba0 ce02 	umull	ip, lr, r0, r2
1a0055f6:	f04f 0500 	mov.w	r5, #0
1a0055fa:	fbe1 e502 	umlal	lr, r5, r1, r2
1a0055fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a005602:	fbe0 e503 	umlal	lr, r5, r0, r3
1a005606:	f04f 0600 	mov.w	r6, #0
1a00560a:	fbe1 5603 	umlal	r5, r6, r1, r3
1a00560e:	f09c 0f00 	teq	ip, #0
1a005612:	bf18      	it	ne
1a005614:	f04e 0e01 	orrne.w	lr, lr, #1
1a005618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a00561c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a005620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a005624:	d204      	bcs.n	1a005630 <__aeabi_dmul+0x80>
1a005626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00562a:	416d      	adcs	r5, r5
1a00562c:	eb46 0606 	adc.w	r6, r6, r6
1a005630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a005634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a005638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a00563c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a005640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a005644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a005648:	bf88      	it	hi
1a00564a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a00564e:	d81e      	bhi.n	1a00568e <__aeabi_dmul+0xde>
1a005650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a005654:	bf08      	it	eq
1a005656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a00565a:	f150 0000 	adcs.w	r0, r0, #0
1a00565e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a005662:	bd70      	pop	{r4, r5, r6, pc}
1a005664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a005668:	ea46 0101 	orr.w	r1, r6, r1
1a00566c:	ea40 0002 	orr.w	r0, r0, r2
1a005670:	ea81 0103 	eor.w	r1, r1, r3
1a005674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a005678:	bfc2      	ittt	gt
1a00567a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00567e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a005682:	bd70      	popgt	{r4, r5, r6, pc}
1a005684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005688:	f04f 0e00 	mov.w	lr, #0
1a00568c:	3c01      	subs	r4, #1
1a00568e:	f300 80ab 	bgt.w	1a0057e8 <__aeabi_dmul+0x238>
1a005692:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a005696:	bfde      	ittt	le
1a005698:	2000      	movle	r0, #0
1a00569a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a00569e:	bd70      	pople	{r4, r5, r6, pc}
1a0056a0:	f1c4 0400 	rsb	r4, r4, #0
1a0056a4:	3c20      	subs	r4, #32
1a0056a6:	da35      	bge.n	1a005714 <__aeabi_dmul+0x164>
1a0056a8:	340c      	adds	r4, #12
1a0056aa:	dc1b      	bgt.n	1a0056e4 <__aeabi_dmul+0x134>
1a0056ac:	f104 0414 	add.w	r4, r4, #20
1a0056b0:	f1c4 0520 	rsb	r5, r4, #32
1a0056b4:	fa00 f305 	lsl.w	r3, r0, r5
1a0056b8:	fa20 f004 	lsr.w	r0, r0, r4
1a0056bc:	fa01 f205 	lsl.w	r2, r1, r5
1a0056c0:	ea40 0002 	orr.w	r0, r0, r2
1a0056c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a0056c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0056cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0056d0:	fa21 f604 	lsr.w	r6, r1, r4
1a0056d4:	eb42 0106 	adc.w	r1, r2, r6
1a0056d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0056dc:	bf08      	it	eq
1a0056de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0056e2:	bd70      	pop	{r4, r5, r6, pc}
1a0056e4:	f1c4 040c 	rsb	r4, r4, #12
1a0056e8:	f1c4 0520 	rsb	r5, r4, #32
1a0056ec:	fa00 f304 	lsl.w	r3, r0, r4
1a0056f0:	fa20 f005 	lsr.w	r0, r0, r5
1a0056f4:	fa01 f204 	lsl.w	r2, r1, r4
1a0056f8:	ea40 0002 	orr.w	r0, r0, r2
1a0056fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a005704:	f141 0100 	adc.w	r1, r1, #0
1a005708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00570c:	bf08      	it	eq
1a00570e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a005712:	bd70      	pop	{r4, r5, r6, pc}
1a005714:	f1c4 0520 	rsb	r5, r4, #32
1a005718:	fa00 f205 	lsl.w	r2, r0, r5
1a00571c:	ea4e 0e02 	orr.w	lr, lr, r2
1a005720:	fa20 f304 	lsr.w	r3, r0, r4
1a005724:	fa01 f205 	lsl.w	r2, r1, r5
1a005728:	ea43 0302 	orr.w	r3, r3, r2
1a00572c:	fa21 f004 	lsr.w	r0, r1, r4
1a005730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a005734:	fa21 f204 	lsr.w	r2, r1, r4
1a005738:	ea20 0002 	bic.w	r0, r0, r2
1a00573c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a005740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a005744:	bf08      	it	eq
1a005746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00574a:	bd70      	pop	{r4, r5, r6, pc}
1a00574c:	f094 0f00 	teq	r4, #0
1a005750:	d10f      	bne.n	1a005772 <__aeabi_dmul+0x1c2>
1a005752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a005756:	0040      	lsls	r0, r0, #1
1a005758:	eb41 0101 	adc.w	r1, r1, r1
1a00575c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005760:	bf08      	it	eq
1a005762:	3c01      	subeq	r4, #1
1a005764:	d0f7      	beq.n	1a005756 <__aeabi_dmul+0x1a6>
1a005766:	ea41 0106 	orr.w	r1, r1, r6
1a00576a:	f095 0f00 	teq	r5, #0
1a00576e:	bf18      	it	ne
1a005770:	4770      	bxne	lr
1a005772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a005776:	0052      	lsls	r2, r2, #1
1a005778:	eb43 0303 	adc.w	r3, r3, r3
1a00577c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a005780:	bf08      	it	eq
1a005782:	3d01      	subeq	r5, #1
1a005784:	d0f7      	beq.n	1a005776 <__aeabi_dmul+0x1c6>
1a005786:	ea43 0306 	orr.w	r3, r3, r6
1a00578a:	4770      	bx	lr
1a00578c:	ea94 0f0c 	teq	r4, ip
1a005790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a005794:	bf18      	it	ne
1a005796:	ea95 0f0c 	teqne	r5, ip
1a00579a:	d00c      	beq.n	1a0057b6 <__aeabi_dmul+0x206>
1a00579c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0057a0:	bf18      	it	ne
1a0057a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0057a6:	d1d1      	bne.n	1a00574c <__aeabi_dmul+0x19c>
1a0057a8:	ea81 0103 	eor.w	r1, r1, r3
1a0057ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0057b0:	f04f 0000 	mov.w	r0, #0
1a0057b4:	bd70      	pop	{r4, r5, r6, pc}
1a0057b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0057ba:	bf06      	itte	eq
1a0057bc:	4610      	moveq	r0, r2
1a0057be:	4619      	moveq	r1, r3
1a0057c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0057c4:	d019      	beq.n	1a0057fa <__aeabi_dmul+0x24a>
1a0057c6:	ea94 0f0c 	teq	r4, ip
1a0057ca:	d102      	bne.n	1a0057d2 <__aeabi_dmul+0x222>
1a0057cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a0057d0:	d113      	bne.n	1a0057fa <__aeabi_dmul+0x24a>
1a0057d2:	ea95 0f0c 	teq	r5, ip
1a0057d6:	d105      	bne.n	1a0057e4 <__aeabi_dmul+0x234>
1a0057d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a0057dc:	bf1c      	itt	ne
1a0057de:	4610      	movne	r0, r2
1a0057e0:	4619      	movne	r1, r3
1a0057e2:	d10a      	bne.n	1a0057fa <__aeabi_dmul+0x24a>
1a0057e4:	ea81 0103 	eor.w	r1, r1, r3
1a0057e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0057ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0057f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0057f4:	f04f 0000 	mov.w	r0, #0
1a0057f8:	bd70      	pop	{r4, r5, r6, pc}
1a0057fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0057fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a005802:	bd70      	pop	{r4, r5, r6, pc}

1a005804 <__aeabi_ddiv>:
1a005804:	b570      	push	{r4, r5, r6, lr}
1a005806:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00580a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00580e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a005812:	bf1d      	ittte	ne
1a005814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a005818:	ea94 0f0c 	teqne	r4, ip
1a00581c:	ea95 0f0c 	teqne	r5, ip
1a005820:	f000 f8a7 	bleq	1a005972 <__aeabi_ddiv+0x16e>
1a005824:	eba4 0405 	sub.w	r4, r4, r5
1a005828:	ea81 0e03 	eor.w	lr, r1, r3
1a00582c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a005830:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a005834:	f000 8088 	beq.w	1a005948 <__aeabi_ddiv+0x144>
1a005838:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00583c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a005840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a005844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a005848:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a00584c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a005850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a005854:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a005858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a00585c:	429d      	cmp	r5, r3
1a00585e:	bf08      	it	eq
1a005860:	4296      	cmpeq	r6, r2
1a005862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a005866:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a00586a:	d202      	bcs.n	1a005872 <__aeabi_ddiv+0x6e>
1a00586c:	085b      	lsrs	r3, r3, #1
1a00586e:	ea4f 0232 	mov.w	r2, r2, rrx
1a005872:	1ab6      	subs	r6, r6, r2
1a005874:	eb65 0503 	sbc.w	r5, r5, r3
1a005878:	085b      	lsrs	r3, r3, #1
1a00587a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00587e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a005882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a005886:	ebb6 0e02 	subs.w	lr, r6, r2
1a00588a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00588e:	bf22      	ittt	cs
1a005890:	1ab6      	subcs	r6, r6, r2
1a005892:	4675      	movcs	r5, lr
1a005894:	ea40 000c 	orrcs.w	r0, r0, ip
1a005898:	085b      	lsrs	r3, r3, #1
1a00589a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00589e:	ebb6 0e02 	subs.w	lr, r6, r2
1a0058a2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0058a6:	bf22      	ittt	cs
1a0058a8:	1ab6      	subcs	r6, r6, r2
1a0058aa:	4675      	movcs	r5, lr
1a0058ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a0058b0:	085b      	lsrs	r3, r3, #1
1a0058b2:	ea4f 0232 	mov.w	r2, r2, rrx
1a0058b6:	ebb6 0e02 	subs.w	lr, r6, r2
1a0058ba:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0058be:	bf22      	ittt	cs
1a0058c0:	1ab6      	subcs	r6, r6, r2
1a0058c2:	4675      	movcs	r5, lr
1a0058c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a0058c8:	085b      	lsrs	r3, r3, #1
1a0058ca:	ea4f 0232 	mov.w	r2, r2, rrx
1a0058ce:	ebb6 0e02 	subs.w	lr, r6, r2
1a0058d2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0058d6:	bf22      	ittt	cs
1a0058d8:	1ab6      	subcs	r6, r6, r2
1a0058da:	4675      	movcs	r5, lr
1a0058dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a0058e0:	ea55 0e06 	orrs.w	lr, r5, r6
1a0058e4:	d018      	beq.n	1a005918 <__aeabi_ddiv+0x114>
1a0058e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a0058ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a0058ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a0058f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a0058f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a0058fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a0058fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a005902:	d1c0      	bne.n	1a005886 <__aeabi_ddiv+0x82>
1a005904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a005908:	d10b      	bne.n	1a005922 <__aeabi_ddiv+0x11e>
1a00590a:	ea41 0100 	orr.w	r1, r1, r0
1a00590e:	f04f 0000 	mov.w	r0, #0
1a005912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a005916:	e7b6      	b.n	1a005886 <__aeabi_ddiv+0x82>
1a005918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00591c:	bf04      	itt	eq
1a00591e:	4301      	orreq	r1, r0
1a005920:	2000      	moveq	r0, #0
1a005922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a005926:	bf88      	it	hi
1a005928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a00592c:	f63f aeaf 	bhi.w	1a00568e <__aeabi_dmul+0xde>
1a005930:	ebb5 0c03 	subs.w	ip, r5, r3
1a005934:	bf04      	itt	eq
1a005936:	ebb6 0c02 	subseq.w	ip, r6, r2
1a00593a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00593e:	f150 0000 	adcs.w	r0, r0, #0
1a005942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a005946:	bd70      	pop	{r4, r5, r6, pc}
1a005948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a00594c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a005950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a005954:	bfc2      	ittt	gt
1a005956:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00595a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00595e:	bd70      	popgt	{r4, r5, r6, pc}
1a005960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a005964:	f04f 0e00 	mov.w	lr, #0
1a005968:	3c01      	subs	r4, #1
1a00596a:	e690      	b.n	1a00568e <__aeabi_dmul+0xde>
1a00596c:	ea45 0e06 	orr.w	lr, r5, r6
1a005970:	e68d      	b.n	1a00568e <__aeabi_dmul+0xde>
1a005972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a005976:	ea94 0f0c 	teq	r4, ip
1a00597a:	bf08      	it	eq
1a00597c:	ea95 0f0c 	teqeq	r5, ip
1a005980:	f43f af3b 	beq.w	1a0057fa <__aeabi_dmul+0x24a>
1a005984:	ea94 0f0c 	teq	r4, ip
1a005988:	d10a      	bne.n	1a0059a0 <__aeabi_ddiv+0x19c>
1a00598a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00598e:	f47f af34 	bne.w	1a0057fa <__aeabi_dmul+0x24a>
1a005992:	ea95 0f0c 	teq	r5, ip
1a005996:	f47f af25 	bne.w	1a0057e4 <__aeabi_dmul+0x234>
1a00599a:	4610      	mov	r0, r2
1a00599c:	4619      	mov	r1, r3
1a00599e:	e72c      	b.n	1a0057fa <__aeabi_dmul+0x24a>
1a0059a0:	ea95 0f0c 	teq	r5, ip
1a0059a4:	d106      	bne.n	1a0059b4 <__aeabi_ddiv+0x1b0>
1a0059a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0059aa:	f43f aefd 	beq.w	1a0057a8 <__aeabi_dmul+0x1f8>
1a0059ae:	4610      	mov	r0, r2
1a0059b0:	4619      	mov	r1, r3
1a0059b2:	e722      	b.n	1a0057fa <__aeabi_dmul+0x24a>
1a0059b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0059b8:	bf18      	it	ne
1a0059ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0059be:	f47f aec5 	bne.w	1a00574c <__aeabi_dmul+0x19c>
1a0059c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a0059c6:	f47f af0d 	bne.w	1a0057e4 <__aeabi_dmul+0x234>
1a0059ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0059ce:	f47f aeeb 	bne.w	1a0057a8 <__aeabi_dmul+0x1f8>
1a0059d2:	e712      	b.n	1a0057fa <__aeabi_dmul+0x24a>

1a0059d4 <__gedf2>:
1a0059d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a0059d8:	e006      	b.n	1a0059e8 <__cmpdf2+0x4>
1a0059da:	bf00      	nop

1a0059dc <__ledf2>:
1a0059dc:	f04f 0c01 	mov.w	ip, #1
1a0059e0:	e002      	b.n	1a0059e8 <__cmpdf2+0x4>
1a0059e2:	bf00      	nop

1a0059e4 <__cmpdf2>:
1a0059e4:	f04f 0c01 	mov.w	ip, #1
1a0059e8:	f84d cd04 	str.w	ip, [sp, #-4]!
1a0059ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a0059f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0059f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0059f8:	bf18      	it	ne
1a0059fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a0059fe:	d01b      	beq.n	1a005a38 <__cmpdf2+0x54>
1a005a00:	b001      	add	sp, #4
1a005a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a005a06:	bf0c      	ite	eq
1a005a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a005a0c:	ea91 0f03 	teqne	r1, r3
1a005a10:	bf02      	ittt	eq
1a005a12:	ea90 0f02 	teqeq	r0, r2
1a005a16:	2000      	moveq	r0, #0
1a005a18:	4770      	bxeq	lr
1a005a1a:	f110 0f00 	cmn.w	r0, #0
1a005a1e:	ea91 0f03 	teq	r1, r3
1a005a22:	bf58      	it	pl
1a005a24:	4299      	cmppl	r1, r3
1a005a26:	bf08      	it	eq
1a005a28:	4290      	cmpeq	r0, r2
1a005a2a:	bf2c      	ite	cs
1a005a2c:	17d8      	asrcs	r0, r3, #31
1a005a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a005a32:	f040 0001 	orr.w	r0, r0, #1
1a005a36:	4770      	bx	lr
1a005a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a005a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005a40:	d102      	bne.n	1a005a48 <__cmpdf2+0x64>
1a005a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a005a46:	d107      	bne.n	1a005a58 <__cmpdf2+0x74>
1a005a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a005a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a005a50:	d1d6      	bne.n	1a005a00 <__cmpdf2+0x1c>
1a005a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a005a56:	d0d3      	beq.n	1a005a00 <__cmpdf2+0x1c>
1a005a58:	f85d 0b04 	ldr.w	r0, [sp], #4
1a005a5c:	4770      	bx	lr
1a005a5e:	bf00      	nop

1a005a60 <__aeabi_cdrcmple>:
1a005a60:	4684      	mov	ip, r0
1a005a62:	4610      	mov	r0, r2
1a005a64:	4662      	mov	r2, ip
1a005a66:	468c      	mov	ip, r1
1a005a68:	4619      	mov	r1, r3
1a005a6a:	4663      	mov	r3, ip
1a005a6c:	e000      	b.n	1a005a70 <__aeabi_cdcmpeq>
1a005a6e:	bf00      	nop

1a005a70 <__aeabi_cdcmpeq>:
1a005a70:	b501      	push	{r0, lr}
1a005a72:	f7ff ffb7 	bl	1a0059e4 <__cmpdf2>
1a005a76:	2800      	cmp	r0, #0
1a005a78:	bf48      	it	mi
1a005a7a:	f110 0f00 	cmnmi.w	r0, #0
1a005a7e:	bd01      	pop	{r0, pc}

1a005a80 <__aeabi_dcmpeq>:
1a005a80:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005a84:	f7ff fff4 	bl	1a005a70 <__aeabi_cdcmpeq>
1a005a88:	bf0c      	ite	eq
1a005a8a:	2001      	moveq	r0, #1
1a005a8c:	2000      	movne	r0, #0
1a005a8e:	f85d fb08 	ldr.w	pc, [sp], #8
1a005a92:	bf00      	nop

1a005a94 <__aeabi_dcmplt>:
1a005a94:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005a98:	f7ff ffea 	bl	1a005a70 <__aeabi_cdcmpeq>
1a005a9c:	bf34      	ite	cc
1a005a9e:	2001      	movcc	r0, #1
1a005aa0:	2000      	movcs	r0, #0
1a005aa2:	f85d fb08 	ldr.w	pc, [sp], #8
1a005aa6:	bf00      	nop

1a005aa8 <__aeabi_dcmple>:
1a005aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005aac:	f7ff ffe0 	bl	1a005a70 <__aeabi_cdcmpeq>
1a005ab0:	bf94      	ite	ls
1a005ab2:	2001      	movls	r0, #1
1a005ab4:	2000      	movhi	r0, #0
1a005ab6:	f85d fb08 	ldr.w	pc, [sp], #8
1a005aba:	bf00      	nop

1a005abc <__aeabi_dcmpge>:
1a005abc:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005ac0:	f7ff ffce 	bl	1a005a60 <__aeabi_cdrcmple>
1a005ac4:	bf94      	ite	ls
1a005ac6:	2001      	movls	r0, #1
1a005ac8:	2000      	movhi	r0, #0
1a005aca:	f85d fb08 	ldr.w	pc, [sp], #8
1a005ace:	bf00      	nop

1a005ad0 <__aeabi_dcmpgt>:
1a005ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a005ad4:	f7ff ffc4 	bl	1a005a60 <__aeabi_cdrcmple>
1a005ad8:	bf34      	ite	cc
1a005ada:	2001      	movcc	r0, #1
1a005adc:	2000      	movcs	r0, #0
1a005ade:	f85d fb08 	ldr.w	pc, [sp], #8
1a005ae2:	bf00      	nop

1a005ae4 <__aeabi_d2iz>:
1a005ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a005ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a005aec:	d215      	bcs.n	1a005b1a <__aeabi_d2iz+0x36>
1a005aee:	d511      	bpl.n	1a005b14 <__aeabi_d2iz+0x30>
1a005af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a005af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a005af8:	d912      	bls.n	1a005b20 <__aeabi_d2iz+0x3c>
1a005afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a005afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a005b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a005b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a005b0a:	fa23 f002 	lsr.w	r0, r3, r2
1a005b0e:	bf18      	it	ne
1a005b10:	4240      	negne	r0, r0
1a005b12:	4770      	bx	lr
1a005b14:	f04f 0000 	mov.w	r0, #0
1a005b18:	4770      	bx	lr
1a005b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a005b1e:	d105      	bne.n	1a005b2c <__aeabi_d2iz+0x48>
1a005b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a005b24:	bf08      	it	eq
1a005b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a005b2a:	4770      	bx	lr
1a005b2c:	f04f 0000 	mov.w	r0, #0
1a005b30:	4770      	bx	lr
1a005b32:	bf00      	nop

1a005b34 <__aeabi_uldivmod>:
1a005b34:	b953      	cbnz	r3, 1a005b4c <__aeabi_uldivmod+0x18>
1a005b36:	b94a      	cbnz	r2, 1a005b4c <__aeabi_uldivmod+0x18>
1a005b38:	2900      	cmp	r1, #0
1a005b3a:	bf08      	it	eq
1a005b3c:	2800      	cmpeq	r0, #0
1a005b3e:	bf1c      	itt	ne
1a005b40:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a005b44:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a005b48:	f000 b974 	b.w	1a005e34 <__aeabi_idiv0>
1a005b4c:	f1ad 0c08 	sub.w	ip, sp, #8
1a005b50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a005b54:	f000 f806 	bl	1a005b64 <__udivmoddi4>
1a005b58:	f8dd e004 	ldr.w	lr, [sp, #4]
1a005b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005b60:	b004      	add	sp, #16
1a005b62:	4770      	bx	lr

1a005b64 <__udivmoddi4>:
1a005b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005b68:	9e08      	ldr	r6, [sp, #32]
1a005b6a:	4604      	mov	r4, r0
1a005b6c:	4688      	mov	r8, r1
1a005b6e:	2b00      	cmp	r3, #0
1a005b70:	f040 8085 	bne.w	1a005c7e <__udivmoddi4+0x11a>
1a005b74:	428a      	cmp	r2, r1
1a005b76:	4615      	mov	r5, r2
1a005b78:	d948      	bls.n	1a005c0c <__udivmoddi4+0xa8>
1a005b7a:	fab2 f282 	clz	r2, r2
1a005b7e:	b14a      	cbz	r2, 1a005b94 <__udivmoddi4+0x30>
1a005b80:	f1c2 0720 	rsb	r7, r2, #32
1a005b84:	fa01 f302 	lsl.w	r3, r1, r2
1a005b88:	fa20 f707 	lsr.w	r7, r0, r7
1a005b8c:	4095      	lsls	r5, r2
1a005b8e:	ea47 0803 	orr.w	r8, r7, r3
1a005b92:	4094      	lsls	r4, r2
1a005b94:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005b98:	0c23      	lsrs	r3, r4, #16
1a005b9a:	fbb8 f7fe 	udiv	r7, r8, lr
1a005b9e:	fa1f fc85 	uxth.w	ip, r5
1a005ba2:	fb0e 8817 	mls	r8, lr, r7, r8
1a005ba6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a005baa:	fb07 f10c 	mul.w	r1, r7, ip
1a005bae:	4299      	cmp	r1, r3
1a005bb0:	d909      	bls.n	1a005bc6 <__udivmoddi4+0x62>
1a005bb2:	18eb      	adds	r3, r5, r3
1a005bb4:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a005bb8:	f080 80e3 	bcs.w	1a005d82 <__udivmoddi4+0x21e>
1a005bbc:	4299      	cmp	r1, r3
1a005bbe:	f240 80e0 	bls.w	1a005d82 <__udivmoddi4+0x21e>
1a005bc2:	3f02      	subs	r7, #2
1a005bc4:	442b      	add	r3, r5
1a005bc6:	1a5b      	subs	r3, r3, r1
1a005bc8:	b2a4      	uxth	r4, r4
1a005bca:	fbb3 f0fe 	udiv	r0, r3, lr
1a005bce:	fb0e 3310 	mls	r3, lr, r0, r3
1a005bd2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a005bd6:	fb00 fc0c 	mul.w	ip, r0, ip
1a005bda:	45a4      	cmp	ip, r4
1a005bdc:	d909      	bls.n	1a005bf2 <__udivmoddi4+0x8e>
1a005bde:	192c      	adds	r4, r5, r4
1a005be0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005be4:	f080 80cb 	bcs.w	1a005d7e <__udivmoddi4+0x21a>
1a005be8:	45a4      	cmp	ip, r4
1a005bea:	f240 80c8 	bls.w	1a005d7e <__udivmoddi4+0x21a>
1a005bee:	3802      	subs	r0, #2
1a005bf0:	442c      	add	r4, r5
1a005bf2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a005bf6:	eba4 040c 	sub.w	r4, r4, ip
1a005bfa:	2700      	movs	r7, #0
1a005bfc:	b11e      	cbz	r6, 1a005c06 <__udivmoddi4+0xa2>
1a005bfe:	40d4      	lsrs	r4, r2
1a005c00:	2300      	movs	r3, #0
1a005c02:	e9c6 4300 	strd	r4, r3, [r6]
1a005c06:	4639      	mov	r1, r7
1a005c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005c0c:	2a00      	cmp	r2, #0
1a005c0e:	d053      	beq.n	1a005cb8 <__udivmoddi4+0x154>
1a005c10:	fab2 f282 	clz	r2, r2
1a005c14:	2a00      	cmp	r2, #0
1a005c16:	f040 80b6 	bne.w	1a005d86 <__udivmoddi4+0x222>
1a005c1a:	1b49      	subs	r1, r1, r5
1a005c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005c20:	fa1f f885 	uxth.w	r8, r5
1a005c24:	2701      	movs	r7, #1
1a005c26:	fbb1 fcfe 	udiv	ip, r1, lr
1a005c2a:	0c23      	lsrs	r3, r4, #16
1a005c2c:	fb0e 111c 	mls	r1, lr, ip, r1
1a005c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a005c34:	fb08 f10c 	mul.w	r1, r8, ip
1a005c38:	4299      	cmp	r1, r3
1a005c3a:	d907      	bls.n	1a005c4c <__udivmoddi4+0xe8>
1a005c3c:	18eb      	adds	r3, r5, r3
1a005c3e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a005c42:	d202      	bcs.n	1a005c4a <__udivmoddi4+0xe6>
1a005c44:	4299      	cmp	r1, r3
1a005c46:	f200 80ec 	bhi.w	1a005e22 <__udivmoddi4+0x2be>
1a005c4a:	4684      	mov	ip, r0
1a005c4c:	1a59      	subs	r1, r3, r1
1a005c4e:	b2a3      	uxth	r3, r4
1a005c50:	fbb1 f0fe 	udiv	r0, r1, lr
1a005c54:	fb0e 1410 	mls	r4, lr, r0, r1
1a005c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a005c5c:	fb08 f800 	mul.w	r8, r8, r0
1a005c60:	45a0      	cmp	r8, r4
1a005c62:	d907      	bls.n	1a005c74 <__udivmoddi4+0x110>
1a005c64:	192c      	adds	r4, r5, r4
1a005c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005c6a:	d202      	bcs.n	1a005c72 <__udivmoddi4+0x10e>
1a005c6c:	45a0      	cmp	r8, r4
1a005c6e:	f200 80dc 	bhi.w	1a005e2a <__udivmoddi4+0x2c6>
1a005c72:	4618      	mov	r0, r3
1a005c74:	eba4 0408 	sub.w	r4, r4, r8
1a005c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a005c7c:	e7be      	b.n	1a005bfc <__udivmoddi4+0x98>
1a005c7e:	428b      	cmp	r3, r1
1a005c80:	d908      	bls.n	1a005c94 <__udivmoddi4+0x130>
1a005c82:	2e00      	cmp	r6, #0
1a005c84:	d078      	beq.n	1a005d78 <__udivmoddi4+0x214>
1a005c86:	2700      	movs	r7, #0
1a005c88:	e9c6 0100 	strd	r0, r1, [r6]
1a005c8c:	4638      	mov	r0, r7
1a005c8e:	4639      	mov	r1, r7
1a005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005c94:	fab3 f783 	clz	r7, r3
1a005c98:	b97f      	cbnz	r7, 1a005cba <__udivmoddi4+0x156>
1a005c9a:	428b      	cmp	r3, r1
1a005c9c:	d302      	bcc.n	1a005ca4 <__udivmoddi4+0x140>
1a005c9e:	4282      	cmp	r2, r0
1a005ca0:	f200 80bd 	bhi.w	1a005e1e <__udivmoddi4+0x2ba>
1a005ca4:	1a84      	subs	r4, r0, r2
1a005ca6:	eb61 0303 	sbc.w	r3, r1, r3
1a005caa:	2001      	movs	r0, #1
1a005cac:	4698      	mov	r8, r3
1a005cae:	2e00      	cmp	r6, #0
1a005cb0:	d0a9      	beq.n	1a005c06 <__udivmoddi4+0xa2>
1a005cb2:	e9c6 4800 	strd	r4, r8, [r6]
1a005cb6:	e7a6      	b.n	1a005c06 <__udivmoddi4+0xa2>
1a005cb8:	deff      	udf	#255	; 0xff
1a005cba:	f1c7 0520 	rsb	r5, r7, #32
1a005cbe:	40bb      	lsls	r3, r7
1a005cc0:	fa22 fc05 	lsr.w	ip, r2, r5
1a005cc4:	ea4c 0c03 	orr.w	ip, ip, r3
1a005cc8:	fa01 f407 	lsl.w	r4, r1, r7
1a005ccc:	fa20 f805 	lsr.w	r8, r0, r5
1a005cd0:	fa21 f305 	lsr.w	r3, r1, r5
1a005cd4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a005cd8:	ea48 0404 	orr.w	r4, r8, r4
1a005cdc:	fbb3 f9fe 	udiv	r9, r3, lr
1a005ce0:	0c21      	lsrs	r1, r4, #16
1a005ce2:	fb0e 3319 	mls	r3, lr, r9, r3
1a005ce6:	fa1f f88c 	uxth.w	r8, ip
1a005cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a005cee:	fb09 fa08 	mul.w	sl, r9, r8
1a005cf2:	459a      	cmp	sl, r3
1a005cf4:	fa02 f207 	lsl.w	r2, r2, r7
1a005cf8:	fa00 f107 	lsl.w	r1, r0, r7
1a005cfc:	d90b      	bls.n	1a005d16 <__udivmoddi4+0x1b2>
1a005cfe:	eb1c 0303 	adds.w	r3, ip, r3
1a005d02:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a005d06:	f080 8088 	bcs.w	1a005e1a <__udivmoddi4+0x2b6>
1a005d0a:	459a      	cmp	sl, r3
1a005d0c:	f240 8085 	bls.w	1a005e1a <__udivmoddi4+0x2b6>
1a005d10:	f1a9 0902 	sub.w	r9, r9, #2
1a005d14:	4463      	add	r3, ip
1a005d16:	eba3 030a 	sub.w	r3, r3, sl
1a005d1a:	b2a4      	uxth	r4, r4
1a005d1c:	fbb3 f0fe 	udiv	r0, r3, lr
1a005d20:	fb0e 3310 	mls	r3, lr, r0, r3
1a005d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a005d28:	fb00 f808 	mul.w	r8, r0, r8
1a005d2c:	45a0      	cmp	r8, r4
1a005d2e:	d908      	bls.n	1a005d42 <__udivmoddi4+0x1de>
1a005d30:	eb1c 0404 	adds.w	r4, ip, r4
1a005d34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005d38:	d26b      	bcs.n	1a005e12 <__udivmoddi4+0x2ae>
1a005d3a:	45a0      	cmp	r8, r4
1a005d3c:	d969      	bls.n	1a005e12 <__udivmoddi4+0x2ae>
1a005d3e:	3802      	subs	r0, #2
1a005d40:	4464      	add	r4, ip
1a005d42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a005d46:	eba4 0408 	sub.w	r4, r4, r8
1a005d4a:	fba0 8902 	umull	r8, r9, r0, r2
1a005d4e:	454c      	cmp	r4, r9
1a005d50:	46c6      	mov	lr, r8
1a005d52:	464b      	mov	r3, r9
1a005d54:	d354      	bcc.n	1a005e00 <__udivmoddi4+0x29c>
1a005d56:	d051      	beq.n	1a005dfc <__udivmoddi4+0x298>
1a005d58:	2e00      	cmp	r6, #0
1a005d5a:	d069      	beq.n	1a005e30 <__udivmoddi4+0x2cc>
1a005d5c:	ebb1 020e 	subs.w	r2, r1, lr
1a005d60:	eb64 0403 	sbc.w	r4, r4, r3
1a005d64:	fa04 f505 	lsl.w	r5, r4, r5
1a005d68:	fa22 f307 	lsr.w	r3, r2, r7
1a005d6c:	40fc      	lsrs	r4, r7
1a005d6e:	431d      	orrs	r5, r3
1a005d70:	e9c6 5400 	strd	r5, r4, [r6]
1a005d74:	2700      	movs	r7, #0
1a005d76:	e746      	b.n	1a005c06 <__udivmoddi4+0xa2>
1a005d78:	4637      	mov	r7, r6
1a005d7a:	4630      	mov	r0, r6
1a005d7c:	e743      	b.n	1a005c06 <__udivmoddi4+0xa2>
1a005d7e:	4618      	mov	r0, r3
1a005d80:	e737      	b.n	1a005bf2 <__udivmoddi4+0x8e>
1a005d82:	4607      	mov	r7, r0
1a005d84:	e71f      	b.n	1a005bc6 <__udivmoddi4+0x62>
1a005d86:	f1c2 0320 	rsb	r3, r2, #32
1a005d8a:	fa20 f703 	lsr.w	r7, r0, r3
1a005d8e:	4095      	lsls	r5, r2
1a005d90:	fa01 f002 	lsl.w	r0, r1, r2
1a005d94:	fa21 f303 	lsr.w	r3, r1, r3
1a005d98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a005d9c:	4338      	orrs	r0, r7
1a005d9e:	0c01      	lsrs	r1, r0, #16
1a005da0:	fbb3 f7fe 	udiv	r7, r3, lr
1a005da4:	fa1f f885 	uxth.w	r8, r5
1a005da8:	fb0e 3317 	mls	r3, lr, r7, r3
1a005dac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a005db0:	fb07 f308 	mul.w	r3, r7, r8
1a005db4:	428b      	cmp	r3, r1
1a005db6:	fa04 f402 	lsl.w	r4, r4, r2
1a005dba:	d907      	bls.n	1a005dcc <__udivmoddi4+0x268>
1a005dbc:	1869      	adds	r1, r5, r1
1a005dbe:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a005dc2:	d228      	bcs.n	1a005e16 <__udivmoddi4+0x2b2>
1a005dc4:	428b      	cmp	r3, r1
1a005dc6:	d926      	bls.n	1a005e16 <__udivmoddi4+0x2b2>
1a005dc8:	3f02      	subs	r7, #2
1a005dca:	4429      	add	r1, r5
1a005dcc:	1acb      	subs	r3, r1, r3
1a005dce:	b281      	uxth	r1, r0
1a005dd0:	fbb3 f0fe 	udiv	r0, r3, lr
1a005dd4:	fb0e 3310 	mls	r3, lr, r0, r3
1a005dd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a005ddc:	fb00 f308 	mul.w	r3, r0, r8
1a005de0:	428b      	cmp	r3, r1
1a005de2:	d907      	bls.n	1a005df4 <__udivmoddi4+0x290>
1a005de4:	1869      	adds	r1, r5, r1
1a005de6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a005dea:	d210      	bcs.n	1a005e0e <__udivmoddi4+0x2aa>
1a005dec:	428b      	cmp	r3, r1
1a005dee:	d90e      	bls.n	1a005e0e <__udivmoddi4+0x2aa>
1a005df0:	3802      	subs	r0, #2
1a005df2:	4429      	add	r1, r5
1a005df4:	1ac9      	subs	r1, r1, r3
1a005df6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a005dfa:	e714      	b.n	1a005c26 <__udivmoddi4+0xc2>
1a005dfc:	4541      	cmp	r1, r8
1a005dfe:	d2ab      	bcs.n	1a005d58 <__udivmoddi4+0x1f4>
1a005e00:	ebb8 0e02 	subs.w	lr, r8, r2
1a005e04:	eb69 020c 	sbc.w	r2, r9, ip
1a005e08:	3801      	subs	r0, #1
1a005e0a:	4613      	mov	r3, r2
1a005e0c:	e7a4      	b.n	1a005d58 <__udivmoddi4+0x1f4>
1a005e0e:	4660      	mov	r0, ip
1a005e10:	e7f0      	b.n	1a005df4 <__udivmoddi4+0x290>
1a005e12:	4618      	mov	r0, r3
1a005e14:	e795      	b.n	1a005d42 <__udivmoddi4+0x1de>
1a005e16:	4667      	mov	r7, ip
1a005e18:	e7d8      	b.n	1a005dcc <__udivmoddi4+0x268>
1a005e1a:	4681      	mov	r9, r0
1a005e1c:	e77b      	b.n	1a005d16 <__udivmoddi4+0x1b2>
1a005e1e:	4638      	mov	r0, r7
1a005e20:	e745      	b.n	1a005cae <__udivmoddi4+0x14a>
1a005e22:	f1ac 0c02 	sub.w	ip, ip, #2
1a005e26:	442b      	add	r3, r5
1a005e28:	e710      	b.n	1a005c4c <__udivmoddi4+0xe8>
1a005e2a:	3802      	subs	r0, #2
1a005e2c:	442c      	add	r4, r5
1a005e2e:	e721      	b.n	1a005c74 <__udivmoddi4+0x110>
1a005e30:	4637      	mov	r7, r6
1a005e32:	e6e8      	b.n	1a005c06 <__udivmoddi4+0xa2>

1a005e34 <__aeabi_idiv0>:
1a005e34:	4770      	bx	lr
1a005e36:	bf00      	nop

1a005e38 <_fclose_r>:
1a005e38:	b570      	push	{r4, r5, r6, lr}
1a005e3a:	2900      	cmp	r1, #0
1a005e3c:	d04a      	beq.n	1a005ed4 <_fclose_r+0x9c>
1a005e3e:	4605      	mov	r5, r0
1a005e40:	460c      	mov	r4, r1
1a005e42:	b110      	cbz	r0, 1a005e4a <_fclose_r+0x12>
1a005e44:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a005e46:	2b00      	cmp	r3, #0
1a005e48:	d047      	beq.n	1a005eda <_fclose_r+0xa2>
1a005e4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a005e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005e50:	07d8      	lsls	r0, r3, #31
1a005e52:	d532      	bpl.n	1a005eba <_fclose_r+0x82>
1a005e54:	2a00      	cmp	r2, #0
1a005e56:	d03d      	beq.n	1a005ed4 <_fclose_r+0x9c>
1a005e58:	4621      	mov	r1, r4
1a005e5a:	4628      	mov	r0, r5
1a005e5c:	f000 f854 	bl	1a005f08 <__sflush_r>
1a005e60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a005e62:	4606      	mov	r6, r0
1a005e64:	b133      	cbz	r3, 1a005e74 <_fclose_r+0x3c>
1a005e66:	69e1      	ldr	r1, [r4, #28]
1a005e68:	4628      	mov	r0, r5
1a005e6a:	4798      	blx	r3
1a005e6c:	2800      	cmp	r0, #0
1a005e6e:	bfb8      	it	lt
1a005e70:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a005e74:	89a3      	ldrh	r3, [r4, #12]
1a005e76:	061a      	lsls	r2, r3, #24
1a005e78:	d43c      	bmi.n	1a005ef4 <_fclose_r+0xbc>
1a005e7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005e7c:	b141      	cbz	r1, 1a005e90 <_fclose_r+0x58>
1a005e7e:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a005e82:	4299      	cmp	r1, r3
1a005e84:	d002      	beq.n	1a005e8c <_fclose_r+0x54>
1a005e86:	4628      	mov	r0, r5
1a005e88:	f000 f9c6 	bl	1a006218 <_free_r>
1a005e8c:	2300      	movs	r3, #0
1a005e8e:	6323      	str	r3, [r4, #48]	; 0x30
1a005e90:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a005e92:	b121      	cbz	r1, 1a005e9e <_fclose_r+0x66>
1a005e94:	4628      	mov	r0, r5
1a005e96:	f000 f9bf 	bl	1a006218 <_free_r>
1a005e9a:	2300      	movs	r3, #0
1a005e9c:	6463      	str	r3, [r4, #68]	; 0x44
1a005e9e:	f000 f95f 	bl	1a006160 <__sfp_lock_acquire>
1a005ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a005ea4:	2200      	movs	r2, #0
1a005ea6:	07db      	lsls	r3, r3, #31
1a005ea8:	81a2      	strh	r2, [r4, #12]
1a005eaa:	d528      	bpl.n	1a005efe <_fclose_r+0xc6>
1a005eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005eae:	f000 faf9 	bl	1a0064a4 <__retarget_lock_close_recursive>
1a005eb2:	f000 f95b 	bl	1a00616c <__sfp_lock_release>
1a005eb6:	4630      	mov	r0, r6
1a005eb8:	bd70      	pop	{r4, r5, r6, pc}
1a005eba:	0591      	lsls	r1, r2, #22
1a005ebc:	d4cc      	bmi.n	1a005e58 <_fclose_r+0x20>
1a005ebe:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005ec0:	f000 faf2 	bl	1a0064a8 <__retarget_lock_acquire_recursive>
1a005ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005ec8:	2b00      	cmp	r3, #0
1a005eca:	d1c5      	bne.n	1a005e58 <_fclose_r+0x20>
1a005ecc:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a005ece:	f016 0601 	ands.w	r6, r6, #1
1a005ed2:	d00a      	beq.n	1a005eea <_fclose_r+0xb2>
1a005ed4:	2600      	movs	r6, #0
1a005ed6:	4630      	mov	r0, r6
1a005ed8:	bd70      	pop	{r4, r5, r6, pc}
1a005eda:	f000 f917 	bl	1a00610c <__sinit>
1a005ede:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a005ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005ee4:	07d8      	lsls	r0, r3, #31
1a005ee6:	d4b5      	bmi.n	1a005e54 <_fclose_r+0x1c>
1a005ee8:	e7e7      	b.n	1a005eba <_fclose_r+0x82>
1a005eea:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005eec:	f000 fade 	bl	1a0064ac <__retarget_lock_release_recursive>
1a005ef0:	4630      	mov	r0, r6
1a005ef2:	bd70      	pop	{r4, r5, r6, pc}
1a005ef4:	6921      	ldr	r1, [r4, #16]
1a005ef6:	4628      	mov	r0, r5
1a005ef8:	f000 f98e 	bl	1a006218 <_free_r>
1a005efc:	e7bd      	b.n	1a005e7a <_fclose_r+0x42>
1a005efe:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a005f00:	f000 fad4 	bl	1a0064ac <__retarget_lock_release_recursive>
1a005f04:	e7d2      	b.n	1a005eac <_fclose_r+0x74>
1a005f06:	bf00      	nop

1a005f08 <__sflush_r>:
1a005f08:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a005f0c:	b29a      	uxth	r2, r3
1a005f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005f12:	460c      	mov	r4, r1
1a005f14:	0711      	lsls	r1, r2, #28
1a005f16:	4680      	mov	r8, r0
1a005f18:	d448      	bmi.n	1a005fac <__sflush_r+0xa4>
1a005f1a:	6862      	ldr	r2, [r4, #4]
1a005f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a005f20:	2a00      	cmp	r2, #0
1a005f22:	81a3      	strh	r3, [r4, #12]
1a005f24:	dd5d      	ble.n	1a005fe2 <__sflush_r+0xda>
1a005f26:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005f28:	2d00      	cmp	r5, #0
1a005f2a:	d057      	beq.n	1a005fdc <__sflush_r+0xd4>
1a005f2c:	2200      	movs	r2, #0
1a005f2e:	b29b      	uxth	r3, r3
1a005f30:	f8d8 6000 	ldr.w	r6, [r8]
1a005f34:	69e1      	ldr	r1, [r4, #28]
1a005f36:	f8c8 2000 	str.w	r2, [r8]
1a005f3a:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a005f3e:	d154      	bne.n	1a005fea <__sflush_r+0xe2>
1a005f40:	2301      	movs	r3, #1
1a005f42:	4640      	mov	r0, r8
1a005f44:	47a8      	blx	r5
1a005f46:	1c43      	adds	r3, r0, #1
1a005f48:	4602      	mov	r2, r0
1a005f4a:	d065      	beq.n	1a006018 <__sflush_r+0x110>
1a005f4c:	89a3      	ldrh	r3, [r4, #12]
1a005f4e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005f50:	69e1      	ldr	r1, [r4, #28]
1a005f52:	075f      	lsls	r7, r3, #29
1a005f54:	d505      	bpl.n	1a005f62 <__sflush_r+0x5a>
1a005f56:	6860      	ldr	r0, [r4, #4]
1a005f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a005f5a:	1a12      	subs	r2, r2, r0
1a005f5c:	b10b      	cbz	r3, 1a005f62 <__sflush_r+0x5a>
1a005f5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a005f60:	1ad2      	subs	r2, r2, r3
1a005f62:	2300      	movs	r3, #0
1a005f64:	4640      	mov	r0, r8
1a005f66:	47a8      	blx	r5
1a005f68:	1c45      	adds	r5, r0, #1
1a005f6a:	d148      	bne.n	1a005ffe <__sflush_r+0xf6>
1a005f6c:	f8d8 2000 	ldr.w	r2, [r8]
1a005f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005f74:	2a00      	cmp	r2, #0
1a005f76:	d05c      	beq.n	1a006032 <__sflush_r+0x12a>
1a005f78:	2a1d      	cmp	r2, #29
1a005f7a:	d001      	beq.n	1a005f80 <__sflush_r+0x78>
1a005f7c:	2a16      	cmp	r2, #22
1a005f7e:	d164      	bne.n	1a00604a <__sflush_r+0x142>
1a005f80:	6922      	ldr	r2, [r4, #16]
1a005f82:	2100      	movs	r1, #0
1a005f84:	e9c4 2100 	strd	r2, r1, [r4]
1a005f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005f8c:	81a3      	strh	r3, [r4, #12]
1a005f8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005f90:	f8c8 6000 	str.w	r6, [r8]
1a005f94:	b311      	cbz	r1, 1a005fdc <__sflush_r+0xd4>
1a005f96:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a005f9a:	4299      	cmp	r1, r3
1a005f9c:	d002      	beq.n	1a005fa4 <__sflush_r+0x9c>
1a005f9e:	4640      	mov	r0, r8
1a005fa0:	f000 f93a 	bl	1a006218 <_free_r>
1a005fa4:	2000      	movs	r0, #0
1a005fa6:	6320      	str	r0, [r4, #48]	; 0x30
1a005fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005fac:	6926      	ldr	r6, [r4, #16]
1a005fae:	b1ae      	cbz	r6, 1a005fdc <__sflush_r+0xd4>
1a005fb0:	6825      	ldr	r5, [r4, #0]
1a005fb2:	6026      	str	r6, [r4, #0]
1a005fb4:	0791      	lsls	r1, r2, #30
1a005fb6:	bf0c      	ite	eq
1a005fb8:	6963      	ldreq	r3, [r4, #20]
1a005fba:	2300      	movne	r3, #0
1a005fbc:	1bad      	subs	r5, r5, r6
1a005fbe:	60a3      	str	r3, [r4, #8]
1a005fc0:	e00a      	b.n	1a005fd8 <__sflush_r+0xd0>
1a005fc2:	462b      	mov	r3, r5
1a005fc4:	4632      	mov	r2, r6
1a005fc6:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a005fc8:	69e1      	ldr	r1, [r4, #28]
1a005fca:	4640      	mov	r0, r8
1a005fcc:	47b8      	blx	r7
1a005fce:	2800      	cmp	r0, #0
1a005fd0:	eba5 0500 	sub.w	r5, r5, r0
1a005fd4:	4406      	add	r6, r0
1a005fd6:	dd0a      	ble.n	1a005fee <__sflush_r+0xe6>
1a005fd8:	2d00      	cmp	r5, #0
1a005fda:	dcf2      	bgt.n	1a005fc2 <__sflush_r+0xba>
1a005fdc:	2000      	movs	r0, #0
1a005fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005fe2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a005fe4:	2a00      	cmp	r2, #0
1a005fe6:	dc9e      	bgt.n	1a005f26 <__sflush_r+0x1e>
1a005fe8:	e7f8      	b.n	1a005fdc <__sflush_r+0xd4>
1a005fea:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a005fec:	e7b1      	b.n	1a005f52 <__sflush_r+0x4a>
1a005fee:	89a3      	ldrh	r3, [r4, #12]
1a005ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005ff4:	81a3      	strh	r3, [r4, #12]
1a005ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006002:	6922      	ldr	r2, [r4, #16]
1a006004:	6022      	str	r2, [r4, #0]
1a006006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a00600a:	2200      	movs	r2, #0
1a00600c:	6062      	str	r2, [r4, #4]
1a00600e:	04da      	lsls	r2, r3, #19
1a006010:	81a3      	strh	r3, [r4, #12]
1a006012:	d5bc      	bpl.n	1a005f8e <__sflush_r+0x86>
1a006014:	6520      	str	r0, [r4, #80]	; 0x50
1a006016:	e7ba      	b.n	1a005f8e <__sflush_r+0x86>
1a006018:	f8d8 3000 	ldr.w	r3, [r8]
1a00601c:	2b00      	cmp	r3, #0
1a00601e:	d095      	beq.n	1a005f4c <__sflush_r+0x44>
1a006020:	2b1d      	cmp	r3, #29
1a006022:	d00f      	beq.n	1a006044 <__sflush_r+0x13c>
1a006024:	2b16      	cmp	r3, #22
1a006026:	d00d      	beq.n	1a006044 <__sflush_r+0x13c>
1a006028:	89a3      	ldrh	r3, [r4, #12]
1a00602a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00602e:	81a3      	strh	r3, [r4, #12]
1a006030:	e7d5      	b.n	1a005fde <__sflush_r+0xd6>
1a006032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a006036:	6921      	ldr	r1, [r4, #16]
1a006038:	81a3      	strh	r3, [r4, #12]
1a00603a:	04db      	lsls	r3, r3, #19
1a00603c:	e9c4 1200 	strd	r1, r2, [r4]
1a006040:	d5a5      	bpl.n	1a005f8e <__sflush_r+0x86>
1a006042:	e7e7      	b.n	1a006014 <__sflush_r+0x10c>
1a006044:	f8c8 6000 	str.w	r6, [r8]
1a006048:	e7c8      	b.n	1a005fdc <__sflush_r+0xd4>
1a00604a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00604e:	81a3      	strh	r3, [r4, #12]
1a006050:	e7c5      	b.n	1a005fde <__sflush_r+0xd6>
1a006052:	bf00      	nop

1a006054 <_fflush_r>:
1a006054:	b538      	push	{r3, r4, r5, lr}
1a006056:	460d      	mov	r5, r1
1a006058:	4604      	mov	r4, r0
1a00605a:	b108      	cbz	r0, 1a006060 <_fflush_r+0xc>
1a00605c:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00605e:	b1a3      	cbz	r3, 1a00608a <_fflush_r+0x36>
1a006060:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a006064:	b1b8      	cbz	r0, 1a006096 <_fflush_r+0x42>
1a006066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a006068:	07db      	lsls	r3, r3, #31
1a00606a:	d401      	bmi.n	1a006070 <_fflush_r+0x1c>
1a00606c:	0581      	lsls	r1, r0, #22
1a00606e:	d515      	bpl.n	1a00609c <_fflush_r+0x48>
1a006070:	4620      	mov	r0, r4
1a006072:	4629      	mov	r1, r5
1a006074:	f7ff ff48 	bl	1a005f08 <__sflush_r>
1a006078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00607a:	07da      	lsls	r2, r3, #31
1a00607c:	4604      	mov	r4, r0
1a00607e:	d402      	bmi.n	1a006086 <_fflush_r+0x32>
1a006080:	89ab      	ldrh	r3, [r5, #12]
1a006082:	059b      	lsls	r3, r3, #22
1a006084:	d50e      	bpl.n	1a0060a4 <_fflush_r+0x50>
1a006086:	4620      	mov	r0, r4
1a006088:	bd38      	pop	{r3, r4, r5, pc}
1a00608a:	f000 f83f 	bl	1a00610c <__sinit>
1a00608e:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a006092:	2800      	cmp	r0, #0
1a006094:	d1e7      	bne.n	1a006066 <_fflush_r+0x12>
1a006096:	4604      	mov	r4, r0
1a006098:	4620      	mov	r0, r4
1a00609a:	bd38      	pop	{r3, r4, r5, pc}
1a00609c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00609e:	f000 fa03 	bl	1a0064a8 <__retarget_lock_acquire_recursive>
1a0060a2:	e7e5      	b.n	1a006070 <_fflush_r+0x1c>
1a0060a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0060a6:	f000 fa01 	bl	1a0064ac <__retarget_lock_release_recursive>
1a0060aa:	4620      	mov	r0, r4
1a0060ac:	bd38      	pop	{r3, r4, r5, pc}
1a0060ae:	bf00      	nop

1a0060b0 <std>:
1a0060b0:	b510      	push	{r4, lr}
1a0060b2:	2300      	movs	r3, #0
1a0060b4:	4604      	mov	r4, r0
1a0060b6:	8181      	strh	r1, [r0, #12]
1a0060b8:	81c2      	strh	r2, [r0, #14]
1a0060ba:	e9c0 3300 	strd	r3, r3, [r0]
1a0060be:	6083      	str	r3, [r0, #8]
1a0060c0:	6643      	str	r3, [r0, #100]	; 0x64
1a0060c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0060c6:	6183      	str	r3, [r0, #24]
1a0060c8:	4619      	mov	r1, r3
1a0060ca:	2208      	movs	r2, #8
1a0060cc:	305c      	adds	r0, #92	; 0x5c
1a0060ce:	f000 fd41 	bl	1a006b54 <memset>
1a0060d2:	4807      	ldr	r0, [pc, #28]	; (1a0060f0 <std+0x40>)
1a0060d4:	4907      	ldr	r1, [pc, #28]	; (1a0060f4 <std+0x44>)
1a0060d6:	4a08      	ldr	r2, [pc, #32]	; (1a0060f8 <std+0x48>)
1a0060d8:	4b08      	ldr	r3, [pc, #32]	; (1a0060fc <std+0x4c>)
1a0060da:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0060dc:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a0060e0:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a0060e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0060e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0060ec:	f000 b9d8 	b.w	1a0064a0 <__retarget_lock_init_recursive>
1a0060f0:	1a006ce1 	.word	0x1a006ce1
1a0060f4:	1a006d05 	.word	0x1a006d05
1a0060f8:	1a006d45 	.word	0x1a006d45
1a0060fc:	1a006d65 	.word	0x1a006d65

1a006100 <_cleanup_r>:
1a006100:	4901      	ldr	r1, [pc, #4]	; (1a006108 <_cleanup_r+0x8>)
1a006102:	f000 b97f 	b.w	1a006404 <_fwalk_reent>
1a006106:	bf00      	nop
1a006108:	1a005e39 	.word	0x1a005e39

1a00610c <__sinit>:
1a00610c:	b510      	push	{r4, lr}
1a00610e:	4604      	mov	r4, r0
1a006110:	4811      	ldr	r0, [pc, #68]	; (1a006158 <__sinit+0x4c>)
1a006112:	f000 f9c9 	bl	1a0064a8 <__retarget_lock_acquire_recursive>
1a006116:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a006118:	b9c2      	cbnz	r2, 1a00614c <__sinit+0x40>
1a00611a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a00611e:	480f      	ldr	r0, [pc, #60]	; (1a00615c <__sinit+0x50>)
1a006120:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a006124:	2103      	movs	r1, #3
1a006126:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a00612a:	63e0      	str	r0, [r4, #60]	; 0x3c
1a00612c:	2104      	movs	r1, #4
1a00612e:	6860      	ldr	r0, [r4, #4]
1a006130:	f7ff ffbe 	bl	1a0060b0 <std>
1a006134:	2201      	movs	r2, #1
1a006136:	2109      	movs	r1, #9
1a006138:	68a0      	ldr	r0, [r4, #8]
1a00613a:	f7ff ffb9 	bl	1a0060b0 <std>
1a00613e:	2202      	movs	r2, #2
1a006140:	2112      	movs	r1, #18
1a006142:	68e0      	ldr	r0, [r4, #12]
1a006144:	f7ff ffb4 	bl	1a0060b0 <std>
1a006148:	2301      	movs	r3, #1
1a00614a:	63a3      	str	r3, [r4, #56]	; 0x38
1a00614c:	4802      	ldr	r0, [pc, #8]	; (1a006158 <__sinit+0x4c>)
1a00614e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a006152:	f000 b9ab 	b.w	1a0064ac <__retarget_lock_release_recursive>
1a006156:	bf00      	nop
1a006158:	10002bd4 	.word	0x10002bd4
1a00615c:	1a006101 	.word	0x1a006101

1a006160 <__sfp_lock_acquire>:
1a006160:	4801      	ldr	r0, [pc, #4]	; (1a006168 <__sfp_lock_acquire+0x8>)
1a006162:	f000 b9a1 	b.w	1a0064a8 <__retarget_lock_acquire_recursive>
1a006166:	bf00      	nop
1a006168:	10002be8 	.word	0x10002be8

1a00616c <__sfp_lock_release>:
1a00616c:	4801      	ldr	r0, [pc, #4]	; (1a006174 <__sfp_lock_release+0x8>)
1a00616e:	f000 b99d 	b.w	1a0064ac <__retarget_lock_release_recursive>
1a006172:	bf00      	nop
1a006174:	10002be8 	.word	0x10002be8

1a006178 <_malloc_trim_r>:
1a006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00617a:	4f24      	ldr	r7, [pc, #144]	; (1a00620c <_malloc_trim_r+0x94>)
1a00617c:	460c      	mov	r4, r1
1a00617e:	4606      	mov	r6, r0
1a006180:	f000 fd38 	bl	1a006bf4 <__malloc_lock>
1a006184:	68bb      	ldr	r3, [r7, #8]
1a006186:	685d      	ldr	r5, [r3, #4]
1a006188:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a00618c:	310f      	adds	r1, #15
1a00618e:	f025 0503 	bic.w	r5, r5, #3
1a006192:	4429      	add	r1, r5
1a006194:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a006198:	f021 010f 	bic.w	r1, r1, #15
1a00619c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0061a0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0061a4:	db07      	blt.n	1a0061b6 <_malloc_trim_r+0x3e>
1a0061a6:	2100      	movs	r1, #0
1a0061a8:	4630      	mov	r0, r6
1a0061aa:	f7fb f8c3 	bl	1a001334 <_sbrk_r>
1a0061ae:	68bb      	ldr	r3, [r7, #8]
1a0061b0:	442b      	add	r3, r5
1a0061b2:	4298      	cmp	r0, r3
1a0061b4:	d004      	beq.n	1a0061c0 <_malloc_trim_r+0x48>
1a0061b6:	4630      	mov	r0, r6
1a0061b8:	f000 fd22 	bl	1a006c00 <__malloc_unlock>
1a0061bc:	2000      	movs	r0, #0
1a0061be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0061c0:	4261      	negs	r1, r4
1a0061c2:	4630      	mov	r0, r6
1a0061c4:	f7fb f8b6 	bl	1a001334 <_sbrk_r>
1a0061c8:	3001      	adds	r0, #1
1a0061ca:	d00d      	beq.n	1a0061e8 <_malloc_trim_r+0x70>
1a0061cc:	4b10      	ldr	r3, [pc, #64]	; (1a006210 <_malloc_trim_r+0x98>)
1a0061ce:	68ba      	ldr	r2, [r7, #8]
1a0061d0:	6819      	ldr	r1, [r3, #0]
1a0061d2:	1b2d      	subs	r5, r5, r4
1a0061d4:	f045 0501 	orr.w	r5, r5, #1
1a0061d8:	4630      	mov	r0, r6
1a0061da:	1b09      	subs	r1, r1, r4
1a0061dc:	6055      	str	r5, [r2, #4]
1a0061de:	6019      	str	r1, [r3, #0]
1a0061e0:	f000 fd0e 	bl	1a006c00 <__malloc_unlock>
1a0061e4:	2001      	movs	r0, #1
1a0061e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0061e8:	2100      	movs	r1, #0
1a0061ea:	4630      	mov	r0, r6
1a0061ec:	f7fb f8a2 	bl	1a001334 <_sbrk_r>
1a0061f0:	68ba      	ldr	r2, [r7, #8]
1a0061f2:	1a83      	subs	r3, r0, r2
1a0061f4:	2b0f      	cmp	r3, #15
1a0061f6:	ddde      	ble.n	1a0061b6 <_malloc_trim_r+0x3e>
1a0061f8:	4c06      	ldr	r4, [pc, #24]	; (1a006214 <_malloc_trim_r+0x9c>)
1a0061fa:	4905      	ldr	r1, [pc, #20]	; (1a006210 <_malloc_trim_r+0x98>)
1a0061fc:	6824      	ldr	r4, [r4, #0]
1a0061fe:	f043 0301 	orr.w	r3, r3, #1
1a006202:	1b00      	subs	r0, r0, r4
1a006204:	6053      	str	r3, [r2, #4]
1a006206:	6008      	str	r0, [r1, #0]
1a006208:	e7d5      	b.n	1a0061b6 <_malloc_trim_r+0x3e>
1a00620a:	bf00      	nop
1a00620c:	10000470 	.word	0x10000470
1a006210:	10002b28 	.word	0x10002b28
1a006214:	10000878 	.word	0x10000878

1a006218 <_free_r>:
1a006218:	2900      	cmp	r1, #0
1a00621a:	d05d      	beq.n	1a0062d8 <_free_r+0xc0>
1a00621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00621e:	460f      	mov	r7, r1
1a006220:	4606      	mov	r6, r0
1a006222:	f000 fce7 	bl	1a006bf4 <__malloc_lock>
1a006226:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a00622a:	4c73      	ldr	r4, [pc, #460]	; (1a0063f8 <_free_r+0x1e0>)
1a00622c:	f02c 0301 	bic.w	r3, ip, #1
1a006230:	f1a7 0008 	sub.w	r0, r7, #8
1a006234:	18c2      	adds	r2, r0, r3
1a006236:	68a1      	ldr	r1, [r4, #8]
1a006238:	6855      	ldr	r5, [r2, #4]
1a00623a:	4291      	cmp	r1, r2
1a00623c:	f025 0503 	bic.w	r5, r5, #3
1a006240:	d07f      	beq.n	1a006342 <_free_r+0x12a>
1a006242:	f01c 0f01 	tst.w	ip, #1
1a006246:	6055      	str	r5, [r2, #4]
1a006248:	eb02 0105 	add.w	r1, r2, r5
1a00624c:	d133      	bne.n	1a0062b6 <_free_r+0x9e>
1a00624e:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a006252:	6849      	ldr	r1, [r1, #4]
1a006254:	eba0 000e 	sub.w	r0, r0, lr
1a006258:	f104 0c08 	add.w	ip, r4, #8
1a00625c:	6887      	ldr	r7, [r0, #8]
1a00625e:	4567      	cmp	r7, ip
1a006260:	4473      	add	r3, lr
1a006262:	f001 0101 	and.w	r1, r1, #1
1a006266:	d060      	beq.n	1a00632a <_free_r+0x112>
1a006268:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a00626c:	f8c7 e00c 	str.w	lr, [r7, #12]
1a006270:	f8ce 7008 	str.w	r7, [lr, #8]
1a006274:	2900      	cmp	r1, #0
1a006276:	f000 8089 	beq.w	1a00638c <_free_r+0x174>
1a00627a:	f043 0101 	orr.w	r1, r3, #1
1a00627e:	6041      	str	r1, [r0, #4]
1a006280:	6013      	str	r3, [r2, #0]
1a006282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a006286:	d230      	bcs.n	1a0062ea <_free_r+0xd2>
1a006288:	08db      	lsrs	r3, r3, #3
1a00628a:	1c59      	adds	r1, r3, #1
1a00628c:	6865      	ldr	r5, [r4, #4]
1a00628e:	109a      	asrs	r2, r3, #2
1a006290:	2301      	movs	r3, #1
1a006292:	4093      	lsls	r3, r2
1a006294:	432b      	orrs	r3, r5
1a006296:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a00629a:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a00629e:	6063      	str	r3, [r4, #4]
1a0062a0:	3a08      	subs	r2, #8
1a0062a2:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a0062a6:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a0062aa:	60e8      	str	r0, [r5, #12]
1a0062ac:	4630      	mov	r0, r6
1a0062ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0062b2:	f000 bca5 	b.w	1a006c00 <__malloc_unlock>
1a0062b6:	6849      	ldr	r1, [r1, #4]
1a0062b8:	07c9      	lsls	r1, r1, #31
1a0062ba:	d40e      	bmi.n	1a0062da <_free_r+0xc2>
1a0062bc:	442b      	add	r3, r5
1a0062be:	f104 0c08 	add.w	ip, r4, #8
1a0062c2:	6891      	ldr	r1, [r2, #8]
1a0062c4:	4561      	cmp	r1, ip
1a0062c6:	f043 0501 	orr.w	r5, r3, #1
1a0062ca:	d067      	beq.n	1a00639c <_free_r+0x184>
1a0062cc:	68d2      	ldr	r2, [r2, #12]
1a0062ce:	60ca      	str	r2, [r1, #12]
1a0062d0:	6091      	str	r1, [r2, #8]
1a0062d2:	6045      	str	r5, [r0, #4]
1a0062d4:	50c3      	str	r3, [r0, r3]
1a0062d6:	e7d4      	b.n	1a006282 <_free_r+0x6a>
1a0062d8:	4770      	bx	lr
1a0062da:	f043 0101 	orr.w	r1, r3, #1
1a0062de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0062e2:	f847 1c04 	str.w	r1, [r7, #-4]
1a0062e6:	6013      	str	r3, [r2, #0]
1a0062e8:	d3ce      	bcc.n	1a006288 <_free_r+0x70>
1a0062ea:	0a5a      	lsrs	r2, r3, #9
1a0062ec:	2a04      	cmp	r2, #4
1a0062ee:	d842      	bhi.n	1a006376 <_free_r+0x15e>
1a0062f0:	099a      	lsrs	r2, r3, #6
1a0062f2:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a0062f6:	00ff      	lsls	r7, r7, #3
1a0062f8:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a0062fc:	19e5      	adds	r5, r4, r7
1a0062fe:	59e2      	ldr	r2, [r4, r7]
1a006300:	3d08      	subs	r5, #8
1a006302:	4295      	cmp	r5, r2
1a006304:	d051      	beq.n	1a0063aa <_free_r+0x192>
1a006306:	6851      	ldr	r1, [r2, #4]
1a006308:	f021 0103 	bic.w	r1, r1, #3
1a00630c:	4299      	cmp	r1, r3
1a00630e:	d902      	bls.n	1a006316 <_free_r+0xfe>
1a006310:	6892      	ldr	r2, [r2, #8]
1a006312:	4295      	cmp	r5, r2
1a006314:	d1f7      	bne.n	1a006306 <_free_r+0xee>
1a006316:	68d5      	ldr	r5, [r2, #12]
1a006318:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a00631c:	60a8      	str	r0, [r5, #8]
1a00631e:	60d0      	str	r0, [r2, #12]
1a006320:	4630      	mov	r0, r6
1a006322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a006326:	f000 bc6b 	b.w	1a006c00 <__malloc_unlock>
1a00632a:	2900      	cmp	r1, #0
1a00632c:	d15e      	bne.n	1a0063ec <_free_r+0x1d4>
1a00632e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a006332:	442b      	add	r3, r5
1a006334:	f043 0401 	orr.w	r4, r3, #1
1a006338:	60ca      	str	r2, [r1, #12]
1a00633a:	6091      	str	r1, [r2, #8]
1a00633c:	6044      	str	r4, [r0, #4]
1a00633e:	50c3      	str	r3, [r0, r3]
1a006340:	e7b4      	b.n	1a0062ac <_free_r+0x94>
1a006342:	f01c 0f01 	tst.w	ip, #1
1a006346:	442b      	add	r3, r5
1a006348:	d107      	bne.n	1a00635a <_free_r+0x142>
1a00634a:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a00634e:	1a80      	subs	r0, r0, r2
1a006350:	4413      	add	r3, r2
1a006352:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a006356:	60ca      	str	r2, [r1, #12]
1a006358:	6091      	str	r1, [r2, #8]
1a00635a:	4a28      	ldr	r2, [pc, #160]	; (1a0063fc <_free_r+0x1e4>)
1a00635c:	6812      	ldr	r2, [r2, #0]
1a00635e:	f043 0101 	orr.w	r1, r3, #1
1a006362:	429a      	cmp	r2, r3
1a006364:	6041      	str	r1, [r0, #4]
1a006366:	60a0      	str	r0, [r4, #8]
1a006368:	d8a0      	bhi.n	1a0062ac <_free_r+0x94>
1a00636a:	4b25      	ldr	r3, [pc, #148]	; (1a006400 <_free_r+0x1e8>)
1a00636c:	4630      	mov	r0, r6
1a00636e:	6819      	ldr	r1, [r3, #0]
1a006370:	f7ff ff02 	bl	1a006178 <_malloc_trim_r>
1a006374:	e79a      	b.n	1a0062ac <_free_r+0x94>
1a006376:	2a14      	cmp	r2, #20
1a006378:	d90a      	bls.n	1a006390 <_free_r+0x178>
1a00637a:	2a54      	cmp	r2, #84	; 0x54
1a00637c:	d81d      	bhi.n	1a0063ba <_free_r+0x1a2>
1a00637e:	0b1a      	lsrs	r2, r3, #12
1a006380:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a006384:	00ff      	lsls	r7, r7, #3
1a006386:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a00638a:	e7b7      	b.n	1a0062fc <_free_r+0xe4>
1a00638c:	442b      	add	r3, r5
1a00638e:	e798      	b.n	1a0062c2 <_free_r+0xaa>
1a006390:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a006394:	00ff      	lsls	r7, r7, #3
1a006396:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a00639a:	e7af      	b.n	1a0062fc <_free_r+0xe4>
1a00639c:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a0063a0:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a0063a4:	6045      	str	r5, [r0, #4]
1a0063a6:	50c3      	str	r3, [r0, r3]
1a0063a8:	e780      	b.n	1a0062ac <_free_r+0x94>
1a0063aa:	6863      	ldr	r3, [r4, #4]
1a0063ac:	1089      	asrs	r1, r1, #2
1a0063ae:	2701      	movs	r7, #1
1a0063b0:	fa07 f101 	lsl.w	r1, r7, r1
1a0063b4:	4319      	orrs	r1, r3
1a0063b6:	6061      	str	r1, [r4, #4]
1a0063b8:	e7ae      	b.n	1a006318 <_free_r+0x100>
1a0063ba:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a0063be:	d806      	bhi.n	1a0063ce <_free_r+0x1b6>
1a0063c0:	0bda      	lsrs	r2, r3, #15
1a0063c2:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a0063c6:	00ff      	lsls	r7, r7, #3
1a0063c8:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a0063cc:	e796      	b.n	1a0062fc <_free_r+0xe4>
1a0063ce:	f240 5154 	movw	r1, #1364	; 0x554
1a0063d2:	428a      	cmp	r2, r1
1a0063d4:	d806      	bhi.n	1a0063e4 <_free_r+0x1cc>
1a0063d6:	0c9a      	lsrs	r2, r3, #18
1a0063d8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a0063dc:	00ff      	lsls	r7, r7, #3
1a0063de:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a0063e2:	e78b      	b.n	1a0062fc <_free_r+0xe4>
1a0063e4:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a0063e8:	217e      	movs	r1, #126	; 0x7e
1a0063ea:	e787      	b.n	1a0062fc <_free_r+0xe4>
1a0063ec:	f043 0101 	orr.w	r1, r3, #1
1a0063f0:	6041      	str	r1, [r0, #4]
1a0063f2:	6013      	str	r3, [r2, #0]
1a0063f4:	e75a      	b.n	1a0062ac <_free_r+0x94>
1a0063f6:	bf00      	nop
1a0063f8:	10000470 	.word	0x10000470
1a0063fc:	1000087c 	.word	0x1000087c
1a006400:	10002b58 	.word	0x10002b58

1a006404 <_fwalk_reent>:
1a006404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006408:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a00640c:	d01f      	beq.n	1a00644e <_fwalk_reent+0x4a>
1a00640e:	4688      	mov	r8, r1
1a006410:	4606      	mov	r6, r0
1a006412:	f04f 0900 	mov.w	r9, #0
1a006416:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a00641a:	3d01      	subs	r5, #1
1a00641c:	d411      	bmi.n	1a006442 <_fwalk_reent+0x3e>
1a00641e:	89a3      	ldrh	r3, [r4, #12]
1a006420:	2b01      	cmp	r3, #1
1a006422:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a006426:	d908      	bls.n	1a00643a <_fwalk_reent+0x36>
1a006428:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a00642c:	3301      	adds	r3, #1
1a00642e:	4621      	mov	r1, r4
1a006430:	4630      	mov	r0, r6
1a006432:	d002      	beq.n	1a00643a <_fwalk_reent+0x36>
1a006434:	47c0      	blx	r8
1a006436:	ea49 0900 	orr.w	r9, r9, r0
1a00643a:	1c6b      	adds	r3, r5, #1
1a00643c:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a006440:	d1ed      	bne.n	1a00641e <_fwalk_reent+0x1a>
1a006442:	683f      	ldr	r7, [r7, #0]
1a006444:	2f00      	cmp	r7, #0
1a006446:	d1e6      	bne.n	1a006416 <_fwalk_reent+0x12>
1a006448:	4648      	mov	r0, r9
1a00644a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00644e:	46b9      	mov	r9, r7
1a006450:	4648      	mov	r0, r9
1a006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006456:	bf00      	nop

1a006458 <__libc_init_array>:
1a006458:	b570      	push	{r4, r5, r6, lr}
1a00645a:	4e0d      	ldr	r6, [pc, #52]	; (1a006490 <__libc_init_array+0x38>)
1a00645c:	4d0d      	ldr	r5, [pc, #52]	; (1a006494 <__libc_init_array+0x3c>)
1a00645e:	1b76      	subs	r6, r6, r5
1a006460:	10b6      	asrs	r6, r6, #2
1a006462:	d006      	beq.n	1a006472 <__libc_init_array+0x1a>
1a006464:	2400      	movs	r4, #0
1a006466:	3401      	adds	r4, #1
1a006468:	f855 3b04 	ldr.w	r3, [r5], #4
1a00646c:	4798      	blx	r3
1a00646e:	42a6      	cmp	r6, r4
1a006470:	d1f9      	bne.n	1a006466 <__libc_init_array+0xe>
1a006472:	4e09      	ldr	r6, [pc, #36]	; (1a006498 <__libc_init_array+0x40>)
1a006474:	4d09      	ldr	r5, [pc, #36]	; (1a00649c <__libc_init_array+0x44>)
1a006476:	1b76      	subs	r6, r6, r5
1a006478:	f7fa fe46 	bl	1a001108 <_init>
1a00647c:	10b6      	asrs	r6, r6, #2
1a00647e:	d006      	beq.n	1a00648e <__libc_init_array+0x36>
1a006480:	2400      	movs	r4, #0
1a006482:	3401      	adds	r4, #1
1a006484:	f855 3b04 	ldr.w	r3, [r5], #4
1a006488:	4798      	blx	r3
1a00648a:	42a6      	cmp	r6, r4
1a00648c:	d1f9      	bne.n	1a006482 <__libc_init_array+0x2a>
1a00648e:	bd70      	pop	{r4, r5, r6, pc}
1a006490:	1a00b3fc 	.word	0x1a00b3fc
1a006494:	1a00b3fc 	.word	0x1a00b3fc
1a006498:	1a00b400 	.word	0x1a00b400
1a00649c:	1a00b3fc 	.word	0x1a00b3fc

1a0064a0 <__retarget_lock_init_recursive>:
1a0064a0:	4770      	bx	lr
1a0064a2:	bf00      	nop

1a0064a4 <__retarget_lock_close_recursive>:
1a0064a4:	4770      	bx	lr
1a0064a6:	bf00      	nop

1a0064a8 <__retarget_lock_acquire_recursive>:
1a0064a8:	4770      	bx	lr
1a0064aa:	bf00      	nop

1a0064ac <__retarget_lock_release_recursive>:
1a0064ac:	4770      	bx	lr
1a0064ae:	bf00      	nop

1a0064b0 <_malloc_r>:
1a0064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0064b4:	f101 050b 	add.w	r5, r1, #11
1a0064b8:	2d16      	cmp	r5, #22
1a0064ba:	b083      	sub	sp, #12
1a0064bc:	4606      	mov	r6, r0
1a0064be:	d823      	bhi.n	1a006508 <_malloc_r+0x58>
1a0064c0:	2910      	cmp	r1, #16
1a0064c2:	f200 80b9 	bhi.w	1a006638 <_malloc_r+0x188>
1a0064c6:	f000 fb95 	bl	1a006bf4 <__malloc_lock>
1a0064ca:	2510      	movs	r5, #16
1a0064cc:	2318      	movs	r3, #24
1a0064ce:	2002      	movs	r0, #2
1a0064d0:	4fba      	ldr	r7, [pc, #744]	; (1a0067bc <_malloc_r+0x30c>)
1a0064d2:	443b      	add	r3, r7
1a0064d4:	f1a3 0208 	sub.w	r2, r3, #8
1a0064d8:	685c      	ldr	r4, [r3, #4]
1a0064da:	4294      	cmp	r4, r2
1a0064dc:	f000 80b9 	beq.w	1a006652 <_malloc_r+0x1a2>
1a0064e0:	6863      	ldr	r3, [r4, #4]
1a0064e2:	f023 0303 	bic.w	r3, r3, #3
1a0064e6:	4423      	add	r3, r4
1a0064e8:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a0064ec:	685a      	ldr	r2, [r3, #4]
1a0064ee:	60e9      	str	r1, [r5, #12]
1a0064f0:	f042 0201 	orr.w	r2, r2, #1
1a0064f4:	4630      	mov	r0, r6
1a0064f6:	608d      	str	r5, [r1, #8]
1a0064f8:	605a      	str	r2, [r3, #4]
1a0064fa:	f000 fb81 	bl	1a006c00 <__malloc_unlock>
1a0064fe:	3408      	adds	r4, #8
1a006500:	4620      	mov	r0, r4
1a006502:	b003      	add	sp, #12
1a006504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006508:	f035 0507 	bics.w	r5, r5, #7
1a00650c:	f100 8094 	bmi.w	1a006638 <_malloc_r+0x188>
1a006510:	42a9      	cmp	r1, r5
1a006512:	f200 8091 	bhi.w	1a006638 <_malloc_r+0x188>
1a006516:	f000 fb6d 	bl	1a006bf4 <__malloc_lock>
1a00651a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a00651e:	f0c0 81a2 	bcc.w	1a006866 <_malloc_r+0x3b6>
1a006522:	0a6b      	lsrs	r3, r5, #9
1a006524:	f000 808f 	beq.w	1a006646 <_malloc_r+0x196>
1a006528:	2b04      	cmp	r3, #4
1a00652a:	f200 8178 	bhi.w	1a00681e <_malloc_r+0x36e>
1a00652e:	09ab      	lsrs	r3, r5, #6
1a006530:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a006534:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a006538:	00c3      	lsls	r3, r0, #3
1a00653a:	4fa0      	ldr	r7, [pc, #640]	; (1a0067bc <_malloc_r+0x30c>)
1a00653c:	443b      	add	r3, r7
1a00653e:	f1a3 0108 	sub.w	r1, r3, #8
1a006542:	685c      	ldr	r4, [r3, #4]
1a006544:	42a1      	cmp	r1, r4
1a006546:	d106      	bne.n	1a006556 <_malloc_r+0xa6>
1a006548:	e00c      	b.n	1a006564 <_malloc_r+0xb4>
1a00654a:	2a00      	cmp	r2, #0
1a00654c:	f280 8127 	bge.w	1a00679e <_malloc_r+0x2ee>
1a006550:	68e4      	ldr	r4, [r4, #12]
1a006552:	42a1      	cmp	r1, r4
1a006554:	d006      	beq.n	1a006564 <_malloc_r+0xb4>
1a006556:	6863      	ldr	r3, [r4, #4]
1a006558:	f023 0303 	bic.w	r3, r3, #3
1a00655c:	1b5a      	subs	r2, r3, r5
1a00655e:	2a0f      	cmp	r2, #15
1a006560:	ddf3      	ble.n	1a00654a <_malloc_r+0x9a>
1a006562:	4660      	mov	r0, ip
1a006564:	693c      	ldr	r4, [r7, #16]
1a006566:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a0067d0 <_malloc_r+0x320>
1a00656a:	4564      	cmp	r4, ip
1a00656c:	d07c      	beq.n	1a006668 <_malloc_r+0x1b8>
1a00656e:	6863      	ldr	r3, [r4, #4]
1a006570:	f023 0303 	bic.w	r3, r3, #3
1a006574:	1b5a      	subs	r2, r3, r5
1a006576:	2a0f      	cmp	r2, #15
1a006578:	f300 8183 	bgt.w	1a006882 <_malloc_r+0x3d2>
1a00657c:	2a00      	cmp	r2, #0
1a00657e:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a006582:	f280 8174 	bge.w	1a00686e <_malloc_r+0x3be>
1a006586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00658a:	f080 8125 	bcs.w	1a0067d8 <_malloc_r+0x328>
1a00658e:	08db      	lsrs	r3, r3, #3
1a006590:	1c59      	adds	r1, r3, #1
1a006592:	687a      	ldr	r2, [r7, #4]
1a006594:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a006598:	f8c4 8008 	str.w	r8, [r4, #8]
1a00659c:	f04f 0e01 	mov.w	lr, #1
1a0065a0:	109b      	asrs	r3, r3, #2
1a0065a2:	fa0e f303 	lsl.w	r3, lr, r3
1a0065a6:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a0065aa:	4313      	orrs	r3, r2
1a0065ac:	f1ae 0208 	sub.w	r2, lr, #8
1a0065b0:	60e2      	str	r2, [r4, #12]
1a0065b2:	607b      	str	r3, [r7, #4]
1a0065b4:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a0065b8:	f8c8 400c 	str.w	r4, [r8, #12]
1a0065bc:	1082      	asrs	r2, r0, #2
1a0065be:	2401      	movs	r4, #1
1a0065c0:	4094      	lsls	r4, r2
1a0065c2:	429c      	cmp	r4, r3
1a0065c4:	d856      	bhi.n	1a006674 <_malloc_r+0x1c4>
1a0065c6:	421c      	tst	r4, r3
1a0065c8:	d106      	bne.n	1a0065d8 <_malloc_r+0x128>
1a0065ca:	f020 0003 	bic.w	r0, r0, #3
1a0065ce:	0064      	lsls	r4, r4, #1
1a0065d0:	421c      	tst	r4, r3
1a0065d2:	f100 0004 	add.w	r0, r0, #4
1a0065d6:	d0fa      	beq.n	1a0065ce <_malloc_r+0x11e>
1a0065d8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a0065dc:	46ce      	mov	lr, r9
1a0065de:	4680      	mov	r8, r0
1a0065e0:	f8de 300c 	ldr.w	r3, [lr, #12]
1a0065e4:	459e      	cmp	lr, r3
1a0065e6:	d107      	bne.n	1a0065f8 <_malloc_r+0x148>
1a0065e8:	e125      	b.n	1a006836 <_malloc_r+0x386>
1a0065ea:	2a00      	cmp	r2, #0
1a0065ec:	f280 812c 	bge.w	1a006848 <_malloc_r+0x398>
1a0065f0:	68db      	ldr	r3, [r3, #12]
1a0065f2:	459e      	cmp	lr, r3
1a0065f4:	f000 811f 	beq.w	1a006836 <_malloc_r+0x386>
1a0065f8:	6859      	ldr	r1, [r3, #4]
1a0065fa:	f021 0103 	bic.w	r1, r1, #3
1a0065fe:	1b4a      	subs	r2, r1, r5
1a006600:	2a0f      	cmp	r2, #15
1a006602:	ddf2      	ble.n	1a0065ea <_malloc_r+0x13a>
1a006604:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a006608:	195c      	adds	r4, r3, r5
1a00660a:	f045 0501 	orr.w	r5, r5, #1
1a00660e:	605d      	str	r5, [r3, #4]
1a006610:	f042 0501 	orr.w	r5, r2, #1
1a006614:	f8c8 e00c 	str.w	lr, [r8, #12]
1a006618:	4630      	mov	r0, r6
1a00661a:	f8ce 8008 	str.w	r8, [lr, #8]
1a00661e:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a006622:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a006626:	6065      	str	r5, [r4, #4]
1a006628:	505a      	str	r2, [r3, r1]
1a00662a:	9300      	str	r3, [sp, #0]
1a00662c:	f000 fae8 	bl	1a006c00 <__malloc_unlock>
1a006630:	9b00      	ldr	r3, [sp, #0]
1a006632:	f103 0408 	add.w	r4, r3, #8
1a006636:	e002      	b.n	1a00663e <_malloc_r+0x18e>
1a006638:	230c      	movs	r3, #12
1a00663a:	6033      	str	r3, [r6, #0]
1a00663c:	2400      	movs	r4, #0
1a00663e:	4620      	mov	r0, r4
1a006640:	b003      	add	sp, #12
1a006642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006646:	f44f 7300 	mov.w	r3, #512	; 0x200
1a00664a:	2040      	movs	r0, #64	; 0x40
1a00664c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a006650:	e773      	b.n	1a00653a <_malloc_r+0x8a>
1a006652:	68dc      	ldr	r4, [r3, #12]
1a006654:	42a3      	cmp	r3, r4
1a006656:	bf08      	it	eq
1a006658:	3002      	addeq	r0, #2
1a00665a:	f47f af41 	bne.w	1a0064e0 <_malloc_r+0x30>
1a00665e:	693c      	ldr	r4, [r7, #16]
1a006660:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a0067d0 <_malloc_r+0x320>
1a006664:	4564      	cmp	r4, ip
1a006666:	d182      	bne.n	1a00656e <_malloc_r+0xbe>
1a006668:	687b      	ldr	r3, [r7, #4]
1a00666a:	1082      	asrs	r2, r0, #2
1a00666c:	2401      	movs	r4, #1
1a00666e:	4094      	lsls	r4, r2
1a006670:	429c      	cmp	r4, r3
1a006672:	d9a8      	bls.n	1a0065c6 <_malloc_r+0x116>
1a006674:	68bc      	ldr	r4, [r7, #8]
1a006676:	6863      	ldr	r3, [r4, #4]
1a006678:	f023 0803 	bic.w	r8, r3, #3
1a00667c:	45a8      	cmp	r8, r5
1a00667e:	d303      	bcc.n	1a006688 <_malloc_r+0x1d8>
1a006680:	eba8 0305 	sub.w	r3, r8, r5
1a006684:	2b0f      	cmp	r3, #15
1a006686:	dc7a      	bgt.n	1a00677e <_malloc_r+0x2ce>
1a006688:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a0067d4 <_malloc_r+0x324>
1a00668c:	4b4c      	ldr	r3, [pc, #304]	; (1a0067c0 <_malloc_r+0x310>)
1a00668e:	f8d9 2000 	ldr.w	r2, [r9]
1a006692:	681b      	ldr	r3, [r3, #0]
1a006694:	3201      	adds	r2, #1
1a006696:	442b      	add	r3, r5
1a006698:	eb04 0a08 	add.w	sl, r4, r8
1a00669c:	f000 813c 	beq.w	1a006918 <_malloc_r+0x468>
1a0066a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0066a4:	330f      	adds	r3, #15
1a0066a6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a0066aa:	f02b 0b0f 	bic.w	fp, fp, #15
1a0066ae:	4659      	mov	r1, fp
1a0066b0:	4630      	mov	r0, r6
1a0066b2:	f7fa fe3f 	bl	1a001334 <_sbrk_r>
1a0066b6:	1c41      	adds	r1, r0, #1
1a0066b8:	4602      	mov	r2, r0
1a0066ba:	f000 80fc 	beq.w	1a0068b6 <_malloc_r+0x406>
1a0066be:	4582      	cmp	sl, r0
1a0066c0:	f200 80f7 	bhi.w	1a0068b2 <_malloc_r+0x402>
1a0066c4:	4b3f      	ldr	r3, [pc, #252]	; (1a0067c4 <_malloc_r+0x314>)
1a0066c6:	6818      	ldr	r0, [r3, #0]
1a0066c8:	4458      	add	r0, fp
1a0066ca:	6018      	str	r0, [r3, #0]
1a0066cc:	4601      	mov	r1, r0
1a0066ce:	f000 8157 	beq.w	1a006980 <_malloc_r+0x4d0>
1a0066d2:	f8d9 0000 	ldr.w	r0, [r9]
1a0066d6:	9301      	str	r3, [sp, #4]
1a0066d8:	3001      	adds	r0, #1
1a0066da:	bf1b      	ittet	ne
1a0066dc:	eba2 0a0a 	subne.w	sl, r2, sl
1a0066e0:	4451      	addne	r1, sl
1a0066e2:	f8c9 2000 	streq.w	r2, [r9]
1a0066e6:	6019      	strne	r1, [r3, #0]
1a0066e8:	f012 0a07 	ands.w	sl, r2, #7
1a0066ec:	f000 8120 	beq.w	1a006930 <_malloc_r+0x480>
1a0066f0:	f1ca 0108 	rsb	r1, sl, #8
1a0066f4:	440a      	add	r2, r1
1a0066f6:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a0066fa:	4493      	add	fp, r2
1a0066fc:	3108      	adds	r1, #8
1a0066fe:	eba1 010b 	sub.w	r1, r1, fp
1a006702:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a006706:	4649      	mov	r1, r9
1a006708:	4630      	mov	r0, r6
1a00670a:	9200      	str	r2, [sp, #0]
1a00670c:	f7fa fe12 	bl	1a001334 <_sbrk_r>
1a006710:	1c42      	adds	r2, r0, #1
1a006712:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006716:	f000 8158 	beq.w	1a0069ca <_malloc_r+0x51a>
1a00671a:	1a80      	subs	r0, r0, r2
1a00671c:	eb00 0b09 	add.w	fp, r0, r9
1a006720:	6818      	ldr	r0, [r3, #0]
1a006722:	60ba      	str	r2, [r7, #8]
1a006724:	f04b 0101 	orr.w	r1, fp, #1
1a006728:	4448      	add	r0, r9
1a00672a:	42bc      	cmp	r4, r7
1a00672c:	6051      	str	r1, [r2, #4]
1a00672e:	6018      	str	r0, [r3, #0]
1a006730:	f000 8132 	beq.w	1a006998 <_malloc_r+0x4e8>
1a006734:	f1b8 0f0f 	cmp.w	r8, #15
1a006738:	f240 8130 	bls.w	1a00699c <_malloc_r+0x4ec>
1a00673c:	6861      	ldr	r1, [r4, #4]
1a00673e:	f1a8 0c0c 	sub.w	ip, r8, #12
1a006742:	f02c 0c07 	bic.w	ip, ip, #7
1a006746:	f001 0101 	and.w	r1, r1, #1
1a00674a:	eb04 0e0c 	add.w	lr, r4, ip
1a00674e:	ea41 010c 	orr.w	r1, r1, ip
1a006752:	f04f 0805 	mov.w	r8, #5
1a006756:	f1bc 0f0f 	cmp.w	ip, #15
1a00675a:	6061      	str	r1, [r4, #4]
1a00675c:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a006760:	f200 813b 	bhi.w	1a0069da <_malloc_r+0x52a>
1a006764:	6851      	ldr	r1, [r2, #4]
1a006766:	4614      	mov	r4, r2
1a006768:	4b17      	ldr	r3, [pc, #92]	; (1a0067c8 <_malloc_r+0x318>)
1a00676a:	681a      	ldr	r2, [r3, #0]
1a00676c:	4282      	cmp	r2, r0
1a00676e:	bf38      	it	cc
1a006770:	6018      	strcc	r0, [r3, #0]
1a006772:	4b16      	ldr	r3, [pc, #88]	; (1a0067cc <_malloc_r+0x31c>)
1a006774:	681a      	ldr	r2, [r3, #0]
1a006776:	4282      	cmp	r2, r0
1a006778:	bf38      	it	cc
1a00677a:	6018      	strcc	r0, [r3, #0]
1a00677c:	e09d      	b.n	1a0068ba <_malloc_r+0x40a>
1a00677e:	1962      	adds	r2, r4, r5
1a006780:	f043 0301 	orr.w	r3, r3, #1
1a006784:	f045 0501 	orr.w	r5, r5, #1
1a006788:	6065      	str	r5, [r4, #4]
1a00678a:	4630      	mov	r0, r6
1a00678c:	60ba      	str	r2, [r7, #8]
1a00678e:	6053      	str	r3, [r2, #4]
1a006790:	f000 fa36 	bl	1a006c00 <__malloc_unlock>
1a006794:	3408      	adds	r4, #8
1a006796:	4620      	mov	r0, r4
1a006798:	b003      	add	sp, #12
1a00679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00679e:	4423      	add	r3, r4
1a0067a0:	68e1      	ldr	r1, [r4, #12]
1a0067a2:	685a      	ldr	r2, [r3, #4]
1a0067a4:	68a5      	ldr	r5, [r4, #8]
1a0067a6:	f042 0201 	orr.w	r2, r2, #1
1a0067aa:	60e9      	str	r1, [r5, #12]
1a0067ac:	4630      	mov	r0, r6
1a0067ae:	608d      	str	r5, [r1, #8]
1a0067b0:	605a      	str	r2, [r3, #4]
1a0067b2:	f000 fa25 	bl	1a006c00 <__malloc_unlock>
1a0067b6:	3408      	adds	r4, #8
1a0067b8:	e741      	b.n	1a00663e <_malloc_r+0x18e>
1a0067ba:	bf00      	nop
1a0067bc:	10000470 	.word	0x10000470
1a0067c0:	10002b58 	.word	0x10002b58
1a0067c4:	10002b28 	.word	0x10002b28
1a0067c8:	10002b50 	.word	0x10002b50
1a0067cc:	10002b54 	.word	0x10002b54
1a0067d0:	10000478 	.word	0x10000478
1a0067d4:	10000878 	.word	0x10000878
1a0067d8:	0a5a      	lsrs	r2, r3, #9
1a0067da:	2a04      	cmp	r2, #4
1a0067dc:	d963      	bls.n	1a0068a6 <_malloc_r+0x3f6>
1a0067de:	2a14      	cmp	r2, #20
1a0067e0:	f200 80b7 	bhi.w	1a006952 <_malloc_r+0x4a2>
1a0067e4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a0067e8:	00c9      	lsls	r1, r1, #3
1a0067ea:	325b      	adds	r2, #91	; 0x5b
1a0067ec:	eb07 0e01 	add.w	lr, r7, r1
1a0067f0:	5879      	ldr	r1, [r7, r1]
1a0067f2:	f1ae 0e08 	sub.w	lr, lr, #8
1a0067f6:	458e      	cmp	lr, r1
1a0067f8:	f000 8091 	beq.w	1a00691e <_malloc_r+0x46e>
1a0067fc:	684a      	ldr	r2, [r1, #4]
1a0067fe:	f022 0203 	bic.w	r2, r2, #3
1a006802:	429a      	cmp	r2, r3
1a006804:	d902      	bls.n	1a00680c <_malloc_r+0x35c>
1a006806:	6889      	ldr	r1, [r1, #8]
1a006808:	458e      	cmp	lr, r1
1a00680a:	d1f7      	bne.n	1a0067fc <_malloc_r+0x34c>
1a00680c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a006810:	687b      	ldr	r3, [r7, #4]
1a006812:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a006816:	f8ce 4008 	str.w	r4, [lr, #8]
1a00681a:	60cc      	str	r4, [r1, #12]
1a00681c:	e6ce      	b.n	1a0065bc <_malloc_r+0x10c>
1a00681e:	2b14      	cmp	r3, #20
1a006820:	d959      	bls.n	1a0068d6 <_malloc_r+0x426>
1a006822:	2b54      	cmp	r3, #84	; 0x54
1a006824:	f200 809d 	bhi.w	1a006962 <_malloc_r+0x4b2>
1a006828:	0b2b      	lsrs	r3, r5, #12
1a00682a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a00682e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a006832:	00c3      	lsls	r3, r0, #3
1a006834:	e681      	b.n	1a00653a <_malloc_r+0x8a>
1a006836:	f108 0801 	add.w	r8, r8, #1
1a00683a:	f018 0f03 	tst.w	r8, #3
1a00683e:	f10e 0e08 	add.w	lr, lr, #8
1a006842:	f47f aecd 	bne.w	1a0065e0 <_malloc_r+0x130>
1a006846:	e051      	b.n	1a0068ec <_malloc_r+0x43c>
1a006848:	4419      	add	r1, r3
1a00684a:	461c      	mov	r4, r3
1a00684c:	684a      	ldr	r2, [r1, #4]
1a00684e:	68db      	ldr	r3, [r3, #12]
1a006850:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a006854:	f042 0201 	orr.w	r2, r2, #1
1a006858:	604a      	str	r2, [r1, #4]
1a00685a:	4630      	mov	r0, r6
1a00685c:	60eb      	str	r3, [r5, #12]
1a00685e:	609d      	str	r5, [r3, #8]
1a006860:	f000 f9ce 	bl	1a006c00 <__malloc_unlock>
1a006864:	e6eb      	b.n	1a00663e <_malloc_r+0x18e>
1a006866:	08e8      	lsrs	r0, r5, #3
1a006868:	f105 0308 	add.w	r3, r5, #8
1a00686c:	e630      	b.n	1a0064d0 <_malloc_r+0x20>
1a00686e:	4423      	add	r3, r4
1a006870:	4630      	mov	r0, r6
1a006872:	685a      	ldr	r2, [r3, #4]
1a006874:	f042 0201 	orr.w	r2, r2, #1
1a006878:	605a      	str	r2, [r3, #4]
1a00687a:	3408      	adds	r4, #8
1a00687c:	f000 f9c0 	bl	1a006c00 <__malloc_unlock>
1a006880:	e6dd      	b.n	1a00663e <_malloc_r+0x18e>
1a006882:	1961      	adds	r1, r4, r5
1a006884:	f045 0e01 	orr.w	lr, r5, #1
1a006888:	f042 0501 	orr.w	r5, r2, #1
1a00688c:	f8c4 e004 	str.w	lr, [r4, #4]
1a006890:	4630      	mov	r0, r6
1a006892:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a006896:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a00689a:	604d      	str	r5, [r1, #4]
1a00689c:	50e2      	str	r2, [r4, r3]
1a00689e:	f000 f9af 	bl	1a006c00 <__malloc_unlock>
1a0068a2:	3408      	adds	r4, #8
1a0068a4:	e6cb      	b.n	1a00663e <_malloc_r+0x18e>
1a0068a6:	099a      	lsrs	r2, r3, #6
1a0068a8:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a0068ac:	00c9      	lsls	r1, r1, #3
1a0068ae:	3238      	adds	r2, #56	; 0x38
1a0068b0:	e79c      	b.n	1a0067ec <_malloc_r+0x33c>
1a0068b2:	42bc      	cmp	r4, r7
1a0068b4:	d05f      	beq.n	1a006976 <_malloc_r+0x4c6>
1a0068b6:	68bc      	ldr	r4, [r7, #8]
1a0068b8:	6861      	ldr	r1, [r4, #4]
1a0068ba:	f021 0b03 	bic.w	fp, r1, #3
1a0068be:	45ab      	cmp	fp, r5
1a0068c0:	ebab 0305 	sub.w	r3, fp, r5
1a0068c4:	d302      	bcc.n	1a0068cc <_malloc_r+0x41c>
1a0068c6:	2b0f      	cmp	r3, #15
1a0068c8:	f73f af59 	bgt.w	1a00677e <_malloc_r+0x2ce>
1a0068cc:	4630      	mov	r0, r6
1a0068ce:	f000 f997 	bl	1a006c00 <__malloc_unlock>
1a0068d2:	2400      	movs	r4, #0
1a0068d4:	e6b3      	b.n	1a00663e <_malloc_r+0x18e>
1a0068d6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a0068da:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a0068de:	00c3      	lsls	r3, r0, #3
1a0068e0:	e62b      	b.n	1a00653a <_malloc_r+0x8a>
1a0068e2:	f859 3908 	ldr.w	r3, [r9], #-8
1a0068e6:	454b      	cmp	r3, r9
1a0068e8:	f040 8096 	bne.w	1a006a18 <_malloc_r+0x568>
1a0068ec:	f010 0f03 	tst.w	r0, #3
1a0068f0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a0068f4:	d1f5      	bne.n	1a0068e2 <_malloc_r+0x432>
1a0068f6:	687b      	ldr	r3, [r7, #4]
1a0068f8:	ea23 0304 	bic.w	r3, r3, r4
1a0068fc:	607b      	str	r3, [r7, #4]
1a0068fe:	0064      	lsls	r4, r4, #1
1a006900:	429c      	cmp	r4, r3
1a006902:	f63f aeb7 	bhi.w	1a006674 <_malloc_r+0x1c4>
1a006906:	b91c      	cbnz	r4, 1a006910 <_malloc_r+0x460>
1a006908:	e6b4      	b.n	1a006674 <_malloc_r+0x1c4>
1a00690a:	0064      	lsls	r4, r4, #1
1a00690c:	f108 0804 	add.w	r8, r8, #4
1a006910:	421c      	tst	r4, r3
1a006912:	d0fa      	beq.n	1a00690a <_malloc_r+0x45a>
1a006914:	4640      	mov	r0, r8
1a006916:	e65f      	b.n	1a0065d8 <_malloc_r+0x128>
1a006918:	f103 0b10 	add.w	fp, r3, #16
1a00691c:	e6c7      	b.n	1a0066ae <_malloc_r+0x1fe>
1a00691e:	687b      	ldr	r3, [r7, #4]
1a006920:	1092      	asrs	r2, r2, #2
1a006922:	f04f 0801 	mov.w	r8, #1
1a006926:	fa08 f202 	lsl.w	r2, r8, r2
1a00692a:	4313      	orrs	r3, r2
1a00692c:	607b      	str	r3, [r7, #4]
1a00692e:	e770      	b.n	1a006812 <_malloc_r+0x362>
1a006930:	eb02 000b 	add.w	r0, r2, fp
1a006934:	4240      	negs	r0, r0
1a006936:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a00693a:	4649      	mov	r1, r9
1a00693c:	4630      	mov	r0, r6
1a00693e:	9200      	str	r2, [sp, #0]
1a006940:	f7fa fcf8 	bl	1a001334 <_sbrk_r>
1a006944:	1c43      	adds	r3, r0, #1
1a006946:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00694a:	f47f aee6 	bne.w	1a00671a <_malloc_r+0x26a>
1a00694e:	46d1      	mov	r9, sl
1a006950:	e6e6      	b.n	1a006720 <_malloc_r+0x270>
1a006952:	2a54      	cmp	r2, #84	; 0x54
1a006954:	d825      	bhi.n	1a0069a2 <_malloc_r+0x4f2>
1a006956:	0b1a      	lsrs	r2, r3, #12
1a006958:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a00695c:	00c9      	lsls	r1, r1, #3
1a00695e:	326e      	adds	r2, #110	; 0x6e
1a006960:	e744      	b.n	1a0067ec <_malloc_r+0x33c>
1a006962:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a006966:	d825      	bhi.n	1a0069b4 <_malloc_r+0x504>
1a006968:	0beb      	lsrs	r3, r5, #15
1a00696a:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a00696e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a006972:	00c3      	lsls	r3, r0, #3
1a006974:	e5e1      	b.n	1a00653a <_malloc_r+0x8a>
1a006976:	4b29      	ldr	r3, [pc, #164]	; (1a006a1c <_malloc_r+0x56c>)
1a006978:	6819      	ldr	r1, [r3, #0]
1a00697a:	4459      	add	r1, fp
1a00697c:	6019      	str	r1, [r3, #0]
1a00697e:	e6a8      	b.n	1a0066d2 <_malloc_r+0x222>
1a006980:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a006984:	f1bc 0f00 	cmp.w	ip, #0
1a006988:	f47f aea3 	bne.w	1a0066d2 <_malloc_r+0x222>
1a00698c:	44c3      	add	fp, r8
1a00698e:	68bc      	ldr	r4, [r7, #8]
1a006990:	f04b 0101 	orr.w	r1, fp, #1
1a006994:	6061      	str	r1, [r4, #4]
1a006996:	e6e7      	b.n	1a006768 <_malloc_r+0x2b8>
1a006998:	4614      	mov	r4, r2
1a00699a:	e6e5      	b.n	1a006768 <_malloc_r+0x2b8>
1a00699c:	2301      	movs	r3, #1
1a00699e:	6053      	str	r3, [r2, #4]
1a0069a0:	e794      	b.n	1a0068cc <_malloc_r+0x41c>
1a0069a2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a0069a6:	d823      	bhi.n	1a0069f0 <_malloc_r+0x540>
1a0069a8:	0bda      	lsrs	r2, r3, #15
1a0069aa:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a0069ae:	00c9      	lsls	r1, r1, #3
1a0069b0:	3277      	adds	r2, #119	; 0x77
1a0069b2:	e71b      	b.n	1a0067ec <_malloc_r+0x33c>
1a0069b4:	f240 5254 	movw	r2, #1364	; 0x554
1a0069b8:	4293      	cmp	r3, r2
1a0069ba:	d823      	bhi.n	1a006a04 <_malloc_r+0x554>
1a0069bc:	0cab      	lsrs	r3, r5, #18
1a0069be:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a0069c2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a0069c6:	00c3      	lsls	r3, r0, #3
1a0069c8:	e5b7      	b.n	1a00653a <_malloc_r+0x8a>
1a0069ca:	f1aa 0a08 	sub.w	sl, sl, #8
1a0069ce:	44d3      	add	fp, sl
1a0069d0:	ebab 0b02 	sub.w	fp, fp, r2
1a0069d4:	f04f 0900 	mov.w	r9, #0
1a0069d8:	e6a2      	b.n	1a006720 <_malloc_r+0x270>
1a0069da:	f104 0108 	add.w	r1, r4, #8
1a0069de:	4630      	mov	r0, r6
1a0069e0:	9300      	str	r3, [sp, #0]
1a0069e2:	f7ff fc19 	bl	1a006218 <_free_r>
1a0069e6:	68bc      	ldr	r4, [r7, #8]
1a0069e8:	9b00      	ldr	r3, [sp, #0]
1a0069ea:	6861      	ldr	r1, [r4, #4]
1a0069ec:	6818      	ldr	r0, [r3, #0]
1a0069ee:	e6bb      	b.n	1a006768 <_malloc_r+0x2b8>
1a0069f0:	f240 5154 	movw	r1, #1364	; 0x554
1a0069f4:	428a      	cmp	r2, r1
1a0069f6:	d80b      	bhi.n	1a006a10 <_malloc_r+0x560>
1a0069f8:	0c9a      	lsrs	r2, r3, #18
1a0069fa:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a0069fe:	00c9      	lsls	r1, r1, #3
1a006a00:	327c      	adds	r2, #124	; 0x7c
1a006a02:	e6f3      	b.n	1a0067ec <_malloc_r+0x33c>
1a006a04:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a006a08:	207f      	movs	r0, #127	; 0x7f
1a006a0a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a006a0e:	e594      	b.n	1a00653a <_malloc_r+0x8a>
1a006a10:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a006a14:	227e      	movs	r2, #126	; 0x7e
1a006a16:	e6e9      	b.n	1a0067ec <_malloc_r+0x33c>
1a006a18:	687b      	ldr	r3, [r7, #4]
1a006a1a:	e770      	b.n	1a0068fe <_malloc_r+0x44e>
1a006a1c:	10002b28 	.word	0x10002b28

1a006a20 <memcpy>:
1a006a20:	4684      	mov	ip, r0
1a006a22:	ea41 0300 	orr.w	r3, r1, r0
1a006a26:	f013 0303 	ands.w	r3, r3, #3
1a006a2a:	d16d      	bne.n	1a006b08 <memcpy+0xe8>
1a006a2c:	3a40      	subs	r2, #64	; 0x40
1a006a2e:	d341      	bcc.n	1a006ab4 <memcpy+0x94>
1a006a30:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a34:	f840 3b04 	str.w	r3, [r0], #4
1a006a38:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a3c:	f840 3b04 	str.w	r3, [r0], #4
1a006a40:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a44:	f840 3b04 	str.w	r3, [r0], #4
1a006a48:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a4c:	f840 3b04 	str.w	r3, [r0], #4
1a006a50:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a54:	f840 3b04 	str.w	r3, [r0], #4
1a006a58:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a5c:	f840 3b04 	str.w	r3, [r0], #4
1a006a60:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a64:	f840 3b04 	str.w	r3, [r0], #4
1a006a68:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a6c:	f840 3b04 	str.w	r3, [r0], #4
1a006a70:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a74:	f840 3b04 	str.w	r3, [r0], #4
1a006a78:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a7c:	f840 3b04 	str.w	r3, [r0], #4
1a006a80:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a84:	f840 3b04 	str.w	r3, [r0], #4
1a006a88:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a8c:	f840 3b04 	str.w	r3, [r0], #4
1a006a90:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a94:	f840 3b04 	str.w	r3, [r0], #4
1a006a98:	f851 3b04 	ldr.w	r3, [r1], #4
1a006a9c:	f840 3b04 	str.w	r3, [r0], #4
1a006aa0:	f851 3b04 	ldr.w	r3, [r1], #4
1a006aa4:	f840 3b04 	str.w	r3, [r0], #4
1a006aa8:	f851 3b04 	ldr.w	r3, [r1], #4
1a006aac:	f840 3b04 	str.w	r3, [r0], #4
1a006ab0:	3a40      	subs	r2, #64	; 0x40
1a006ab2:	d2bd      	bcs.n	1a006a30 <memcpy+0x10>
1a006ab4:	3230      	adds	r2, #48	; 0x30
1a006ab6:	d311      	bcc.n	1a006adc <memcpy+0xbc>
1a006ab8:	f851 3b04 	ldr.w	r3, [r1], #4
1a006abc:	f840 3b04 	str.w	r3, [r0], #4
1a006ac0:	f851 3b04 	ldr.w	r3, [r1], #4
1a006ac4:	f840 3b04 	str.w	r3, [r0], #4
1a006ac8:	f851 3b04 	ldr.w	r3, [r1], #4
1a006acc:	f840 3b04 	str.w	r3, [r0], #4
1a006ad0:	f851 3b04 	ldr.w	r3, [r1], #4
1a006ad4:	f840 3b04 	str.w	r3, [r0], #4
1a006ad8:	3a10      	subs	r2, #16
1a006ada:	d2ed      	bcs.n	1a006ab8 <memcpy+0x98>
1a006adc:	320c      	adds	r2, #12
1a006ade:	d305      	bcc.n	1a006aec <memcpy+0xcc>
1a006ae0:	f851 3b04 	ldr.w	r3, [r1], #4
1a006ae4:	f840 3b04 	str.w	r3, [r0], #4
1a006ae8:	3a04      	subs	r2, #4
1a006aea:	d2f9      	bcs.n	1a006ae0 <memcpy+0xc0>
1a006aec:	3204      	adds	r2, #4
1a006aee:	d008      	beq.n	1a006b02 <memcpy+0xe2>
1a006af0:	07d2      	lsls	r2, r2, #31
1a006af2:	bf1c      	itt	ne
1a006af4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a006af8:	f800 3b01 	strbne.w	r3, [r0], #1
1a006afc:	d301      	bcc.n	1a006b02 <memcpy+0xe2>
1a006afe:	880b      	ldrh	r3, [r1, #0]
1a006b00:	8003      	strh	r3, [r0, #0]
1a006b02:	4660      	mov	r0, ip
1a006b04:	4770      	bx	lr
1a006b06:	bf00      	nop
1a006b08:	2a08      	cmp	r2, #8
1a006b0a:	d313      	bcc.n	1a006b34 <memcpy+0x114>
1a006b0c:	078b      	lsls	r3, r1, #30
1a006b0e:	d08d      	beq.n	1a006a2c <memcpy+0xc>
1a006b10:	f010 0303 	ands.w	r3, r0, #3
1a006b14:	d08a      	beq.n	1a006a2c <memcpy+0xc>
1a006b16:	f1c3 0304 	rsb	r3, r3, #4
1a006b1a:	1ad2      	subs	r2, r2, r3
1a006b1c:	07db      	lsls	r3, r3, #31
1a006b1e:	bf1c      	itt	ne
1a006b20:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a006b24:	f800 3b01 	strbne.w	r3, [r0], #1
1a006b28:	d380      	bcc.n	1a006a2c <memcpy+0xc>
1a006b2a:	f831 3b02 	ldrh.w	r3, [r1], #2
1a006b2e:	f820 3b02 	strh.w	r3, [r0], #2
1a006b32:	e77b      	b.n	1a006a2c <memcpy+0xc>
1a006b34:	3a04      	subs	r2, #4
1a006b36:	d3d9      	bcc.n	1a006aec <memcpy+0xcc>
1a006b38:	3a01      	subs	r2, #1
1a006b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a006b3e:	f800 3b01 	strb.w	r3, [r0], #1
1a006b42:	d2f9      	bcs.n	1a006b38 <memcpy+0x118>
1a006b44:	780b      	ldrb	r3, [r1, #0]
1a006b46:	7003      	strb	r3, [r0, #0]
1a006b48:	784b      	ldrb	r3, [r1, #1]
1a006b4a:	7043      	strb	r3, [r0, #1]
1a006b4c:	788b      	ldrb	r3, [r1, #2]
1a006b4e:	7083      	strb	r3, [r0, #2]
1a006b50:	4660      	mov	r0, ip
1a006b52:	4770      	bx	lr

1a006b54 <memset>:
1a006b54:	b4f0      	push	{r4, r5, r6, r7}
1a006b56:	0786      	lsls	r6, r0, #30
1a006b58:	d046      	beq.n	1a006be8 <memset+0x94>
1a006b5a:	1e54      	subs	r4, r2, #1
1a006b5c:	2a00      	cmp	r2, #0
1a006b5e:	d03c      	beq.n	1a006bda <memset+0x86>
1a006b60:	b2ca      	uxtb	r2, r1
1a006b62:	4603      	mov	r3, r0
1a006b64:	e002      	b.n	1a006b6c <memset+0x18>
1a006b66:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a006b6a:	d336      	bcc.n	1a006bda <memset+0x86>
1a006b6c:	f803 2b01 	strb.w	r2, [r3], #1
1a006b70:	079d      	lsls	r5, r3, #30
1a006b72:	d1f8      	bne.n	1a006b66 <memset+0x12>
1a006b74:	2c03      	cmp	r4, #3
1a006b76:	d929      	bls.n	1a006bcc <memset+0x78>
1a006b78:	b2cd      	uxtb	r5, r1
1a006b7a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a006b7e:	2c0f      	cmp	r4, #15
1a006b80:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a006b84:	d933      	bls.n	1a006bee <memset+0x9a>
1a006b86:	f1a4 0610 	sub.w	r6, r4, #16
1a006b8a:	0936      	lsrs	r6, r6, #4
1a006b8c:	f103 0720 	add.w	r7, r3, #32
1a006b90:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a006b94:	f103 0210 	add.w	r2, r3, #16
1a006b98:	e942 5504 	strd	r5, r5, [r2, #-16]
1a006b9c:	e942 5502 	strd	r5, r5, [r2, #-8]
1a006ba0:	3210      	adds	r2, #16
1a006ba2:	42ba      	cmp	r2, r7
1a006ba4:	d1f8      	bne.n	1a006b98 <memset+0x44>
1a006ba6:	1c72      	adds	r2, r6, #1
1a006ba8:	f014 0f0c 	tst.w	r4, #12
1a006bac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a006bb0:	f004 060f 	and.w	r6, r4, #15
1a006bb4:	d013      	beq.n	1a006bde <memset+0x8a>
1a006bb6:	1f33      	subs	r3, r6, #4
1a006bb8:	f023 0303 	bic.w	r3, r3, #3
1a006bbc:	3304      	adds	r3, #4
1a006bbe:	4413      	add	r3, r2
1a006bc0:	f842 5b04 	str.w	r5, [r2], #4
1a006bc4:	4293      	cmp	r3, r2
1a006bc6:	d1fb      	bne.n	1a006bc0 <memset+0x6c>
1a006bc8:	f006 0403 	and.w	r4, r6, #3
1a006bcc:	b12c      	cbz	r4, 1a006bda <memset+0x86>
1a006bce:	b2c9      	uxtb	r1, r1
1a006bd0:	441c      	add	r4, r3
1a006bd2:	f803 1b01 	strb.w	r1, [r3], #1
1a006bd6:	429c      	cmp	r4, r3
1a006bd8:	d1fb      	bne.n	1a006bd2 <memset+0x7e>
1a006bda:	bcf0      	pop	{r4, r5, r6, r7}
1a006bdc:	4770      	bx	lr
1a006bde:	4634      	mov	r4, r6
1a006be0:	4613      	mov	r3, r2
1a006be2:	2c00      	cmp	r4, #0
1a006be4:	d1f3      	bne.n	1a006bce <memset+0x7a>
1a006be6:	e7f8      	b.n	1a006bda <memset+0x86>
1a006be8:	4614      	mov	r4, r2
1a006bea:	4603      	mov	r3, r0
1a006bec:	e7c2      	b.n	1a006b74 <memset+0x20>
1a006bee:	461a      	mov	r2, r3
1a006bf0:	4626      	mov	r6, r4
1a006bf2:	e7e0      	b.n	1a006bb6 <memset+0x62>

1a006bf4 <__malloc_lock>:
1a006bf4:	4801      	ldr	r0, [pc, #4]	; (1a006bfc <__malloc_lock+0x8>)
1a006bf6:	f7ff bc57 	b.w	1a0064a8 <__retarget_lock_acquire_recursive>
1a006bfa:	bf00      	nop
1a006bfc:	10002bd8 	.word	0x10002bd8

1a006c00 <__malloc_unlock>:
1a006c00:	4801      	ldr	r0, [pc, #4]	; (1a006c08 <__malloc_unlock+0x8>)
1a006c02:	f7ff bc53 	b.w	1a0064ac <__retarget_lock_release_recursive>
1a006c06:	bf00      	nop
1a006c08:	10002bd8 	.word	0x10002bd8

1a006c0c <printf>:
1a006c0c:	b40f      	push	{r0, r1, r2, r3}
1a006c0e:	b500      	push	{lr}
1a006c10:	4907      	ldr	r1, [pc, #28]	; (1a006c30 <printf+0x24>)
1a006c12:	b083      	sub	sp, #12
1a006c14:	ab04      	add	r3, sp, #16
1a006c16:	6808      	ldr	r0, [r1, #0]
1a006c18:	f853 2b04 	ldr.w	r2, [r3], #4
1a006c1c:	6881      	ldr	r1, [r0, #8]
1a006c1e:	9301      	str	r3, [sp, #4]
1a006c20:	f000 f91e 	bl	1a006e60 <_vfprintf_r>
1a006c24:	b003      	add	sp, #12
1a006c26:	f85d eb04 	ldr.w	lr, [sp], #4
1a006c2a:	b004      	add	sp, #16
1a006c2c:	4770      	bx	lr
1a006c2e:	bf00      	nop
1a006c30:	10000040 	.word	0x10000040

1a006c34 <_puts_r>:
1a006c34:	b570      	push	{r4, r5, r6, lr}
1a006c36:	4605      	mov	r5, r0
1a006c38:	b088      	sub	sp, #32
1a006c3a:	4608      	mov	r0, r1
1a006c3c:	460c      	mov	r4, r1
1a006c3e:	f000 f89f 	bl	1a006d80 <strlen>
1a006c42:	4a22      	ldr	r2, [pc, #136]	; (1a006ccc <_puts_r+0x98>)
1a006c44:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a006c46:	9404      	str	r4, [sp, #16]
1a006c48:	2601      	movs	r6, #1
1a006c4a:	1c44      	adds	r4, r0, #1
1a006c4c:	a904      	add	r1, sp, #16
1a006c4e:	9206      	str	r2, [sp, #24]
1a006c50:	2202      	movs	r2, #2
1a006c52:	9403      	str	r4, [sp, #12]
1a006c54:	9005      	str	r0, [sp, #20]
1a006c56:	68ac      	ldr	r4, [r5, #8]
1a006c58:	9607      	str	r6, [sp, #28]
1a006c5a:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a006c5e:	b31b      	cbz	r3, 1a006ca8 <_puts_r+0x74>
1a006c60:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a006c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006c66:	07ce      	lsls	r6, r1, #31
1a006c68:	b29a      	uxth	r2, r3
1a006c6a:	d401      	bmi.n	1a006c70 <_puts_r+0x3c>
1a006c6c:	0590      	lsls	r0, r2, #22
1a006c6e:	d525      	bpl.n	1a006cbc <_puts_r+0x88>
1a006c70:	0491      	lsls	r1, r2, #18
1a006c72:	d406      	bmi.n	1a006c82 <_puts_r+0x4e>
1a006c74:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a006c76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a006c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a006c7e:	81a3      	strh	r3, [r4, #12]
1a006c80:	6662      	str	r2, [r4, #100]	; 0x64
1a006c82:	4628      	mov	r0, r5
1a006c84:	aa01      	add	r2, sp, #4
1a006c86:	4621      	mov	r1, r4
1a006c88:	f002 fefc 	bl	1a009a84 <__sfvwrite_r>
1a006c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a006c8e:	2800      	cmp	r0, #0
1a006c90:	bf14      	ite	ne
1a006c92:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a006c96:	250a      	moveq	r5, #10
1a006c98:	07da      	lsls	r2, r3, #31
1a006c9a:	d402      	bmi.n	1a006ca2 <_puts_r+0x6e>
1a006c9c:	89a3      	ldrh	r3, [r4, #12]
1a006c9e:	059b      	lsls	r3, r3, #22
1a006ca0:	d506      	bpl.n	1a006cb0 <_puts_r+0x7c>
1a006ca2:	4628      	mov	r0, r5
1a006ca4:	b008      	add	sp, #32
1a006ca6:	bd70      	pop	{r4, r5, r6, pc}
1a006ca8:	4628      	mov	r0, r5
1a006caa:	f7ff fa2f 	bl	1a00610c <__sinit>
1a006cae:	e7d7      	b.n	1a006c60 <_puts_r+0x2c>
1a006cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a006cb2:	f7ff fbfb 	bl	1a0064ac <__retarget_lock_release_recursive>
1a006cb6:	4628      	mov	r0, r5
1a006cb8:	b008      	add	sp, #32
1a006cba:	bd70      	pop	{r4, r5, r6, pc}
1a006cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a006cbe:	f7ff fbf3 	bl	1a0064a8 <__retarget_lock_acquire_recursive>
1a006cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006cc6:	b29a      	uxth	r2, r3
1a006cc8:	e7d2      	b.n	1a006c70 <_puts_r+0x3c>
1a006cca:	bf00      	nop
1a006ccc:	1a00b274 	.word	0x1a00b274

1a006cd0 <puts>:
1a006cd0:	4b02      	ldr	r3, [pc, #8]	; (1a006cdc <puts+0xc>)
1a006cd2:	4601      	mov	r1, r0
1a006cd4:	6818      	ldr	r0, [r3, #0]
1a006cd6:	f7ff bfad 	b.w	1a006c34 <_puts_r>
1a006cda:	bf00      	nop
1a006cdc:	10000040 	.word	0x10000040

1a006ce0 <__sread>:
1a006ce0:	b510      	push	{r4, lr}
1a006ce2:	460c      	mov	r4, r1
1a006ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006ce8:	f7fa fac4 	bl	1a001274 <_read_r>
1a006cec:	2800      	cmp	r0, #0
1a006cee:	db03      	blt.n	1a006cf8 <__sread+0x18>
1a006cf0:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a006cf2:	4403      	add	r3, r0
1a006cf4:	6523      	str	r3, [r4, #80]	; 0x50
1a006cf6:	bd10      	pop	{r4, pc}
1a006cf8:	89a3      	ldrh	r3, [r4, #12]
1a006cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a006cfe:	81a3      	strh	r3, [r4, #12]
1a006d00:	bd10      	pop	{r4, pc}
1a006d02:	bf00      	nop

1a006d04 <__swrite>:
1a006d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006d08:	4616      	mov	r6, r2
1a006d0a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a006d0e:	461f      	mov	r7, r3
1a006d10:	05d3      	lsls	r3, r2, #23
1a006d12:	460c      	mov	r4, r1
1a006d14:	4605      	mov	r5, r0
1a006d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006d1a:	d409      	bmi.n	1a006d30 <__swrite+0x2c>
1a006d1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a006d20:	81a2      	strh	r2, [r4, #12]
1a006d22:	463b      	mov	r3, r7
1a006d24:	4632      	mov	r2, r6
1a006d26:	4628      	mov	r0, r5
1a006d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a006d2c:	f7fa badb 	b.w	1a0012e6 <_write_r>
1a006d30:	2200      	movs	r2, #0
1a006d32:	2302      	movs	r3, #2
1a006d34:	f7fa fa8c 	bl	1a001250 <_lseek_r>
1a006d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a006d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006d40:	e7ec      	b.n	1a006d1c <__swrite+0x18>
1a006d42:	bf00      	nop

1a006d44 <__sseek>:
1a006d44:	b510      	push	{r4, lr}
1a006d46:	460c      	mov	r4, r1
1a006d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006d4c:	f7fa fa80 	bl	1a001250 <_lseek_r>
1a006d50:	89a3      	ldrh	r3, [r4, #12]
1a006d52:	1c42      	adds	r2, r0, #1
1a006d54:	bf0e      	itee	eq
1a006d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a006d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a006d5e:	6520      	strne	r0, [r4, #80]	; 0x50
1a006d60:	81a3      	strh	r3, [r4, #12]
1a006d62:	bd10      	pop	{r4, pc}

1a006d64 <__sclose>:
1a006d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006d68:	f7fa ba3c 	b.w	1a0011e4 <_close_r>
1a006d6c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a006d70:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a006d74:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a006d78:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a006d7c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a006d80 <strlen>:
1a006d80:	f890 f000 	pld	[r0]
1a006d84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a006d88:	f020 0107 	bic.w	r1, r0, #7
1a006d8c:	f06f 0c00 	mvn.w	ip, #0
1a006d90:	f010 0407 	ands.w	r4, r0, #7
1a006d94:	f891 f020 	pld	[r1, #32]
1a006d98:	f040 8049 	bne.w	1a006e2e <strlen+0xae>
1a006d9c:	f04f 0400 	mov.w	r4, #0
1a006da0:	f06f 0007 	mvn.w	r0, #7
1a006da4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a006da8:	f891 f040 	pld	[r1, #64]	; 0x40
1a006dac:	f100 0008 	add.w	r0, r0, #8
1a006db0:	fa82 f24c 	uadd8	r2, r2, ip
1a006db4:	faa4 f28c 	sel	r2, r4, ip
1a006db8:	fa83 f34c 	uadd8	r3, r3, ip
1a006dbc:	faa2 f38c 	sel	r3, r2, ip
1a006dc0:	bb4b      	cbnz	r3, 1a006e16 <strlen+0x96>
1a006dc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a006dc6:	fa82 f24c 	uadd8	r2, r2, ip
1a006dca:	f100 0008 	add.w	r0, r0, #8
1a006dce:	faa4 f28c 	sel	r2, r4, ip
1a006dd2:	fa83 f34c 	uadd8	r3, r3, ip
1a006dd6:	faa2 f38c 	sel	r3, r2, ip
1a006dda:	b9e3      	cbnz	r3, 1a006e16 <strlen+0x96>
1a006ddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a006de0:	fa82 f24c 	uadd8	r2, r2, ip
1a006de4:	f100 0008 	add.w	r0, r0, #8
1a006de8:	faa4 f28c 	sel	r2, r4, ip
1a006dec:	fa83 f34c 	uadd8	r3, r3, ip
1a006df0:	faa2 f38c 	sel	r3, r2, ip
1a006df4:	b97b      	cbnz	r3, 1a006e16 <strlen+0x96>
1a006df6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a006dfa:	f101 0120 	add.w	r1, r1, #32
1a006dfe:	fa82 f24c 	uadd8	r2, r2, ip
1a006e02:	f100 0008 	add.w	r0, r0, #8
1a006e06:	faa4 f28c 	sel	r2, r4, ip
1a006e0a:	fa83 f34c 	uadd8	r3, r3, ip
1a006e0e:	faa2 f38c 	sel	r3, r2, ip
1a006e12:	2b00      	cmp	r3, #0
1a006e14:	d0c6      	beq.n	1a006da4 <strlen+0x24>
1a006e16:	2a00      	cmp	r2, #0
1a006e18:	bf04      	itt	eq
1a006e1a:	3004      	addeq	r0, #4
1a006e1c:	461a      	moveq	r2, r3
1a006e1e:	ba12      	rev	r2, r2
1a006e20:	fab2 f282 	clz	r2, r2
1a006e24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a006e28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a006e2c:	4770      	bx	lr
1a006e2e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a006e32:	f004 0503 	and.w	r5, r4, #3
1a006e36:	f1c4 0000 	rsb	r0, r4, #0
1a006e3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a006e3e:	f014 0f04 	tst.w	r4, #4
1a006e42:	f891 f040 	pld	[r1, #64]	; 0x40
1a006e46:	fa0c f505 	lsl.w	r5, ip, r5
1a006e4a:	ea62 0205 	orn	r2, r2, r5
1a006e4e:	bf1c      	itt	ne
1a006e50:	ea63 0305 	ornne	r3, r3, r5
1a006e54:	4662      	movne	r2, ip
1a006e56:	f04f 0400 	mov.w	r4, #0
1a006e5a:	e7a9      	b.n	1a006db0 <strlen+0x30>
1a006e5c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a006e60 <_vfprintf_r>:
1a006e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006e64:	b0d5      	sub	sp, #340	; 0x154
1a006e66:	461c      	mov	r4, r3
1a006e68:	4689      	mov	r9, r1
1a006e6a:	4617      	mov	r7, r2
1a006e6c:	4605      	mov	r5, r0
1a006e6e:	9005      	str	r0, [sp, #20]
1a006e70:	f002 ff8c 	bl	1a009d8c <_localeconv_r>
1a006e74:	6803      	ldr	r3, [r0, #0]
1a006e76:	9315      	str	r3, [sp, #84]	; 0x54
1a006e78:	4618      	mov	r0, r3
1a006e7a:	f7ff ff81 	bl	1a006d80 <strlen>
1a006e7e:	9408      	str	r4, [sp, #32]
1a006e80:	9013      	str	r0, [sp, #76]	; 0x4c
1a006e82:	b11d      	cbz	r5, 1a006e8c <_vfprintf_r+0x2c>
1a006e84:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a006e86:	2b00      	cmp	r3, #0
1a006e88:	f000 8411 	beq.w	1a0076ae <_vfprintf_r+0x84e>
1a006e8c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a006e90:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a006e94:	07cd      	lsls	r5, r1, #31
1a006e96:	b293      	uxth	r3, r2
1a006e98:	d402      	bmi.n	1a006ea0 <_vfprintf_r+0x40>
1a006e9a:	0598      	lsls	r0, r3, #22
1a006e9c:	f140 8754 	bpl.w	1a007d48 <_vfprintf_r+0xee8>
1a006ea0:	0499      	lsls	r1, r3, #18
1a006ea2:	d40a      	bmi.n	1a006eba <_vfprintf_r+0x5a>
1a006ea4:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a006ea8:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a006eac:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a006eb0:	f8a9 300c 	strh.w	r3, [r9, #12]
1a006eb4:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a006eb8:	b29b      	uxth	r3, r3
1a006eba:	071a      	lsls	r2, r3, #28
1a006ebc:	f140 80bf 	bpl.w	1a00703e <_vfprintf_r+0x1de>
1a006ec0:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a006ec4:	2a00      	cmp	r2, #0
1a006ec6:	f000 80ba 	beq.w	1a00703e <_vfprintf_r+0x1de>
1a006eca:	f003 021a 	and.w	r2, r3, #26
1a006ece:	2a0a      	cmp	r2, #10
1a006ed0:	f000 80c3 	beq.w	1a00705a <_vfprintf_r+0x1fa>
1a006ed4:	2300      	movs	r3, #0
1a006ed6:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 1a007148 <_vfprintf_r+0x2e8>
1a006eda:	9312      	str	r3, [sp, #72]	; 0x48
1a006edc:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a006ee0:	9314      	str	r3, [sp, #80]	; 0x50
1a006ee2:	9316      	str	r3, [sp, #88]	; 0x58
1a006ee4:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a006ee8:	9317      	str	r3, [sp, #92]	; 0x5c
1a006eea:	9304      	str	r3, [sp, #16]
1a006eec:	ab2b      	add	r3, sp, #172	; 0xac
1a006eee:	9328      	str	r3, [sp, #160]	; 0xa0
1a006ef0:	469b      	mov	fp, r3
1a006ef2:	783b      	ldrb	r3, [r7, #0]
1a006ef4:	f8cd 901c 	str.w	r9, [sp, #28]
1a006ef8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a006efc:	2b00      	cmp	r3, #0
1a006efe:	f000 8267 	beq.w	1a0073d0 <_vfprintf_r+0x570>
1a006f02:	2b25      	cmp	r3, #37	; 0x25
1a006f04:	f001 80ab 	beq.w	1a00805e <_vfprintf_r+0x11fe>
1a006f08:	463d      	mov	r5, r7
1a006f0a:	e003      	b.n	1a006f14 <_vfprintf_r+0xb4>
1a006f0c:	2b25      	cmp	r3, #37	; 0x25
1a006f0e:	f000 80bb 	beq.w	1a007088 <_vfprintf_r+0x228>
1a006f12:	4625      	mov	r5, r4
1a006f14:	786b      	ldrb	r3, [r5, #1]
1a006f16:	1c6c      	adds	r4, r5, #1
1a006f18:	2b00      	cmp	r3, #0
1a006f1a:	d1f7      	bne.n	1a006f0c <_vfprintf_r+0xac>
1a006f1c:	1be6      	subs	r6, r4, r7
1a006f1e:	f000 8257 	beq.w	1a0073d0 <_vfprintf_r+0x570>
1a006f22:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a006f26:	3301      	adds	r3, #1
1a006f28:	4432      	add	r2, r6
1a006f2a:	2b07      	cmp	r3, #7
1a006f2c:	f8cb 7000 	str.w	r7, [fp]
1a006f30:	f8cb 6004 	str.w	r6, [fp, #4]
1a006f34:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a006f38:	f300 80aa 	bgt.w	1a007090 <_vfprintf_r+0x230>
1a006f3c:	f10b 0b08 	add.w	fp, fp, #8
1a006f40:	9a04      	ldr	r2, [sp, #16]
1a006f42:	786b      	ldrb	r3, [r5, #1]
1a006f44:	4432      	add	r2, r6
1a006f46:	9204      	str	r2, [sp, #16]
1a006f48:	2b00      	cmp	r3, #0
1a006f4a:	f000 8241 	beq.w	1a0073d0 <_vfprintf_r+0x570>
1a006f4e:	2300      	movs	r3, #0
1a006f50:	f894 8001 	ldrb.w	r8, [r4, #1]
1a006f54:	9306      	str	r3, [sp, #24]
1a006f56:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a006f5a:	9302      	str	r3, [sp, #8]
1a006f5c:	f104 0a01 	add.w	sl, r4, #1
1a006f60:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a006f64:	262b      	movs	r6, #43	; 0x2b
1a006f66:	2120      	movs	r1, #32
1a006f68:	f10a 0a01 	add.w	sl, sl, #1
1a006f6c:	f1a8 0320 	sub.w	r3, r8, #32
1a006f70:	2b5a      	cmp	r3, #90	; 0x5a
1a006f72:	f200 83a1 	bhi.w	1a0076b8 <_vfprintf_r+0x858>
1a006f76:	e8df f013 	tbh	[pc, r3, lsl #1]
1a006f7a:	0282      	.short	0x0282
1a006f7c:	039f039f 	.word	0x039f039f
1a006f80:	039f027b 	.word	0x039f027b
1a006f84:	039f039f 	.word	0x039f039f
1a006f88:	039f0301 	.word	0x039f0301
1a006f8c:	02f6039f 	.word	0x02f6039f
1a006f90:	039f00df 	.word	0x039f00df
1a006f94:	032b00c4 	.word	0x032b00c4
1a006f98:	0324039f 	.word	0x0324039f
1a006f9c:	00960096 	.word	0x00960096
1a006fa0:	00960096 	.word	0x00960096
1a006fa4:	00960096 	.word	0x00960096
1a006fa8:	00960096 	.word	0x00960096
1a006fac:	039f0096 	.word	0x039f0096
1a006fb0:	039f039f 	.word	0x039f039f
1a006fb4:	039f039f 	.word	0x039f039f
1a006fb8:	039f039f 	.word	0x039f039f
1a006fbc:	039f0345 	.word	0x039f0345
1a006fc0:	016201a8 	.word	0x016201a8
1a006fc4:	03450345 	.word	0x03450345
1a006fc8:	039f0345 	.word	0x039f0345
1a006fcc:	039f039f 	.word	0x039f039f
1a006fd0:	015b039f 	.word	0x015b039f
1a006fd4:	039f039f 	.word	0x039f039f
1a006fd8:	039f014e 	.word	0x039f014e
1a006fdc:	039f039f 	.word	0x039f039f
1a006fe0:	039f0123 	.word	0x039f0123
1a006fe4:	039f0115 	.word	0x039f0115
1a006fe8:	00cb039f 	.word	0x00cb039f
1a006fec:	039f039f 	.word	0x039f039f
1a006ff0:	039f039f 	.word	0x039f039f
1a006ff4:	039f039f 	.word	0x039f039f
1a006ff8:	039f039f 	.word	0x039f039f
1a006ffc:	039f0345 	.word	0x039f0345
1a007000:	00ef01a8 	.word	0x00ef01a8
1a007004:	03450345 	.word	0x03450345
1a007008:	02700345 	.word	0x02700345
1a00700c:	005b00ef 	.word	0x005b00ef
1a007010:	02eb039f 	.word	0x02eb039f
1a007014:	02d1039f 	.word	0x02d1039f
1a007018:	028c02bd 	.word	0x028c02bd
1a00701c:	039f005b 	.word	0x039f005b
1a007020:	005f0123 	.word	0x005f0123
1a007024:	039f0387 	.word	0x039f0387
1a007028:	00a5039f 	.word	0x00a5039f
1a00702c:	005f039f 	.word	0x005f039f
1a007030:	9b02      	ldr	r3, [sp, #8]
1a007032:	f043 0320 	orr.w	r3, r3, #32
1a007036:	9302      	str	r3, [sp, #8]
1a007038:	f89a 8000 	ldrb.w	r8, [sl]
1a00703c:	e794      	b.n	1a006f68 <_vfprintf_r+0x108>
1a00703e:	4649      	mov	r1, r9
1a007040:	9805      	ldr	r0, [sp, #20]
1a007042:	f001 fcf9 	bl	1a008a38 <__swsetup_r>
1a007046:	2800      	cmp	r0, #0
1a007048:	f041 8381 	bne.w	1a00874e <_vfprintf_r+0x18ee>
1a00704c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a007050:	f003 021a 	and.w	r2, r3, #26
1a007054:	2a0a      	cmp	r2, #10
1a007056:	f47f af3d 	bne.w	1a006ed4 <_vfprintf_r+0x74>
1a00705a:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a00705e:	2a00      	cmp	r2, #0
1a007060:	f6ff af38 	blt.w	1a006ed4 <_vfprintf_r+0x74>
1a007064:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a007068:	07d6      	lsls	r6, r2, #31
1a00706a:	d402      	bmi.n	1a007072 <_vfprintf_r+0x212>
1a00706c:	059d      	lsls	r5, r3, #22
1a00706e:	f141 8190 	bpl.w	1a008392 <_vfprintf_r+0x1532>
1a007072:	4623      	mov	r3, r4
1a007074:	463a      	mov	r2, r7
1a007076:	4649      	mov	r1, r9
1a007078:	9805      	ldr	r0, [sp, #20]
1a00707a:	f001 fc9b 	bl	1a0089b4 <__sbprintf>
1a00707e:	9004      	str	r0, [sp, #16]
1a007080:	9804      	ldr	r0, [sp, #16]
1a007082:	b055      	add	sp, #340	; 0x154
1a007084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007088:	1be6      	subs	r6, r4, r7
1a00708a:	f43f af60 	beq.w	1a006f4e <_vfprintf_r+0xee>
1a00708e:	e748      	b.n	1a006f22 <_vfprintf_r+0xc2>
1a007090:	aa28      	add	r2, sp, #160	; 0xa0
1a007092:	9907      	ldr	r1, [sp, #28]
1a007094:	9805      	ldr	r0, [sp, #20]
1a007096:	f003 fd1f 	bl	1a00aad8 <__sprint_r>
1a00709a:	2800      	cmp	r0, #0
1a00709c:	f041 8427 	bne.w	1a0088ee <_vfprintf_r+0x1a8e>
1a0070a0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0070a4:	e74c      	b.n	1a006f40 <_vfprintf_r+0xe0>
1a0070a6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0070aa:	2200      	movs	r2, #0
1a0070ac:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a0070b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0070b4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a0070b8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0070bc:	2b09      	cmp	r3, #9
1a0070be:	d9f5      	bls.n	1a0070ac <_vfprintf_r+0x24c>
1a0070c0:	9206      	str	r2, [sp, #24]
1a0070c2:	e753      	b.n	1a006f6c <_vfprintf_r+0x10c>
1a0070c4:	4b22      	ldr	r3, [pc, #136]	; (1a007150 <_vfprintf_r+0x2f0>)
1a0070c6:	9314      	str	r3, [sp, #80]	; 0x50
1a0070c8:	9b02      	ldr	r3, [sp, #8]
1a0070ca:	069f      	lsls	r7, r3, #26
1a0070cc:	d525      	bpl.n	1a00711a <_vfprintf_r+0x2ba>
1a0070ce:	9c08      	ldr	r4, [sp, #32]
1a0070d0:	3407      	adds	r4, #7
1a0070d2:	f024 0307 	bic.w	r3, r4, #7
1a0070d6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0070da:	9308      	str	r3, [sp, #32]
1a0070dc:	9a02      	ldr	r2, [sp, #8]
1a0070de:	07d1      	lsls	r1, r2, #31
1a0070e0:	d50a      	bpl.n	1a0070f8 <_vfprintf_r+0x298>
1a0070e2:	ea54 0305 	orrs.w	r3, r4, r5
1a0070e6:	d007      	beq.n	1a0070f8 <_vfprintf_r+0x298>
1a0070e8:	2330      	movs	r3, #48	; 0x30
1a0070ea:	f042 0202 	orr.w	r2, r2, #2
1a0070ee:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a0070f2:	9202      	str	r2, [sp, #8]
1a0070f4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0070f8:	9b02      	ldr	r3, [sp, #8]
1a0070fa:	f423 6680 	bic.w	r6, r3, #1024	; 0x400
1a0070fe:	2302      	movs	r3, #2
1a007100:	e1d9      	b.n	1a0074b6 <_vfprintf_r+0x656>
1a007102:	f89a 8000 	ldrb.w	r8, [sl]
1a007106:	9b02      	ldr	r3, [sp, #8]
1a007108:	f043 0304 	orr.w	r3, r3, #4
1a00710c:	9302      	str	r3, [sp, #8]
1a00710e:	e72b      	b.n	1a006f68 <_vfprintf_r+0x108>
1a007110:	4b10      	ldr	r3, [pc, #64]	; (1a007154 <_vfprintf_r+0x2f4>)
1a007112:	9314      	str	r3, [sp, #80]	; 0x50
1a007114:	9b02      	ldr	r3, [sp, #8]
1a007116:	069f      	lsls	r7, r3, #26
1a007118:	d4d9      	bmi.n	1a0070ce <_vfprintf_r+0x26e>
1a00711a:	9b08      	ldr	r3, [sp, #32]
1a00711c:	f853 4b04 	ldr.w	r4, [r3], #4
1a007120:	9308      	str	r3, [sp, #32]
1a007122:	9b02      	ldr	r3, [sp, #8]
1a007124:	06de      	lsls	r6, r3, #27
1a007126:	f100 864f 	bmi.w	1a007dc8 <_vfprintf_r+0xf68>
1a00712a:	9b02      	ldr	r3, [sp, #8]
1a00712c:	065d      	lsls	r5, r3, #25
1a00712e:	f140 8647 	bpl.w	1a007dc0 <_vfprintf_r+0xf60>
1a007132:	b2a4      	uxth	r4, r4
1a007134:	2500      	movs	r5, #0
1a007136:	e7d1      	b.n	1a0070dc <_vfprintf_r+0x27c>
1a007138:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
1a00713c:	f89a 8000 	ldrb.w	r8, [sl]
1a007140:	e712      	b.n	1a006f68 <_vfprintf_r+0x108>
1a007142:	bf00      	nop
1a007144:	f3af 8000 	nop.w
	...
1a007150:	1a00b29c 	.word	0x1a00b29c
1a007154:	1a00b288 	.word	0x1a00b288
1a007158:	9e02      	ldr	r6, [sp, #8]
1a00715a:	06b0      	lsls	r0, r6, #26
1a00715c:	f140 870b 	bpl.w	1a007f76 <_vfprintf_r+0x1116>
1a007160:	9c08      	ldr	r4, [sp, #32]
1a007162:	3407      	adds	r4, #7
1a007164:	f024 0307 	bic.w	r3, r4, #7
1a007168:	4619      	mov	r1, r3
1a00716a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a00716e:	9108      	str	r1, [sp, #32]
1a007170:	4614      	mov	r4, r2
1a007172:	461d      	mov	r5, r3
1a007174:	2a00      	cmp	r2, #0
1a007176:	f173 0300 	sbcs.w	r3, r3, #0
1a00717a:	db71      	blt.n	1a007260 <_vfprintf_r+0x400>
1a00717c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007180:	f000 82c5 	beq.w	1a00770e <_vfprintf_r+0x8ae>
1a007184:	f026 0380 	bic.w	r3, r6, #128	; 0x80
1a007188:	9302      	str	r3, [sp, #8]
1a00718a:	ea54 0305 	orrs.w	r3, r4, r5
1a00718e:	f040 82bd 	bne.w	1a00770c <_vfprintf_r+0x8ac>
1a007192:	f1b9 0f00 	cmp.w	r9, #0
1a007196:	f041 810e 	bne.w	1a0083b6 <_vfprintf_r+0x1556>
1a00719a:	f04f 0900 	mov.w	r9, #0
1a00719e:	464e      	mov	r6, r9
1a0071a0:	af54      	add	r7, sp, #336	; 0x150
1a0071a2:	e2bf      	b.n	1a007724 <_vfprintf_r+0x8c4>
1a0071a4:	9b02      	ldr	r3, [sp, #8]
1a0071a6:	069d      	lsls	r5, r3, #26
1a0071a8:	f043 0610 	orr.w	r6, r3, #16
1a0071ac:	f100 828f 	bmi.w	1a0076ce <_vfprintf_r+0x86e>
1a0071b0:	9b08      	ldr	r3, [sp, #32]
1a0071b2:	1d1a      	adds	r2, r3, #4
1a0071b4:	9b08      	ldr	r3, [sp, #32]
1a0071b6:	9208      	str	r2, [sp, #32]
1a0071b8:	681c      	ldr	r4, [r3, #0]
1a0071ba:	2500      	movs	r5, #0
1a0071bc:	2301      	movs	r3, #1
1a0071be:	e17a      	b.n	1a0074b6 <_vfprintf_r+0x656>
1a0071c0:	9c08      	ldr	r4, [sp, #32]
1a0071c2:	f854 7b04 	ldr.w	r7, [r4], #4
1a0071c6:	2500      	movs	r5, #0
1a0071c8:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a0071cc:	2f00      	cmp	r7, #0
1a0071ce:	f000 8737 	beq.w	1a008040 <_vfprintf_r+0x11e0>
1a0071d2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0071d6:	f000 87bc 	beq.w	1a008152 <_vfprintf_r+0x12f2>
1a0071da:	464a      	mov	r2, r9
1a0071dc:	4629      	mov	r1, r5
1a0071de:	4638      	mov	r0, r7
1a0071e0:	f002 fe56 	bl	1a009e90 <memchr>
1a0071e4:	9009      	str	r0, [sp, #36]	; 0x24
1a0071e6:	2800      	cmp	r0, #0
1a0071e8:	f001 824a 	beq.w	1a008680 <_vfprintf_r+0x1820>
1a0071ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0071ee:	46a9      	mov	r9, r5
1a0071f0:	1bde      	subs	r6, r3, r7
1a0071f2:	e9cd 990e 	strd	r9, r9, [sp, #56]	; 0x38
1a0071f6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0071fa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0071fe:	9408      	str	r4, [sp, #32]
1a007200:	9303      	str	r3, [sp, #12]
1a007202:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a007206:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
1a00720a:	2a00      	cmp	r2, #0
1a00720c:	d06f      	beq.n	1a0072ee <_vfprintf_r+0x48e>
1a00720e:	9b03      	ldr	r3, [sp, #12]
1a007210:	3301      	adds	r3, #1
1a007212:	9303      	str	r3, [sp, #12]
1a007214:	e06b      	b.n	1a0072ee <_vfprintf_r+0x48e>
1a007216:	9b02      	ldr	r3, [sp, #8]
1a007218:	069c      	lsls	r4, r3, #26
1a00721a:	f043 0610 	orr.w	r6, r3, #16
1a00721e:	f100 825f 	bmi.w	1a0076e0 <_vfprintf_r+0x880>
1a007222:	9b08      	ldr	r3, [sp, #32]
1a007224:	1d1a      	adds	r2, r3, #4
1a007226:	9b08      	ldr	r3, [sp, #32]
1a007228:	9208      	str	r2, [sp, #32]
1a00722a:	681c      	ldr	r4, [r3, #0]
1a00722c:	2500      	movs	r5, #0
1a00722e:	e25e      	b.n	1a0076ee <_vfprintf_r+0x88e>
1a007230:	9b02      	ldr	r3, [sp, #8]
1a007232:	f89a 8000 	ldrb.w	r8, [sl]
1a007236:	f043 0308 	orr.w	r3, r3, #8
1a00723a:	9302      	str	r3, [sp, #8]
1a00723c:	e694      	b.n	1a006f68 <_vfprintf_r+0x108>
1a00723e:	9b02      	ldr	r3, [sp, #8]
1a007240:	069c      	lsls	r4, r3, #26
1a007242:	f043 0610 	orr.w	r6, r3, #16
1a007246:	d48b      	bmi.n	1a007160 <_vfprintf_r+0x300>
1a007248:	9b08      	ldr	r3, [sp, #32]
1a00724a:	1d1a      	adds	r2, r3, #4
1a00724c:	9b08      	ldr	r3, [sp, #32]
1a00724e:	9208      	str	r2, [sp, #32]
1a007250:	681c      	ldr	r4, [r3, #0]
1a007252:	17e5      	asrs	r5, r4, #31
1a007254:	4622      	mov	r2, r4
1a007256:	462b      	mov	r3, r5
1a007258:	2a00      	cmp	r2, #0
1a00725a:	f173 0300 	sbcs.w	r3, r3, #0
1a00725e:	da8d      	bge.n	1a00717c <_vfprintf_r+0x31c>
1a007260:	4264      	negs	r4, r4
1a007262:	f04f 032d 	mov.w	r3, #45	; 0x2d
1a007266:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a00726a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a00726e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a007272:	f04f 0301 	mov.w	r3, #1
1a007276:	f040 8125 	bne.w	1a0074c4 <_vfprintf_r+0x664>
1a00727a:	2b01      	cmp	r3, #1
1a00727c:	f000 8247 	beq.w	1a00770e <_vfprintf_r+0x8ae>
1a007280:	2b02      	cmp	r3, #2
1a007282:	f000 8479 	beq.w	1a007b78 <_vfprintf_r+0xd18>
1a007286:	a954      	add	r1, sp, #336	; 0x150
1a007288:	e000      	b.n	1a00728c <_vfprintf_r+0x42c>
1a00728a:	4639      	mov	r1, r7
1a00728c:	08e2      	lsrs	r2, r4, #3
1a00728e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a007292:	08e8      	lsrs	r0, r5, #3
1a007294:	f004 0307 	and.w	r3, r4, #7
1a007298:	4605      	mov	r5, r0
1a00729a:	4614      	mov	r4, r2
1a00729c:	3330      	adds	r3, #48	; 0x30
1a00729e:	ea54 0205 	orrs.w	r2, r4, r5
1a0072a2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0072a6:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a0072aa:	d1ee      	bne.n	1a00728a <_vfprintf_r+0x42a>
1a0072ac:	07f2      	lsls	r2, r6, #31
1a0072ae:	f140 8288 	bpl.w	1a0077c2 <_vfprintf_r+0x962>
1a0072b2:	2b30      	cmp	r3, #48	; 0x30
1a0072b4:	f000 8285 	beq.w	1a0077c2 <_vfprintf_r+0x962>
1a0072b8:	2330      	movs	r3, #48	; 0x30
1a0072ba:	3902      	subs	r1, #2
1a0072bc:	f807 3c01 	strb.w	r3, [r7, #-1]
1a0072c0:	ab54      	add	r3, sp, #336	; 0x150
1a0072c2:	9602      	str	r6, [sp, #8]
1a0072c4:	460f      	mov	r7, r1
1a0072c6:	1a5e      	subs	r6, r3, r1
1a0072c8:	e22c      	b.n	1a007724 <_vfprintf_r+0x8c4>
1a0072ca:	9c08      	ldr	r4, [sp, #32]
1a0072cc:	2300      	movs	r3, #0
1a0072ce:	f854 2b04 	ldr.w	r2, [r4], #4
1a0072d2:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a0072d6:	2601      	movs	r6, #1
1a0072d8:	461a      	mov	r2, r3
1a0072da:	9603      	str	r6, [sp, #12]
1a0072dc:	9408      	str	r4, [sp, #32]
1a0072de:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a0072e2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a0072e6:	9209      	str	r2, [sp, #36]	; 0x24
1a0072e8:	4691      	mov	r9, r2
1a0072ea:	920c      	str	r2, [sp, #48]	; 0x30
1a0072ec:	af3b      	add	r7, sp, #236	; 0xec
1a0072ee:	9b02      	ldr	r3, [sp, #8]
1a0072f0:	f013 0302 	ands.w	r3, r3, #2
1a0072f4:	930a      	str	r3, [sp, #40]	; 0x28
1a0072f6:	d002      	beq.n	1a0072fe <_vfprintf_r+0x49e>
1a0072f8:	9b03      	ldr	r3, [sp, #12]
1a0072fa:	3302      	adds	r3, #2
1a0072fc:	9303      	str	r3, [sp, #12]
1a0072fe:	9b02      	ldr	r3, [sp, #8]
1a007300:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007302:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a007306:	930b      	str	r3, [sp, #44]	; 0x2c
1a007308:	d104      	bne.n	1a007314 <_vfprintf_r+0x4b4>
1a00730a:	9b06      	ldr	r3, [sp, #24]
1a00730c:	9903      	ldr	r1, [sp, #12]
1a00730e:	1a5d      	subs	r5, r3, r1
1a007310:	2d00      	cmp	r5, #0
1a007312:	dc66      	bgt.n	1a0073e2 <_vfprintf_r+0x582>
1a007314:	b172      	cbz	r2, 1a007334 <_vfprintf_r+0x4d4>
1a007316:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007318:	3201      	adds	r2, #1
1a00731a:	3401      	adds	r4, #1
1a00731c:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a007320:	2101      	movs	r1, #1
1a007322:	2a07      	cmp	r2, #7
1a007324:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007328:	e9cb 0100 	strd	r0, r1, [fp]
1a00732c:	f300 83b1 	bgt.w	1a007a92 <_vfprintf_r+0xc32>
1a007330:	f10b 0b08 	add.w	fp, fp, #8
1a007334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007336:	b16b      	cbz	r3, 1a007354 <_vfprintf_r+0x4f4>
1a007338:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00733a:	3301      	adds	r3, #1
1a00733c:	3402      	adds	r4, #2
1a00733e:	a921      	add	r1, sp, #132	; 0x84
1a007340:	2202      	movs	r2, #2
1a007342:	2b07      	cmp	r3, #7
1a007344:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007348:	e9cb 1200 	strd	r1, r2, [fp]
1a00734c:	f300 83ad 	bgt.w	1a007aaa <_vfprintf_r+0xc4a>
1a007350:	f10b 0b08 	add.w	fp, fp, #8
1a007354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a007356:	2b80      	cmp	r3, #128	; 0x80
1a007358:	f000 8295 	beq.w	1a007886 <_vfprintf_r+0xa26>
1a00735c:	eba9 0506 	sub.w	r5, r9, r6
1a007360:	2d00      	cmp	r5, #0
1a007362:	f300 82d3 	bgt.w	1a00790c <_vfprintf_r+0xaac>
1a007366:	9b02      	ldr	r3, [sp, #8]
1a007368:	05db      	lsls	r3, r3, #23
1a00736a:	f100 822e 	bmi.w	1a0077ca <_vfprintf_r+0x96a>
1a00736e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007370:	f8cb 7000 	str.w	r7, [fp]
1a007374:	3301      	adds	r3, #1
1a007376:	4434      	add	r4, r6
1a007378:	2b07      	cmp	r3, #7
1a00737a:	942a      	str	r4, [sp, #168]	; 0xa8
1a00737c:	f8cb 6004 	str.w	r6, [fp, #4]
1a007380:	9329      	str	r3, [sp, #164]	; 0xa4
1a007382:	f300 8325 	bgt.w	1a0079d0 <_vfprintf_r+0xb70>
1a007386:	f10b 0b08 	add.w	fp, fp, #8
1a00738a:	9b02      	ldr	r3, [sp, #8]
1a00738c:	075d      	lsls	r5, r3, #29
1a00738e:	d505      	bpl.n	1a00739c <_vfprintf_r+0x53c>
1a007390:	9b06      	ldr	r3, [sp, #24]
1a007392:	9a03      	ldr	r2, [sp, #12]
1a007394:	1a9d      	subs	r5, r3, r2
1a007396:	2d00      	cmp	r5, #0
1a007398:	f300 83ae 	bgt.w	1a007af8 <_vfprintf_r+0xc98>
1a00739c:	9b04      	ldr	r3, [sp, #16]
1a00739e:	9a06      	ldr	r2, [sp, #24]
1a0073a0:	9903      	ldr	r1, [sp, #12]
1a0073a2:	428a      	cmp	r2, r1
1a0073a4:	bfac      	ite	ge
1a0073a6:	189b      	addge	r3, r3, r2
1a0073a8:	185b      	addlt	r3, r3, r1
1a0073aa:	9304      	str	r3, [sp, #16]
1a0073ac:	2c00      	cmp	r4, #0
1a0073ae:	f040 82e7 	bne.w	1a007980 <_vfprintf_r+0xb20>
1a0073b2:	2300      	movs	r3, #0
1a0073b4:	9329      	str	r3, [sp, #164]	; 0xa4
1a0073b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0073b8:	b11b      	cbz	r3, 1a0073c2 <_vfprintf_r+0x562>
1a0073ba:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0073bc:	9805      	ldr	r0, [sp, #20]
1a0073be:	f7fe ff2b 	bl	1a006218 <_free_r>
1a0073c2:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0073c6:	4657      	mov	r7, sl
1a0073c8:	783b      	ldrb	r3, [r7, #0]
1a0073ca:	2b00      	cmp	r3, #0
1a0073cc:	f47f ad99 	bne.w	1a006f02 <_vfprintf_r+0xa2>
1a0073d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a0073d2:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0073d6:	2b00      	cmp	r3, #0
1a0073d8:	f040 86f5 	bne.w	1a0081c6 <_vfprintf_r+0x1366>
1a0073dc:	2300      	movs	r3, #0
1a0073de:	9329      	str	r3, [sp, #164]	; 0xa4
1a0073e0:	e375      	b.n	1a007ace <_vfprintf_r+0xc6e>
1a0073e2:	2d10      	cmp	r5, #16
1a0073e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0073e6:	dd29      	ble.n	1a00743c <_vfprintf_r+0x5dc>
1a0073e8:	4659      	mov	r1, fp
1a0073ea:	4620      	mov	r0, r4
1a0073ec:	961e      	str	r6, [sp, #120]	; 0x78
1a0073ee:	2310      	movs	r3, #16
1a0073f0:	9c05      	ldr	r4, [sp, #20]
1a0073f2:	9e07      	ldr	r6, [sp, #28]
1a0073f4:	46bb      	mov	fp, r7
1a0073f6:	e004      	b.n	1a007402 <_vfprintf_r+0x5a2>
1a0073f8:	3d10      	subs	r5, #16
1a0073fa:	2d10      	cmp	r5, #16
1a0073fc:	f101 0108 	add.w	r1, r1, #8
1a007400:	dd18      	ble.n	1a007434 <_vfprintf_r+0x5d4>
1a007402:	3201      	adds	r2, #1
1a007404:	4fbc      	ldr	r7, [pc, #752]	; (1a0076f8 <_vfprintf_r+0x898>)
1a007406:	3010      	adds	r0, #16
1a007408:	2a07      	cmp	r2, #7
1a00740a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00740e:	e9c1 7300 	strd	r7, r3, [r1]
1a007412:	ddf1      	ble.n	1a0073f8 <_vfprintf_r+0x598>
1a007414:	aa28      	add	r2, sp, #160	; 0xa0
1a007416:	4631      	mov	r1, r6
1a007418:	4620      	mov	r0, r4
1a00741a:	f003 fb5d 	bl	1a00aad8 <__sprint_r>
1a00741e:	2800      	cmp	r0, #0
1a007420:	f040 834f 	bne.w	1a007ac2 <_vfprintf_r+0xc62>
1a007424:	3d10      	subs	r5, #16
1a007426:	2d10      	cmp	r5, #16
1a007428:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00742c:	a92b      	add	r1, sp, #172	; 0xac
1a00742e:	f04f 0310 	mov.w	r3, #16
1a007432:	dce6      	bgt.n	1a007402 <_vfprintf_r+0x5a2>
1a007434:	9e1e      	ldr	r6, [sp, #120]	; 0x78
1a007436:	465f      	mov	r7, fp
1a007438:	4604      	mov	r4, r0
1a00743a:	468b      	mov	fp, r1
1a00743c:	3201      	adds	r2, #1
1a00743e:	4bae      	ldr	r3, [pc, #696]	; (1a0076f8 <_vfprintf_r+0x898>)
1a007440:	442c      	add	r4, r5
1a007442:	2a07      	cmp	r2, #7
1a007444:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007448:	e9cb 3500 	strd	r3, r5, [fp]
1a00744c:	f300 862a 	bgt.w	1a0080a4 <_vfprintf_r+0x1244>
1a007450:	f10b 0b08 	add.w	fp, fp, #8
1a007454:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007458:	e75c      	b.n	1a007314 <_vfprintf_r+0x4b4>
1a00745a:	f89a 8000 	ldrb.w	r8, [sl]
1a00745e:	9b02      	ldr	r3, [sp, #8]
1a007460:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a007464:	f000 85e3 	beq.w	1a00802e <_vfprintf_r+0x11ce>
1a007468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00746c:	9302      	str	r3, [sp, #8]
1a00746e:	e57b      	b.n	1a006f68 <_vfprintf_r+0x108>
1a007470:	9b02      	ldr	r3, [sp, #8]
1a007472:	f89a 8000 	ldrb.w	r8, [sl]
1a007476:	f043 0301 	orr.w	r3, r3, #1
1a00747a:	9302      	str	r3, [sp, #8]
1a00747c:	e574      	b.n	1a006f68 <_vfprintf_r+0x108>
1a00747e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a007482:	f89a 8000 	ldrb.w	r8, [sl]
1a007486:	2b00      	cmp	r3, #0
1a007488:	f47f ad6e 	bne.w	1a006f68 <_vfprintf_r+0x108>
1a00748c:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a007490:	e56a      	b.n	1a006f68 <_vfprintf_r+0x108>
1a007492:	9c08      	ldr	r4, [sp, #32]
1a007494:	f647 0230 	movw	r2, #30768	; 0x7830
1a007498:	f854 3b04 	ldr.w	r3, [r4], #4
1a00749c:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a0074a0:	9a02      	ldr	r2, [sp, #8]
1a0074a2:	9408      	str	r4, [sp, #32]
1a0074a4:	461c      	mov	r4, r3
1a0074a6:	4b95      	ldr	r3, [pc, #596]	; (1a0076fc <_vfprintf_r+0x89c>)
1a0074a8:	9314      	str	r3, [sp, #80]	; 0x50
1a0074aa:	f042 0602 	orr.w	r6, r2, #2
1a0074ae:	2500      	movs	r5, #0
1a0074b0:	2302      	movs	r3, #2
1a0074b2:	f04f 0878 	mov.w	r8, #120	; 0x78
1a0074b6:	2200      	movs	r2, #0
1a0074b8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0074bc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a0074c0:	f43f aedb 	beq.w	1a00727a <_vfprintf_r+0x41a>
1a0074c4:	f026 0280 	bic.w	r2, r6, #128	; 0x80
1a0074c8:	9202      	str	r2, [sp, #8]
1a0074ca:	ea54 0205 	orrs.w	r2, r4, r5
1a0074ce:	f040 82dd 	bne.w	1a007a8c <_vfprintf_r+0xc2c>
1a0074d2:	f1b9 0f00 	cmp.w	r9, #0
1a0074d6:	f040 8348 	bne.w	1a007b6a <_vfprintf_r+0xd0a>
1a0074da:	2b00      	cmp	r3, #0
1a0074dc:	f47f ae5d 	bne.w	1a00719a <_vfprintf_r+0x33a>
1a0074e0:	f016 0601 	ands.w	r6, r6, #1
1a0074e4:	f000 846a 	beq.w	1a007dbc <_vfprintf_r+0xf5c>
1a0074e8:	2330      	movs	r3, #48	; 0x30
1a0074ea:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a0074ee:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a0074f2:	e117      	b.n	1a007724 <_vfprintf_r+0x8c4>
1a0074f4:	9e02      	ldr	r6, [sp, #8]
1a0074f6:	06b0      	lsls	r0, r6, #26
1a0074f8:	f100 80f2 	bmi.w	1a0076e0 <_vfprintf_r+0x880>
1a0074fc:	9b02      	ldr	r3, [sp, #8]
1a0074fe:	9a08      	ldr	r2, [sp, #32]
1a007500:	06d9      	lsls	r1, r3, #27
1a007502:	f852 4b04 	ldr.w	r4, [r2], #4
1a007506:	f101 8243 	bmi.w	1a008990 <_vfprintf_r+0x1b30>
1a00750a:	9e02      	ldr	r6, [sp, #8]
1a00750c:	4633      	mov	r3, r6
1a00750e:	065b      	lsls	r3, r3, #25
1a007510:	f140 8635 	bpl.w	1a00817e <_vfprintf_r+0x131e>
1a007514:	9208      	str	r2, [sp, #32]
1a007516:	b2a4      	uxth	r4, r4
1a007518:	2500      	movs	r5, #0
1a00751a:	e0e8      	b.n	1a0076ee <_vfprintf_r+0x88e>
1a00751c:	9902      	ldr	r1, [sp, #8]
1a00751e:	9a08      	ldr	r2, [sp, #32]
1a007520:	0689      	lsls	r1, r1, #26
1a007522:	f102 0304 	add.w	r3, r2, #4
1a007526:	f100 8452 	bmi.w	1a007dce <_vfprintf_r+0xf6e>
1a00752a:	9a02      	ldr	r2, [sp, #8]
1a00752c:	06d7      	lsls	r7, r2, #27
1a00752e:	f100 85e1 	bmi.w	1a0080f4 <_vfprintf_r+0x1294>
1a007532:	9a02      	ldr	r2, [sp, #8]
1a007534:	0656      	lsls	r6, r2, #25
1a007536:	f100 8664 	bmi.w	1a008202 <_vfprintf_r+0x13a2>
1a00753a:	9a02      	ldr	r2, [sp, #8]
1a00753c:	0595      	lsls	r5, r2, #22
1a00753e:	f140 85d9 	bpl.w	1a0080f4 <_vfprintf_r+0x1294>
1a007542:	9a08      	ldr	r2, [sp, #32]
1a007544:	9308      	str	r3, [sp, #32]
1a007546:	6812      	ldr	r2, [r2, #0]
1a007548:	9b04      	ldr	r3, [sp, #16]
1a00754a:	7013      	strb	r3, [r2, #0]
1a00754c:	4657      	mov	r7, sl
1a00754e:	e73b      	b.n	1a0073c8 <_vfprintf_r+0x568>
1a007550:	f89a 8000 	ldrb.w	r8, [sl]
1a007554:	9b02      	ldr	r3, [sp, #8]
1a007556:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a00755a:	f000 855f 	beq.w	1a00801c <_vfprintf_r+0x11bc>
1a00755e:	f043 0310 	orr.w	r3, r3, #16
1a007562:	9302      	str	r3, [sp, #8]
1a007564:	e500      	b.n	1a006f68 <_vfprintf_r+0x108>
1a007566:	9b08      	ldr	r3, [sp, #32]
1a007568:	f89a 8000 	ldrb.w	r8, [sl]
1a00756c:	f853 2b04 	ldr.w	r2, [r3], #4
1a007570:	9206      	str	r2, [sp, #24]
1a007572:	2a00      	cmp	r2, #0
1a007574:	f2c0 8513 	blt.w	1a007f9e <_vfprintf_r+0x113e>
1a007578:	9308      	str	r3, [sp, #32]
1a00757a:	e4f5      	b.n	1a006f68 <_vfprintf_r+0x108>
1a00757c:	9d05      	ldr	r5, [sp, #20]
1a00757e:	4628      	mov	r0, r5
1a007580:	f002 fc04 	bl	1a009d8c <_localeconv_r>
1a007584:	6843      	ldr	r3, [r0, #4]
1a007586:	9317      	str	r3, [sp, #92]	; 0x5c
1a007588:	4618      	mov	r0, r3
1a00758a:	f7ff fbf9 	bl	1a006d80 <strlen>
1a00758e:	9019      	str	r0, [sp, #100]	; 0x64
1a007590:	4604      	mov	r4, r0
1a007592:	4628      	mov	r0, r5
1a007594:	f002 fbfa 	bl	1a009d8c <_localeconv_r>
1a007598:	6883      	ldr	r3, [r0, #8]
1a00759a:	9318      	str	r3, [sp, #96]	; 0x60
1a00759c:	2120      	movs	r1, #32
1a00759e:	2c00      	cmp	r4, #0
1a0075a0:	f43f ad4a 	beq.w	1a007038 <_vfprintf_r+0x1d8>
1a0075a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a0075a6:	f89a 8000 	ldrb.w	r8, [sl]
1a0075aa:	2b00      	cmp	r3, #0
1a0075ac:	f43f acdc 	beq.w	1a006f68 <_vfprintf_r+0x108>
1a0075b0:	781b      	ldrb	r3, [r3, #0]
1a0075b2:	2b00      	cmp	r3, #0
1a0075b4:	f43f acd8 	beq.w	1a006f68 <_vfprintf_r+0x108>
1a0075b8:	9b02      	ldr	r3, [sp, #8]
1a0075ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a0075be:	9302      	str	r3, [sp, #8]
1a0075c0:	e4d2      	b.n	1a006f68 <_vfprintf_r+0x108>
1a0075c2:	9b02      	ldr	r3, [sp, #8]
1a0075c4:	f89a 8000 	ldrb.w	r8, [sl]
1a0075c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0075cc:	9302      	str	r3, [sp, #8]
1a0075ce:	e4cb      	b.n	1a006f68 <_vfprintf_r+0x108>
1a0075d0:	4652      	mov	r2, sl
1a0075d2:	f812 8b01 	ldrb.w	r8, [r2], #1
1a0075d6:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a0075da:	f001 81be 	beq.w	1a00895a <_vfprintf_r+0x1afa>
1a0075de:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0075e2:	2b09      	cmp	r3, #9
1a0075e4:	4692      	mov	sl, r2
1a0075e6:	f04f 0900 	mov.w	r9, #0
1a0075ea:	f63f acbf 	bhi.w	1a006f6c <_vfprintf_r+0x10c>
1a0075ee:	f81a 8b01 	ldrb.w	r8, [sl], #1
1a0075f2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a0075f6:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a0075fa:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0075fe:	2b09      	cmp	r3, #9
1a007600:	d9f5      	bls.n	1a0075ee <_vfprintf_r+0x78e>
1a007602:	e4b3      	b.n	1a006f6c <_vfprintf_r+0x10c>
1a007604:	9c08      	ldr	r4, [sp, #32]
1a007606:	3407      	adds	r4, #7
1a007608:	f024 0307 	bic.w	r3, r4, #7
1a00760c:	ecb3 7b02 	vldmia	r3!, {d7}
1a007610:	ec55 4b17 	vmov	r4, r5, d7
1a007614:	9308      	str	r3, [sp, #32]
1a007616:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a00761a:	931b      	str	r3, [sp, #108]	; 0x6c
1a00761c:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a007620:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a007624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a007628:	4b35      	ldr	r3, [pc, #212]	; (1a007700 <_vfprintf_r+0x8a0>)
1a00762a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00762e:	f003 fbab 	bl	1a00ad88 <__aeabi_dcmpun>
1a007632:	2800      	cmp	r0, #0
1a007634:	f040 83dc 	bne.w	1a007df0 <_vfprintf_r+0xf90>
1a007638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00763c:	4b30      	ldr	r3, [pc, #192]	; (1a007700 <_vfprintf_r+0x8a0>)
1a00763e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a007642:	f7fe fa31 	bl	1a005aa8 <__aeabi_dcmple>
1a007646:	2800      	cmp	r0, #0
1a007648:	f040 83d2 	bne.w	1a007df0 <_vfprintf_r+0xf90>
1a00764c:	2200      	movs	r2, #0
1a00764e:	2300      	movs	r3, #0
1a007650:	4620      	mov	r0, r4
1a007652:	4629      	mov	r1, r5
1a007654:	f7fe fa1e 	bl	1a005a94 <__aeabi_dcmplt>
1a007658:	2800      	cmp	r0, #0
1a00765a:	f040 8780 	bne.w	1a00855e <_vfprintf_r+0x16fe>
1a00765e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007662:	4f28      	ldr	r7, [pc, #160]	; (1a007704 <_vfprintf_r+0x8a4>)
1a007664:	4b28      	ldr	r3, [pc, #160]	; (1a007708 <_vfprintf_r+0x8a8>)
1a007666:	9802      	ldr	r0, [sp, #8]
1a007668:	2100      	movs	r1, #0
1a00766a:	2603      	movs	r6, #3
1a00766c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a007670:	9603      	str	r6, [sp, #12]
1a007672:	9109      	str	r1, [sp, #36]	; 0x24
1a007674:	9002      	str	r0, [sp, #8]
1a007676:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a00767a:	bfc8      	it	gt
1a00767c:	461f      	movgt	r7, r3
1a00767e:	4689      	mov	r9, r1
1a007680:	910c      	str	r1, [sp, #48]	; 0x30
1a007682:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a007686:	e5c0      	b.n	1a00720a <_vfprintf_r+0x3aa>
1a007688:	9e02      	ldr	r6, [sp, #8]
1a00768a:	06b4      	lsls	r4, r6, #26
1a00768c:	d41f      	bmi.n	1a0076ce <_vfprintf_r+0x86e>
1a00768e:	9b02      	ldr	r3, [sp, #8]
1a007690:	9a08      	ldr	r2, [sp, #32]
1a007692:	06d8      	lsls	r0, r3, #27
1a007694:	f852 4b04 	ldr.w	r4, [r2], #4
1a007698:	f101 8174 	bmi.w	1a008984 <_vfprintf_r+0x1b24>
1a00769c:	9e02      	ldr	r6, [sp, #8]
1a00769e:	0671      	lsls	r1, r6, #25
1a0076a0:	f140 8577 	bpl.w	1a008192 <_vfprintf_r+0x1332>
1a0076a4:	9208      	str	r2, [sp, #32]
1a0076a6:	b2a4      	uxth	r4, r4
1a0076a8:	2500      	movs	r5, #0
1a0076aa:	2301      	movs	r3, #1
1a0076ac:	e703      	b.n	1a0074b6 <_vfprintf_r+0x656>
1a0076ae:	9805      	ldr	r0, [sp, #20]
1a0076b0:	f7fe fd2c 	bl	1a00610c <__sinit>
1a0076b4:	f7ff bbea 	b.w	1a006e8c <_vfprintf_r+0x2c>
1a0076b8:	f1b8 0f00 	cmp.w	r8, #0
1a0076bc:	f43f ae88 	beq.w	1a0073d0 <_vfprintf_r+0x570>
1a0076c0:	2300      	movs	r3, #0
1a0076c2:	2601      	movs	r6, #1
1a0076c4:	461a      	mov	r2, r3
1a0076c6:	9603      	str	r6, [sp, #12]
1a0076c8:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a0076cc:	e607      	b.n	1a0072de <_vfprintf_r+0x47e>
1a0076ce:	9c08      	ldr	r4, [sp, #32]
1a0076d0:	3407      	adds	r4, #7
1a0076d2:	f024 0307 	bic.w	r3, r4, #7
1a0076d6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0076da:	9308      	str	r3, [sp, #32]
1a0076dc:	2301      	movs	r3, #1
1a0076de:	e6ea      	b.n	1a0074b6 <_vfprintf_r+0x656>
1a0076e0:	9c08      	ldr	r4, [sp, #32]
1a0076e2:	3407      	adds	r4, #7
1a0076e4:	f024 0307 	bic.w	r3, r4, #7
1a0076e8:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0076ec:	9308      	str	r3, [sp, #32]
1a0076ee:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
1a0076f2:	2300      	movs	r3, #0
1a0076f4:	e6df      	b.n	1a0074b6 <_vfprintf_r+0x656>
1a0076f6:	bf00      	nop
1a0076f8:	1a00b2bc 	.word	0x1a00b2bc
1a0076fc:	1a00b29c 	.word	0x1a00b29c
1a007700:	7fefffff 	.word	0x7fefffff
1a007704:	1a00b278 	.word	0x1a00b278
1a007708:	1a00b27c 	.word	0x1a00b27c
1a00770c:	9e02      	ldr	r6, [sp, #8]
1a00770e:	2d00      	cmp	r5, #0
1a007710:	bf08      	it	eq
1a007712:	2c0a      	cmpeq	r4, #10
1a007714:	d213      	bcs.n	1a00773e <_vfprintf_r+0x8de>
1a007716:	3430      	adds	r4, #48	; 0x30
1a007718:	9602      	str	r6, [sp, #8]
1a00771a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a00771e:	2601      	movs	r6, #1
1a007720:	f20d 174f 	addw	r7, sp, #335	; 0x14f
1a007724:	2300      	movs	r3, #0
1a007726:	454e      	cmp	r6, r9
1a007728:	9309      	str	r3, [sp, #36]	; 0x24
1a00772a:	930c      	str	r3, [sp, #48]	; 0x30
1a00772c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a007730:	4633      	mov	r3, r6
1a007732:	bfb8      	it	lt
1a007734:	464b      	movlt	r3, r9
1a007736:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00773a:	9303      	str	r3, [sp, #12]
1a00773c:	e565      	b.n	1a00720a <_vfprintf_r+0x3aa>
1a00773e:	f406 6380 	and.w	r3, r6, #1024	; 0x400
1a007742:	2200      	movs	r2, #0
1a007744:	e9cd a802 	strd	sl, r8, [sp, #8]
1a007748:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
1a00774c:	af54      	add	r7, sp, #336	; 0x150
1a00774e:	46cb      	mov	fp, r9
1a007750:	4692      	mov	sl, r2
1a007752:	46b1      	mov	r9, r6
1a007754:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a007758:	461e      	mov	r6, r3
1a00775a:	e007      	b.n	1a00776c <_vfprintf_r+0x90c>
1a00775c:	f7fe f9ea 	bl	1a005b34 <__aeabi_uldivmod>
1a007760:	2d00      	cmp	r5, #0
1a007762:	bf08      	it	eq
1a007764:	2c0a      	cmpeq	r4, #10
1a007766:	d320      	bcc.n	1a0077aa <_vfprintf_r+0x94a>
1a007768:	4604      	mov	r4, r0
1a00776a:	460d      	mov	r5, r1
1a00776c:	220a      	movs	r2, #10
1a00776e:	2300      	movs	r3, #0
1a007770:	4620      	mov	r0, r4
1a007772:	4629      	mov	r1, r5
1a007774:	f7fe f9de 	bl	1a005b34 <__aeabi_uldivmod>
1a007778:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a00777c:	f807 cc01 	strb.w	ip, [r7, #-1]
1a007780:	4620      	mov	r0, r4
1a007782:	4629      	mov	r1, r5
1a007784:	220a      	movs	r2, #10
1a007786:	2300      	movs	r3, #0
1a007788:	f10a 0a01 	add.w	sl, sl, #1
1a00778c:	3f01      	subs	r7, #1
1a00778e:	2e00      	cmp	r6, #0
1a007790:	d0e4      	beq.n	1a00775c <_vfprintf_r+0x8fc>
1a007792:	f898 c000 	ldrb.w	ip, [r8]
1a007796:	45e2      	cmp	sl, ip
1a007798:	d1e0      	bne.n	1a00775c <_vfprintf_r+0x8fc>
1a00779a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a00779e:	d0dd      	beq.n	1a00775c <_vfprintf_r+0x8fc>
1a0077a0:	429d      	cmp	r5, r3
1a0077a2:	bf08      	it	eq
1a0077a4:	4294      	cmpeq	r4, r2
1a0077a6:	f080 871e 	bcs.w	1a0085e6 <_vfprintf_r+0x1786>
1a0077aa:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a0077ae:	464e      	mov	r6, r9
1a0077b0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0077b4:	46d9      	mov	r9, fp
1a0077b6:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0077ba:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a0077be:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a0077c2:	9602      	str	r6, [sp, #8]
1a0077c4:	ab54      	add	r3, sp, #336	; 0x150
1a0077c6:	1bde      	subs	r6, r3, r7
1a0077c8:	e7ac      	b.n	1a007724 <_vfprintf_r+0x8c4>
1a0077ca:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a0077ce:	f340 810a 	ble.w	1a0079e6 <_vfprintf_r+0xb86>
1a0077d2:	2200      	movs	r2, #0
1a0077d4:	2300      	movs	r3, #0
1a0077d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0077da:	f7fe f951 	bl	1a005a80 <__aeabi_dcmpeq>
1a0077de:	2800      	cmp	r0, #0
1a0077e0:	f000 81de 	beq.w	1a007ba0 <_vfprintf_r+0xd40>
1a0077e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0077e6:	4ac2      	ldr	r2, [pc, #776]	; (1a007af0 <_vfprintf_r+0xc90>)
1a0077e8:	f8cb 2000 	str.w	r2, [fp]
1a0077ec:	3301      	adds	r3, #1
1a0077ee:	3401      	adds	r4, #1
1a0077f0:	2201      	movs	r2, #1
1a0077f2:	2b07      	cmp	r3, #7
1a0077f4:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0077f8:	f8cb 2004 	str.w	r2, [fp, #4]
1a0077fc:	f300 8463 	bgt.w	1a0080c6 <_vfprintf_r+0x1266>
1a007800:	f10b 0b08 	add.w	fp, fp, #8
1a007804:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007806:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007808:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00780a:	4293      	cmp	r3, r2
1a00780c:	f280 82a5 	bge.w	1a007d5a <_vfprintf_r+0xefa>
1a007810:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007812:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007814:	f8cb 2000 	str.w	r2, [fp]
1a007818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a00781a:	f8cb 2004 	str.w	r2, [fp, #4]
1a00781e:	3301      	adds	r3, #1
1a007820:	4414      	add	r4, r2
1a007822:	2b07      	cmp	r3, #7
1a007824:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007828:	f300 83ec 	bgt.w	1a008004 <_vfprintf_r+0x11a4>
1a00782c:	f10b 0b08 	add.w	fp, fp, #8
1a007830:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a007832:	1e5d      	subs	r5, r3, #1
1a007834:	2d00      	cmp	r5, #0
1a007836:	f77f ada8 	ble.w	1a00738a <_vfprintf_r+0x52a>
1a00783a:	2d10      	cmp	r5, #16
1a00783c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00783e:	4bad      	ldr	r3, [pc, #692]	; (1a007af4 <_vfprintf_r+0xc94>)
1a007840:	f340 844e 	ble.w	1a0080e0 <_vfprintf_r+0x1280>
1a007844:	2610      	movs	r6, #16
1a007846:	9f05      	ldr	r7, [sp, #20]
1a007848:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a00784c:	4699      	mov	r9, r3
1a00784e:	e005      	b.n	1a00785c <_vfprintf_r+0x9fc>
1a007850:	f10b 0b08 	add.w	fp, fp, #8
1a007854:	3d10      	subs	r5, #16
1a007856:	2d10      	cmp	r5, #16
1a007858:	f340 8441 	ble.w	1a0080de <_vfprintf_r+0x127e>
1a00785c:	3201      	adds	r2, #1
1a00785e:	3410      	adds	r4, #16
1a007860:	2a07      	cmp	r2, #7
1a007862:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007866:	e9cb 9600 	strd	r9, r6, [fp]
1a00786a:	ddf1      	ble.n	1a007850 <_vfprintf_r+0x9f0>
1a00786c:	aa28      	add	r2, sp, #160	; 0xa0
1a00786e:	4641      	mov	r1, r8
1a007870:	4638      	mov	r0, r7
1a007872:	f003 f931 	bl	1a00aad8 <__sprint_r>
1a007876:	2800      	cmp	r0, #0
1a007878:	f040 8423 	bne.w	1a0080c2 <_vfprintf_r+0x1262>
1a00787c:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a007880:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007884:	e7e6      	b.n	1a007854 <_vfprintf_r+0x9f4>
1a007886:	9b06      	ldr	r3, [sp, #24]
1a007888:	9a03      	ldr	r2, [sp, #12]
1a00788a:	1a9d      	subs	r5, r3, r2
1a00788c:	2d00      	cmp	r5, #0
1a00788e:	f77f ad65 	ble.w	1a00735c <_vfprintf_r+0x4fc>
1a007892:	2d10      	cmp	r5, #16
1a007894:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007896:	4b97      	ldr	r3, [pc, #604]	; (1a007af4 <_vfprintf_r+0xc94>)
1a007898:	dd28      	ble.n	1a0078ec <_vfprintf_r+0xa8c>
1a00789a:	960a      	str	r6, [sp, #40]	; 0x28
1a00789c:	4659      	mov	r1, fp
1a00789e:	4620      	mov	r0, r4
1a0078a0:	46bb      	mov	fp, r7
1a0078a2:	9c05      	ldr	r4, [sp, #20]
1a0078a4:	9e07      	ldr	r6, [sp, #28]
1a0078a6:	461f      	mov	r7, r3
1a0078a8:	e004      	b.n	1a0078b4 <_vfprintf_r+0xa54>
1a0078aa:	3d10      	subs	r5, #16
1a0078ac:	2d10      	cmp	r5, #16
1a0078ae:	f101 0108 	add.w	r1, r1, #8
1a0078b2:	dd16      	ble.n	1a0078e2 <_vfprintf_r+0xa82>
1a0078b4:	3201      	adds	r2, #1
1a0078b6:	3010      	adds	r0, #16
1a0078b8:	2310      	movs	r3, #16
1a0078ba:	2a07      	cmp	r2, #7
1a0078bc:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a0078c0:	600f      	str	r7, [r1, #0]
1a0078c2:	604b      	str	r3, [r1, #4]
1a0078c4:	ddf1      	ble.n	1a0078aa <_vfprintf_r+0xa4a>
1a0078c6:	aa28      	add	r2, sp, #160	; 0xa0
1a0078c8:	4631      	mov	r1, r6
1a0078ca:	4620      	mov	r0, r4
1a0078cc:	f003 f904 	bl	1a00aad8 <__sprint_r>
1a0078d0:	2800      	cmp	r0, #0
1a0078d2:	f040 80f6 	bne.w	1a007ac2 <_vfprintf_r+0xc62>
1a0078d6:	3d10      	subs	r5, #16
1a0078d8:	2d10      	cmp	r5, #16
1a0078da:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a0078de:	a92b      	add	r1, sp, #172	; 0xac
1a0078e0:	dce8      	bgt.n	1a0078b4 <_vfprintf_r+0xa54>
1a0078e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a0078e4:	463b      	mov	r3, r7
1a0078e6:	4604      	mov	r4, r0
1a0078e8:	465f      	mov	r7, fp
1a0078ea:	468b      	mov	fp, r1
1a0078ec:	3201      	adds	r2, #1
1a0078ee:	442c      	add	r4, r5
1a0078f0:	2a07      	cmp	r2, #7
1a0078f2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0078f6:	e9cb 3500 	strd	r3, r5, [fp]
1a0078fa:	f300 8355 	bgt.w	1a007fa8 <_vfprintf_r+0x1148>
1a0078fe:	eba9 0506 	sub.w	r5, r9, r6
1a007902:	2d00      	cmp	r5, #0
1a007904:	f10b 0b08 	add.w	fp, fp, #8
1a007908:	f77f ad2d 	ble.w	1a007366 <_vfprintf_r+0x506>
1a00790c:	2d10      	cmp	r5, #16
1a00790e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007910:	4b78      	ldr	r3, [pc, #480]	; (1a007af4 <_vfprintf_r+0xc94>)
1a007912:	dd29      	ble.n	1a007968 <_vfprintf_r+0xb08>
1a007914:	960a      	str	r6, [sp, #40]	; 0x28
1a007916:	4659      	mov	r1, fp
1a007918:	4620      	mov	r0, r4
1a00791a:	46bb      	mov	fp, r7
1a00791c:	f04f 0910 	mov.w	r9, #16
1a007920:	9c05      	ldr	r4, [sp, #20]
1a007922:	9e07      	ldr	r6, [sp, #28]
1a007924:	461f      	mov	r7, r3
1a007926:	e004      	b.n	1a007932 <_vfprintf_r+0xad2>
1a007928:	3d10      	subs	r5, #16
1a00792a:	2d10      	cmp	r5, #16
1a00792c:	f101 0108 	add.w	r1, r1, #8
1a007930:	dd15      	ble.n	1a00795e <_vfprintf_r+0xafe>
1a007932:	3201      	adds	r2, #1
1a007934:	3010      	adds	r0, #16
1a007936:	2a07      	cmp	r2, #7
1a007938:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a00793c:	e9c1 7900 	strd	r7, r9, [r1]
1a007940:	ddf2      	ble.n	1a007928 <_vfprintf_r+0xac8>
1a007942:	aa28      	add	r2, sp, #160	; 0xa0
1a007944:	4631      	mov	r1, r6
1a007946:	4620      	mov	r0, r4
1a007948:	f003 f8c6 	bl	1a00aad8 <__sprint_r>
1a00794c:	2800      	cmp	r0, #0
1a00794e:	f040 80b8 	bne.w	1a007ac2 <_vfprintf_r+0xc62>
1a007952:	3d10      	subs	r5, #16
1a007954:	2d10      	cmp	r5, #16
1a007956:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a00795a:	a92b      	add	r1, sp, #172	; 0xac
1a00795c:	dce9      	bgt.n	1a007932 <_vfprintf_r+0xad2>
1a00795e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a007960:	463b      	mov	r3, r7
1a007962:	4604      	mov	r4, r0
1a007964:	465f      	mov	r7, fp
1a007966:	468b      	mov	fp, r1
1a007968:	3201      	adds	r2, #1
1a00796a:	442c      	add	r4, r5
1a00796c:	2a07      	cmp	r2, #7
1a00796e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007972:	e9cb 3500 	strd	r3, r5, [fp]
1a007976:	f300 81da 	bgt.w	1a007d2e <_vfprintf_r+0xece>
1a00797a:	f10b 0b08 	add.w	fp, fp, #8
1a00797e:	e4f2      	b.n	1a007366 <_vfprintf_r+0x506>
1a007980:	aa28      	add	r2, sp, #160	; 0xa0
1a007982:	9907      	ldr	r1, [sp, #28]
1a007984:	9805      	ldr	r0, [sp, #20]
1a007986:	f003 f8a7 	bl	1a00aad8 <__sprint_r>
1a00798a:	2800      	cmp	r0, #0
1a00798c:	f43f ad11 	beq.w	1a0073b2 <_vfprintf_r+0x552>
1a007990:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a007994:	e096      	b.n	1a007ac4 <_vfprintf_r+0xc64>
1a007996:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007998:	9915      	ldr	r1, [sp, #84]	; 0x54
1a00799a:	f8cb 1000 	str.w	r1, [fp]
1a00799e:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0079a0:	f8cb 1004 	str.w	r1, [fp, #4]
1a0079a4:	3201      	adds	r2, #1
1a0079a6:	440c      	add	r4, r1
1a0079a8:	2a07      	cmp	r2, #7
1a0079aa:	942a      	str	r4, [sp, #168]	; 0xa8
1a0079ac:	9229      	str	r2, [sp, #164]	; 0xa4
1a0079ae:	f300 84e1 	bgt.w	1a008374 <_vfprintf_r+0x1514>
1a0079b2:	f10b 0b08 	add.w	fp, fp, #8
1a0079b6:	2b00      	cmp	r3, #0
1a0079b8:	f2c0 86a2 	blt.w	1a008700 <_vfprintf_r+0x18a0>
1a0079bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0079be:	3201      	adds	r2, #1
1a0079c0:	441c      	add	r4, r3
1a0079c2:	2a07      	cmp	r2, #7
1a0079c4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0079c8:	e9cb 7300 	strd	r7, r3, [fp]
1a0079cc:	f77f acdb 	ble.w	1a007386 <_vfprintf_r+0x526>
1a0079d0:	aa28      	add	r2, sp, #160	; 0xa0
1a0079d2:	9907      	ldr	r1, [sp, #28]
1a0079d4:	9805      	ldr	r0, [sp, #20]
1a0079d6:	f003 f87f 	bl	1a00aad8 <__sprint_r>
1a0079da:	2800      	cmp	r0, #0
1a0079dc:	d1d8      	bne.n	1a007990 <_vfprintf_r+0xb30>
1a0079de:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0079e0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0079e4:	e4d1      	b.n	1a00738a <_vfprintf_r+0x52a>
1a0079e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0079e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0079ea:	2a01      	cmp	r2, #1
1a0079ec:	f104 0401 	add.w	r4, r4, #1
1a0079f0:	f103 0501 	add.w	r5, r3, #1
1a0079f4:	f10b 0608 	add.w	r6, fp, #8
1a0079f8:	f340 8158 	ble.w	1a007cac <_vfprintf_r+0xe4c>
1a0079fc:	2301      	movs	r3, #1
1a0079fe:	2d07      	cmp	r5, #7
1a007a00:	f8cb 7000 	str.w	r7, [fp]
1a007a04:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a007a08:	f8cb 3004 	str.w	r3, [fp, #4]
1a007a0c:	f300 832a 	bgt.w	1a008064 <_vfprintf_r+0x1204>
1a007a10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007a12:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a007a14:	1c69      	adds	r1, r5, #1
1a007a16:	441c      	add	r4, r3
1a007a18:	2907      	cmp	r1, #7
1a007a1a:	910b      	str	r1, [sp, #44]	; 0x2c
1a007a1c:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a007a20:	e9c6 2300 	strd	r2, r3, [r6]
1a007a24:	f300 832a 	bgt.w	1a00807c <_vfprintf_r+0x121c>
1a007a28:	3608      	adds	r6, #8
1a007a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a007a2c:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a007a2e:	f102 0901 	add.w	r9, r2, #1
1a007a32:	2300      	movs	r3, #0
1a007a34:	2200      	movs	r2, #0
1a007a36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a007a3a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a007a3e:	f106 0b08 	add.w	fp, r6, #8
1a007a42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a007a46:	f7fe f81b 	bl	1a005a80 <__aeabi_dcmpeq>
1a007a4a:	2800      	cmp	r0, #0
1a007a4c:	f040 8141 	bne.w	1a007cd2 <_vfprintf_r+0xe72>
1a007a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007a52:	f8c6 8004 	str.w	r8, [r6, #4]
1a007a56:	3701      	adds	r7, #1
1a007a58:	4444      	add	r4, r8
1a007a5a:	2b07      	cmp	r3, #7
1a007a5c:	6037      	str	r7, [r6, #0]
1a007a5e:	942a      	str	r4, [sp, #168]	; 0xa8
1a007a60:	9329      	str	r3, [sp, #164]	; 0xa4
1a007a62:	f300 82bf 	bgt.w	1a007fe4 <_vfprintf_r+0x1184>
1a007a66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a007a68:	f106 0310 	add.w	r3, r6, #16
1a007a6c:	3202      	adds	r2, #2
1a007a6e:	465e      	mov	r6, fp
1a007a70:	920a      	str	r2, [sp, #40]	; 0x28
1a007a72:	469b      	mov	fp, r3
1a007a74:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a007a76:	6072      	str	r2, [r6, #4]
1a007a78:	4414      	add	r4, r2
1a007a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a007a7c:	942a      	str	r4, [sp, #168]	; 0xa8
1a007a7e:	ab24      	add	r3, sp, #144	; 0x90
1a007a80:	2a07      	cmp	r2, #7
1a007a82:	9229      	str	r2, [sp, #164]	; 0xa4
1a007a84:	6033      	str	r3, [r6, #0]
1a007a86:	f77f ac80 	ble.w	1a00738a <_vfprintf_r+0x52a>
1a007a8a:	e7a1      	b.n	1a0079d0 <_vfprintf_r+0xb70>
1a007a8c:	9e02      	ldr	r6, [sp, #8]
1a007a8e:	f7ff bbf4 	b.w	1a00727a <_vfprintf_r+0x41a>
1a007a92:	aa28      	add	r2, sp, #160	; 0xa0
1a007a94:	9907      	ldr	r1, [sp, #28]
1a007a96:	9805      	ldr	r0, [sp, #20]
1a007a98:	f003 f81e 	bl	1a00aad8 <__sprint_r>
1a007a9c:	2800      	cmp	r0, #0
1a007a9e:	f47f af77 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a007aa2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007aa4:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007aa8:	e444      	b.n	1a007334 <_vfprintf_r+0x4d4>
1a007aaa:	aa28      	add	r2, sp, #160	; 0xa0
1a007aac:	9907      	ldr	r1, [sp, #28]
1a007aae:	9805      	ldr	r0, [sp, #20]
1a007ab0:	f003 f812 	bl	1a00aad8 <__sprint_r>
1a007ab4:	2800      	cmp	r0, #0
1a007ab6:	f47f af6b 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a007aba:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007abc:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007ac0:	e448      	b.n	1a007354 <_vfprintf_r+0x4f4>
1a007ac2:	46b1      	mov	r9, r6
1a007ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
1a007ac6:	b111      	cbz	r1, 1a007ace <_vfprintf_r+0xc6e>
1a007ac8:	9805      	ldr	r0, [sp, #20]
1a007aca:	f7fe fba5 	bl	1a006218 <_free_r>
1a007ace:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a007ad2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a007ad6:	07d4      	lsls	r4, r2, #31
1a007ad8:	d402      	bmi.n	1a007ae0 <_vfprintf_r+0xc80>
1a007ada:	0598      	lsls	r0, r3, #22
1a007adc:	f140 82db 	bpl.w	1a008096 <_vfprintf_r+0x1236>
1a007ae0:	0659      	lsls	r1, r3, #25
1a007ae2:	f100 8640 	bmi.w	1a008766 <_vfprintf_r+0x1906>
1a007ae6:	9804      	ldr	r0, [sp, #16]
1a007ae8:	b055      	add	sp, #340	; 0x154
1a007aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007aee:	bf00      	nop
1a007af0:	1a00b2b8 	.word	0x1a00b2b8
1a007af4:	1a00b2cc 	.word	0x1a00b2cc
1a007af8:	2d10      	cmp	r5, #16
1a007afa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007afc:	dd21      	ble.n	1a007b42 <_vfprintf_r+0xce2>
1a007afe:	2610      	movs	r6, #16
1a007b00:	9f05      	ldr	r7, [sp, #20]
1a007b02:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a007b06:	e004      	b.n	1a007b12 <_vfprintf_r+0xcb2>
1a007b08:	3d10      	subs	r5, #16
1a007b0a:	2d10      	cmp	r5, #16
1a007b0c:	f10b 0b08 	add.w	fp, fp, #8
1a007b10:	dd17      	ble.n	1a007b42 <_vfprintf_r+0xce2>
1a007b12:	3301      	adds	r3, #1
1a007b14:	4ab3      	ldr	r2, [pc, #716]	; (1a007de4 <_vfprintf_r+0xf84>)
1a007b16:	3410      	adds	r4, #16
1a007b18:	2b07      	cmp	r3, #7
1a007b1a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007b1e:	e9cb 2600 	strd	r2, r6, [fp]
1a007b22:	ddf1      	ble.n	1a007b08 <_vfprintf_r+0xca8>
1a007b24:	aa28      	add	r2, sp, #160	; 0xa0
1a007b26:	4641      	mov	r1, r8
1a007b28:	4638      	mov	r0, r7
1a007b2a:	f002 ffd5 	bl	1a00aad8 <__sprint_r>
1a007b2e:	2800      	cmp	r0, #0
1a007b30:	f040 82c7 	bne.w	1a0080c2 <_vfprintf_r+0x1262>
1a007b34:	3d10      	subs	r5, #16
1a007b36:	2d10      	cmp	r5, #16
1a007b38:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a007b3c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007b40:	dce7      	bgt.n	1a007b12 <_vfprintf_r+0xcb2>
1a007b42:	3301      	adds	r3, #1
1a007b44:	4aa7      	ldr	r2, [pc, #668]	; (1a007de4 <_vfprintf_r+0xf84>)
1a007b46:	442c      	add	r4, r5
1a007b48:	2b07      	cmp	r3, #7
1a007b4a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a007b4e:	e9cb 2500 	strd	r2, r5, [fp]
1a007b52:	f77f ac23 	ble.w	1a00739c <_vfprintf_r+0x53c>
1a007b56:	aa28      	add	r2, sp, #160	; 0xa0
1a007b58:	9907      	ldr	r1, [sp, #28]
1a007b5a:	9805      	ldr	r0, [sp, #20]
1a007b5c:	f002 ffbc 	bl	1a00aad8 <__sprint_r>
1a007b60:	2800      	cmp	r0, #0
1a007b62:	f47f af15 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a007b66:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007b68:	e418      	b.n	1a00739c <_vfprintf_r+0x53c>
1a007b6a:	2b01      	cmp	r3, #1
1a007b6c:	f000 8423 	beq.w	1a0083b6 <_vfprintf_r+0x1556>
1a007b70:	2b02      	cmp	r3, #2
1a007b72:	9e02      	ldr	r6, [sp, #8]
1a007b74:	f47f ab87 	bne.w	1a007286 <_vfprintf_r+0x426>
1a007b78:	9814      	ldr	r0, [sp, #80]	; 0x50
1a007b7a:	af54      	add	r7, sp, #336	; 0x150
1a007b7c:	0923      	lsrs	r3, r4, #4
1a007b7e:	f004 010f 	and.w	r1, r4, #15
1a007b82:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a007b86:	092a      	lsrs	r2, r5, #4
1a007b88:	461c      	mov	r4, r3
1a007b8a:	4615      	mov	r5, r2
1a007b8c:	5c43      	ldrb	r3, [r0, r1]
1a007b8e:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a007b92:	ea54 0305 	orrs.w	r3, r4, r5
1a007b96:	d1f1      	bne.n	1a007b7c <_vfprintf_r+0xd1c>
1a007b98:	ab54      	add	r3, sp, #336	; 0x150
1a007b9a:	9602      	str	r6, [sp, #8]
1a007b9c:	1bde      	subs	r6, r3, r7
1a007b9e:	e5c1      	b.n	1a007724 <_vfprintf_r+0x8c4>
1a007ba0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007ba2:	2b00      	cmp	r3, #0
1a007ba4:	f340 80df 	ble.w	1a007d66 <_vfprintf_r+0xf06>
1a007ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007baa:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007bac:	4293      	cmp	r3, r2
1a007bae:	bfa8      	it	ge
1a007bb0:	4613      	movge	r3, r2
1a007bb2:	2b00      	cmp	r3, #0
1a007bb4:	461d      	mov	r5, r3
1a007bb6:	dd0d      	ble.n	1a007bd4 <_vfprintf_r+0xd74>
1a007bb8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a007bba:	f8cb 7000 	str.w	r7, [fp]
1a007bbe:	3301      	adds	r3, #1
1a007bc0:	442c      	add	r4, r5
1a007bc2:	2b07      	cmp	r3, #7
1a007bc4:	942a      	str	r4, [sp, #168]	; 0xa8
1a007bc6:	f8cb 5004 	str.w	r5, [fp, #4]
1a007bca:	9329      	str	r3, [sp, #164]	; 0xa4
1a007bcc:	f300 84fe 	bgt.w	1a0085cc <_vfprintf_r+0x176c>
1a007bd0:	f10b 0b08 	add.w	fp, fp, #8
1a007bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007bd6:	2d00      	cmp	r5, #0
1a007bd8:	bfa8      	it	ge
1a007bda:	1b5b      	subge	r3, r3, r5
1a007bdc:	2b00      	cmp	r3, #0
1a007bde:	461d      	mov	r5, r3
1a007be0:	f300 8290 	bgt.w	1a008104 <_vfprintf_r+0x12a4>
1a007be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007be6:	443b      	add	r3, r7
1a007be8:	4699      	mov	r9, r3
1a007bea:	9b02      	ldr	r3, [sp, #8]
1a007bec:	0558      	lsls	r0, r3, #21
1a007bee:	f100 8413 	bmi.w	1a008418 <_vfprintf_r+0x15b8>
1a007bf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007bf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007bf6:	4293      	cmp	r3, r2
1a007bf8:	db03      	blt.n	1a007c02 <_vfprintf_r+0xda2>
1a007bfa:	9a02      	ldr	r2, [sp, #8]
1a007bfc:	07d1      	lsls	r1, r2, #31
1a007bfe:	f140 82f7 	bpl.w	1a0081f0 <_vfprintf_r+0x1390>
1a007c02:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007c04:	9915      	ldr	r1, [sp, #84]	; 0x54
1a007c06:	f8cb 1000 	str.w	r1, [fp]
1a007c0a:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a007c0c:	f8cb 1004 	str.w	r1, [fp, #4]
1a007c10:	3201      	adds	r2, #1
1a007c12:	440c      	add	r4, r1
1a007c14:	2a07      	cmp	r2, #7
1a007c16:	942a      	str	r4, [sp, #168]	; 0xa8
1a007c18:	9229      	str	r2, [sp, #164]	; 0xa4
1a007c1a:	f300 8523 	bgt.w	1a008664 <_vfprintf_r+0x1804>
1a007c1e:	f10b 0b08 	add.w	fp, fp, #8
1a007c22:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007c24:	18bd      	adds	r5, r7, r2
1a007c26:	eba5 0509 	sub.w	r5, r5, r9
1a007c2a:	1ad3      	subs	r3, r2, r3
1a007c2c:	429d      	cmp	r5, r3
1a007c2e:	bfa8      	it	ge
1a007c30:	461d      	movge	r5, r3
1a007c32:	2d00      	cmp	r5, #0
1a007c34:	dd0d      	ble.n	1a007c52 <_vfprintf_r+0xdf2>
1a007c36:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007c38:	f8cb 9000 	str.w	r9, [fp]
1a007c3c:	3201      	adds	r2, #1
1a007c3e:	442c      	add	r4, r5
1a007c40:	2a07      	cmp	r2, #7
1a007c42:	942a      	str	r4, [sp, #168]	; 0xa8
1a007c44:	f8cb 5004 	str.w	r5, [fp, #4]
1a007c48:	9229      	str	r2, [sp, #164]	; 0xa4
1a007c4a:	f300 8546 	bgt.w	1a0086da <_vfprintf_r+0x187a>
1a007c4e:	f10b 0b08 	add.w	fp, fp, #8
1a007c52:	2d00      	cmp	r5, #0
1a007c54:	bfac      	ite	ge
1a007c56:	1b5d      	subge	r5, r3, r5
1a007c58:	461d      	movlt	r5, r3
1a007c5a:	2d00      	cmp	r5, #0
1a007c5c:	f77f ab95 	ble.w	1a00738a <_vfprintf_r+0x52a>
1a007c60:	2d10      	cmp	r5, #16
1a007c62:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007c64:	4b60      	ldr	r3, [pc, #384]	; (1a007de8 <_vfprintf_r+0xf88>)
1a007c66:	f340 823b 	ble.w	1a0080e0 <_vfprintf_r+0x1280>
1a007c6a:	2610      	movs	r6, #16
1a007c6c:	9f05      	ldr	r7, [sp, #20]
1a007c6e:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a007c72:	4699      	mov	r9, r3
1a007c74:	e005      	b.n	1a007c82 <_vfprintf_r+0xe22>
1a007c76:	f10b 0b08 	add.w	fp, fp, #8
1a007c7a:	3d10      	subs	r5, #16
1a007c7c:	2d10      	cmp	r5, #16
1a007c7e:	f340 822e 	ble.w	1a0080de <_vfprintf_r+0x127e>
1a007c82:	3201      	adds	r2, #1
1a007c84:	3410      	adds	r4, #16
1a007c86:	2a07      	cmp	r2, #7
1a007c88:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007c8c:	e9cb 9600 	strd	r9, r6, [fp]
1a007c90:	ddf1      	ble.n	1a007c76 <_vfprintf_r+0xe16>
1a007c92:	aa28      	add	r2, sp, #160	; 0xa0
1a007c94:	4641      	mov	r1, r8
1a007c96:	4638      	mov	r0, r7
1a007c98:	f002 ff1e 	bl	1a00aad8 <__sprint_r>
1a007c9c:	2800      	cmp	r0, #0
1a007c9e:	f040 8210 	bne.w	1a0080c2 <_vfprintf_r+0x1262>
1a007ca2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a007ca6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007caa:	e7e6      	b.n	1a007c7a <_vfprintf_r+0xe1a>
1a007cac:	9a02      	ldr	r2, [sp, #8]
1a007cae:	07d2      	lsls	r2, r2, #31
1a007cb0:	f53f aea4 	bmi.w	1a0079fc <_vfprintf_r+0xb9c>
1a007cb4:	2201      	movs	r2, #1
1a007cb6:	2d07      	cmp	r5, #7
1a007cb8:	f8cb 7000 	str.w	r7, [fp]
1a007cbc:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a007cc0:	f8cb 2004 	str.w	r2, [fp, #4]
1a007cc4:	f300 818e 	bgt.w	1a007fe4 <_vfprintf_r+0x1184>
1a007cc8:	3302      	adds	r3, #2
1a007cca:	930a      	str	r3, [sp, #40]	; 0x28
1a007ccc:	f10b 0b10 	add.w	fp, fp, #16
1a007cd0:	e6d0      	b.n	1a007a74 <_vfprintf_r+0xc14>
1a007cd2:	f1b8 0f00 	cmp.w	r8, #0
1a007cd6:	f77f aecd 	ble.w	1a007a74 <_vfprintf_r+0xc14>
1a007cda:	f1b8 0f10 	cmp.w	r8, #16
1a007cde:	4b42      	ldr	r3, [pc, #264]	; (1a007de8 <_vfprintf_r+0xf88>)
1a007ce0:	f340 8635 	ble.w	1a00894e <_vfprintf_r+0x1aee>
1a007ce4:	461a      	mov	r2, r3
1a007ce6:	464d      	mov	r5, r9
1a007ce8:	4623      	mov	r3, r4
1a007cea:	2710      	movs	r7, #16
1a007cec:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a007cf0:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a007cf4:	4614      	mov	r4, r2
1a007cf6:	e007      	b.n	1a007d08 <_vfprintf_r+0xea8>
1a007cf8:	3608      	adds	r6, #8
1a007cfa:	f1a8 0810 	sub.w	r8, r8, #16
1a007cfe:	f1b8 0f10 	cmp.w	r8, #16
1a007d02:	f340 815e 	ble.w	1a007fc2 <_vfprintf_r+0x1162>
1a007d06:	3501      	adds	r5, #1
1a007d08:	3310      	adds	r3, #16
1a007d0a:	2d07      	cmp	r5, #7
1a007d0c:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a007d10:	e9c6 4700 	strd	r4, r7, [r6]
1a007d14:	ddf0      	ble.n	1a007cf8 <_vfprintf_r+0xe98>
1a007d16:	aa28      	add	r2, sp, #160	; 0xa0
1a007d18:	4659      	mov	r1, fp
1a007d1a:	4648      	mov	r0, r9
1a007d1c:	f002 fedc 	bl	1a00aad8 <__sprint_r>
1a007d20:	2800      	cmp	r0, #0
1a007d22:	f040 821d 	bne.w	1a008160 <_vfprintf_r+0x1300>
1a007d26:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a007d2a:	ae2b      	add	r6, sp, #172	; 0xac
1a007d2c:	e7e5      	b.n	1a007cfa <_vfprintf_r+0xe9a>
1a007d2e:	aa28      	add	r2, sp, #160	; 0xa0
1a007d30:	9907      	ldr	r1, [sp, #28]
1a007d32:	9805      	ldr	r0, [sp, #20]
1a007d34:	f002 fed0 	bl	1a00aad8 <__sprint_r>
1a007d38:	2800      	cmp	r0, #0
1a007d3a:	f47f ae29 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a007d3e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007d40:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007d44:	f7ff bb0f 	b.w	1a007366 <_vfprintf_r+0x506>
1a007d48:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a007d4c:	f7fe fbac 	bl	1a0064a8 <__retarget_lock_acquire_recursive>
1a007d50:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a007d54:	b293      	uxth	r3, r2
1a007d56:	f7ff b8a3 	b.w	1a006ea0 <_vfprintf_r+0x40>
1a007d5a:	9b02      	ldr	r3, [sp, #8]
1a007d5c:	07dd      	lsls	r5, r3, #31
1a007d5e:	f53f ad57 	bmi.w	1a007810 <_vfprintf_r+0x9b0>
1a007d62:	f7ff bb12 	b.w	1a00738a <_vfprintf_r+0x52a>
1a007d66:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007d68:	4920      	ldr	r1, [pc, #128]	; (1a007dec <_vfprintf_r+0xf8c>)
1a007d6a:	f8cb 1000 	str.w	r1, [fp]
1a007d6e:	3201      	adds	r2, #1
1a007d70:	3401      	adds	r4, #1
1a007d72:	2101      	movs	r1, #1
1a007d74:	2a07      	cmp	r2, #7
1a007d76:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a007d7a:	f8cb 1004 	str.w	r1, [fp, #4]
1a007d7e:	f300 8409 	bgt.w	1a008594 <_vfprintf_r+0x1734>
1a007d82:	f10b 0b08 	add.w	fp, fp, #8
1a007d86:	2b00      	cmp	r3, #0
1a007d88:	f47f ae05 	bne.w	1a007996 <_vfprintf_r+0xb36>
1a007d8c:	9b02      	ldr	r3, [sp, #8]
1a007d8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a007d90:	f003 0301 	and.w	r3, r3, #1
1a007d94:	4313      	orrs	r3, r2
1a007d96:	f43f aaf8 	beq.w	1a00738a <_vfprintf_r+0x52a>
1a007d9a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a007d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a007d9e:	f8cb 3000 	str.w	r3, [fp]
1a007da2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007da4:	f8cb 3004 	str.w	r3, [fp, #4]
1a007da8:	3201      	adds	r2, #1
1a007daa:	441c      	add	r4, r3
1a007dac:	2a07      	cmp	r2, #7
1a007dae:	942a      	str	r4, [sp, #168]	; 0xa8
1a007db0:	9229      	str	r2, [sp, #164]	; 0xa4
1a007db2:	f300 82df 	bgt.w	1a008374 <_vfprintf_r+0x1514>
1a007db6:	f10b 0b08 	add.w	fp, fp, #8
1a007dba:	e5ff      	b.n	1a0079bc <_vfprintf_r+0xb5c>
1a007dbc:	af54      	add	r7, sp, #336	; 0x150
1a007dbe:	e4b1      	b.n	1a007724 <_vfprintf_r+0x8c4>
1a007dc0:	9b02      	ldr	r3, [sp, #8]
1a007dc2:	0598      	lsls	r0, r3, #22
1a007dc4:	f100 822d 	bmi.w	1a008222 <_vfprintf_r+0x13c2>
1a007dc8:	2500      	movs	r5, #0
1a007dca:	f7ff b987 	b.w	1a0070dc <_vfprintf_r+0x27c>
1a007dce:	9904      	ldr	r1, [sp, #16]
1a007dd0:	6812      	ldr	r2, [r2, #0]
1a007dd2:	9308      	str	r3, [sp, #32]
1a007dd4:	17cd      	asrs	r5, r1, #31
1a007dd6:	4608      	mov	r0, r1
1a007dd8:	4629      	mov	r1, r5
1a007dda:	e9c2 0100 	strd	r0, r1, [r2]
1a007dde:	4657      	mov	r7, sl
1a007de0:	f7ff baf2 	b.w	1a0073c8 <_vfprintf_r+0x568>
1a007de4:	1a00b2bc 	.word	0x1a00b2bc
1a007de8:	1a00b2cc 	.word	0x1a00b2cc
1a007dec:	1a00b2b8 	.word	0x1a00b2b8
1a007df0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a007df4:	4602      	mov	r2, r0
1a007df6:	460b      	mov	r3, r1
1a007df8:	f002 ffc6 	bl	1a00ad88 <__aeabi_dcmpun>
1a007dfc:	2800      	cmp	r0, #0
1a007dfe:	f040 853a 	bne.w	1a008876 <_vfprintf_r+0x1a16>
1a007e02:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a007e06:	f000 84d0 	beq.w	1a0087aa <_vfprintf_r+0x194a>
1a007e0a:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a007e0e:	f000 820c 	beq.w	1a00822a <_vfprintf_r+0x13ca>
1a007e12:	f028 0320 	bic.w	r3, r8, #32
1a007e16:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a007e1a:	9303      	str	r3, [sp, #12]
1a007e1c:	f000 8500 	beq.w	1a008820 <_vfprintf_r+0x19c0>
1a007e20:	2b47      	cmp	r3, #71	; 0x47
1a007e22:	d104      	bne.n	1a007e2e <_vfprintf_r+0xfce>
1a007e24:	f1b9 0f00 	cmp.w	r9, #0
1a007e28:	bf08      	it	eq
1a007e2a:	f04f 0901 	moveq.w	r9, #1
1a007e2e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a007e32:	9902      	ldr	r1, [sp, #8]
1a007e34:	2d00      	cmp	r5, #0
1a007e36:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a007e3a:	f2c0 8395 	blt.w	1a008568 <_vfprintf_r+0x1708>
1a007e3e:	2300      	movs	r3, #0
1a007e40:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
1a007e44:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a007e48:	931e      	str	r3, [sp, #120]	; 0x78
1a007e4a:	9202      	str	r2, [sp, #8]
1a007e4c:	9b03      	ldr	r3, [sp, #12]
1a007e4e:	2b46      	cmp	r3, #70	; 0x46
1a007e50:	f000 83df 	beq.w	1a008612 <_vfprintf_r+0x17b2>
1a007e54:	2b45      	cmp	r3, #69	; 0x45
1a007e56:	f000 84d2 	beq.w	1a0087fe <_vfprintf_r+0x199e>
1a007e5a:	aa26      	add	r2, sp, #152	; 0x98
1a007e5c:	ab23      	add	r3, sp, #140	; 0x8c
1a007e5e:	e9cd 3200 	strd	r3, r2, [sp]
1a007e62:	2102      	movs	r1, #2
1a007e64:	ab22      	add	r3, sp, #136	; 0x88
1a007e66:	464a      	mov	r2, r9
1a007e68:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a007e6c:	9805      	ldr	r0, [sp, #20]
1a007e6e:	f000 fedf 	bl	1a008c30 <_dtoa_r>
1a007e72:	9b03      	ldr	r3, [sp, #12]
1a007e74:	2b47      	cmp	r3, #71	; 0x47
1a007e76:	4607      	mov	r7, r0
1a007e78:	f040 858d 	bne.w	1a008996 <_vfprintf_r+0x1b36>
1a007e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007e7e:	07db      	lsls	r3, r3, #31
1a007e80:	f100 843b 	bmi.w	1a0086fa <_vfprintf_r+0x189a>
1a007e84:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a007e86:	1bf3      	subs	r3, r6, r7
1a007e88:	9312      	str	r3, [sp, #72]	; 0x48
1a007e8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a007e8c:	930e      	str	r3, [sp, #56]	; 0x38
1a007e8e:	9b03      	ldr	r3, [sp, #12]
1a007e90:	2b47      	cmp	r3, #71	; 0x47
1a007e92:	f000 8293 	beq.w	1a0083bc <_vfprintf_r+0x155c>
1a007e96:	9b03      	ldr	r3, [sp, #12]
1a007e98:	2b46      	cmp	r3, #70	; 0x46
1a007e9a:	f000 83fd 	beq.w	1a008698 <_vfprintf_r+0x1838>
1a007e9e:	9903      	ldr	r1, [sp, #12]
1a007ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a007ea2:	2941      	cmp	r1, #65	; 0x41
1a007ea4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a007ea8:	fa5f f388 	uxtb.w	r3, r8
1a007eac:	bf03      	ittte	eq
1a007eae:	330f      	addeq	r3, #15
1a007eb0:	b2db      	uxtbeq	r3, r3
1a007eb2:	2101      	moveq	r1, #1
1a007eb4:	2100      	movne	r1, #0
1a007eb6:	2a00      	cmp	r2, #0
1a007eb8:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a007ebc:	bfb8      	it	lt
1a007ebe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a007ec0:	9222      	str	r2, [sp, #136]	; 0x88
1a007ec2:	bfb6      	itet	lt
1a007ec4:	f1c3 0201 	rsblt	r2, r3, #1
1a007ec8:	232b      	movge	r3, #43	; 0x2b
1a007eca:	232d      	movlt	r3, #45	; 0x2d
1a007ecc:	2a09      	cmp	r2, #9
1a007ece:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a007ed2:	f340 84c1 	ble.w	1a008858 <_vfprintf_r+0x19f8>
1a007ed6:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a007eda:	4620      	mov	r0, r4
1a007edc:	4dbe      	ldr	r5, [pc, #760]	; (1a0081d8 <_vfprintf_r+0x1378>)
1a007ede:	e001      	b.n	1a007ee4 <_vfprintf_r+0x1084>
1a007ee0:	4608      	mov	r0, r1
1a007ee2:	461a      	mov	r2, r3
1a007ee4:	fb85 3102 	smull	r3, r1, r5, r2
1a007ee8:	17d3      	asrs	r3, r2, #31
1a007eea:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a007eee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a007ef2:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a007ef6:	3130      	adds	r1, #48	; 0x30
1a007ef8:	2a63      	cmp	r2, #99	; 0x63
1a007efa:	f800 1c01 	strb.w	r1, [r0, #-1]
1a007efe:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a007f02:	dced      	bgt.n	1a007ee0 <_vfprintf_r+0x1080>
1a007f04:	3330      	adds	r3, #48	; 0x30
1a007f06:	1e82      	subs	r2, r0, #2
1a007f08:	b2db      	uxtb	r3, r3
1a007f0a:	4294      	cmp	r4, r2
1a007f0c:	f801 3c01 	strb.w	r3, [r1, #-1]
1a007f10:	f240 8544 	bls.w	1a00899c <_vfprintf_r+0x1b3c>
1a007f14:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a007f18:	e001      	b.n	1a007f1e <_vfprintf_r+0x10be>
1a007f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a007f1e:	f802 3b01 	strb.w	r3, [r2], #1
1a007f22:	42a1      	cmp	r1, r4
1a007f24:	d1f9      	bne.n	1a007f1a <_vfprintf_r+0x10ba>
1a007f26:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a007f2a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a007f2e:	1a1b      	subs	r3, r3, r0
1a007f30:	4413      	add	r3, r2
1a007f32:	aa24      	add	r2, sp, #144	; 0x90
1a007f34:	1a9b      	subs	r3, r3, r2
1a007f36:	9316      	str	r3, [sp, #88]	; 0x58
1a007f38:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a007f3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a007f3c:	2b01      	cmp	r3, #1
1a007f3e:	eb03 0602 	add.w	r6, r3, r2
1a007f42:	f340 84ee 	ble.w	1a008922 <_vfprintf_r+0x1ac2>
1a007f46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a007f48:	441e      	add	r6, r3
1a007f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007f4c:	2200      	movs	r2, #0
1a007f4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a007f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a007f56:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a007f5a:	9302      	str	r3, [sp, #8]
1a007f5c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a007f60:	920c      	str	r2, [sp, #48]	; 0x30
1a007f62:	9303      	str	r3, [sp, #12]
1a007f64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a007f66:	2b00      	cmp	r3, #0
1a007f68:	f040 824f 	bne.w	1a00840a <_vfprintf_r+0x15aa>
1a007f6c:	4699      	mov	r9, r3
1a007f6e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a007f72:	f7ff b94a 	b.w	1a00720a <_vfprintf_r+0x3aa>
1a007f76:	9b08      	ldr	r3, [sp, #32]
1a007f78:	1d1a      	adds	r2, r3, #4
1a007f7a:	9b02      	ldr	r3, [sp, #8]
1a007f7c:	06d9      	lsls	r1, r3, #27
1a007f7e:	f100 8504 	bmi.w	1a00898a <_vfprintf_r+0x1b2a>
1a007f82:	9e02      	ldr	r6, [sp, #8]
1a007f84:	4633      	mov	r3, r6
1a007f86:	065b      	lsls	r3, r3, #25
1a007f88:	f140 80ec 	bpl.w	1a008164 <_vfprintf_r+0x1304>
1a007f8c:	9b08      	ldr	r3, [sp, #32]
1a007f8e:	9208      	str	r2, [sp, #32]
1a007f90:	f9b3 4000 	ldrsh.w	r4, [r3]
1a007f94:	17e5      	asrs	r5, r4, #31
1a007f96:	4622      	mov	r2, r4
1a007f98:	462b      	mov	r3, r5
1a007f9a:	f7ff b8eb 	b.w	1a007174 <_vfprintf_r+0x314>
1a007f9e:	4252      	negs	r2, r2
1a007fa0:	9206      	str	r2, [sp, #24]
1a007fa2:	9308      	str	r3, [sp, #32]
1a007fa4:	f7ff b8af 	b.w	1a007106 <_vfprintf_r+0x2a6>
1a007fa8:	aa28      	add	r2, sp, #160	; 0xa0
1a007faa:	9907      	ldr	r1, [sp, #28]
1a007fac:	9805      	ldr	r0, [sp, #20]
1a007fae:	f002 fd93 	bl	1a00aad8 <__sprint_r>
1a007fb2:	2800      	cmp	r0, #0
1a007fb4:	f47f acec 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a007fb8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a007fba:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a007fbe:	f7ff b9cd 	b.w	1a00735c <_vfprintf_r+0x4fc>
1a007fc2:	4622      	mov	r2, r4
1a007fc4:	461c      	mov	r4, r3
1a007fc6:	4613      	mov	r3, r2
1a007fc8:	462a      	mov	r2, r5
1a007fca:	3201      	adds	r2, #1
1a007fcc:	920a      	str	r2, [sp, #40]	; 0x28
1a007fce:	f106 0208 	add.w	r2, r6, #8
1a007fd2:	e9c6 3800 	strd	r3, r8, [r6]
1a007fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007fd8:	9329      	str	r3, [sp, #164]	; 0xa4
1a007fda:	4444      	add	r4, r8
1a007fdc:	2b07      	cmp	r3, #7
1a007fde:	942a      	str	r4, [sp, #168]	; 0xa8
1a007fe0:	f340 8100 	ble.w	1a0081e4 <_vfprintf_r+0x1384>
1a007fe4:	aa28      	add	r2, sp, #160	; 0xa0
1a007fe6:	9907      	ldr	r1, [sp, #28]
1a007fe8:	9805      	ldr	r0, [sp, #20]
1a007fea:	f002 fd75 	bl	1a00aad8 <__sprint_r>
1a007fee:	2800      	cmp	r0, #0
1a007ff0:	f47f acce 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a007ff4:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a007ff8:	3301      	adds	r3, #1
1a007ffa:	930a      	str	r3, [sp, #40]	; 0x28
1a007ffc:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a008000:	ae2b      	add	r6, sp, #172	; 0xac
1a008002:	e537      	b.n	1a007a74 <_vfprintf_r+0xc14>
1a008004:	aa28      	add	r2, sp, #160	; 0xa0
1a008006:	9907      	ldr	r1, [sp, #28]
1a008008:	9805      	ldr	r0, [sp, #20]
1a00800a:	f002 fd65 	bl	1a00aad8 <__sprint_r>
1a00800e:	2800      	cmp	r0, #0
1a008010:	f47f acbe 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a008014:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008016:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00801a:	e409      	b.n	1a007830 <_vfprintf_r+0x9d0>
1a00801c:	f043 0320 	orr.w	r3, r3, #32
1a008020:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a008024:	9302      	str	r3, [sp, #8]
1a008026:	f10a 0a01 	add.w	sl, sl, #1
1a00802a:	f7fe bf9d 	b.w	1a006f68 <_vfprintf_r+0x108>
1a00802e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a008032:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a008036:	9302      	str	r3, [sp, #8]
1a008038:	f10a 0a01 	add.w	sl, sl, #1
1a00803c:	f7fe bf94 	b.w	1a006f68 <_vfprintf_r+0x108>
1a008040:	464e      	mov	r6, r9
1a008042:	2e06      	cmp	r6, #6
1a008044:	bf28      	it	cs
1a008046:	2606      	movcs	r6, #6
1a008048:	46b9      	mov	r9, r7
1a00804a:	970c      	str	r7, [sp, #48]	; 0x30
1a00804c:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
1a008050:	9709      	str	r7, [sp, #36]	; 0x24
1a008052:	463a      	mov	r2, r7
1a008054:	9603      	str	r6, [sp, #12]
1a008056:	9408      	str	r4, [sp, #32]
1a008058:	4f60      	ldr	r7, [pc, #384]	; (1a0081dc <_vfprintf_r+0x137c>)
1a00805a:	f7ff b8d6 	b.w	1a00720a <_vfprintf_r+0x3aa>
1a00805e:	463c      	mov	r4, r7
1a008060:	f7fe bf75 	b.w	1a006f4e <_vfprintf_r+0xee>
1a008064:	aa28      	add	r2, sp, #160	; 0xa0
1a008066:	9907      	ldr	r1, [sp, #28]
1a008068:	9805      	ldr	r0, [sp, #20]
1a00806a:	f002 fd35 	bl	1a00aad8 <__sprint_r>
1a00806e:	2800      	cmp	r0, #0
1a008070:	f47f ac8e 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a008074:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a008078:	ae2b      	add	r6, sp, #172	; 0xac
1a00807a:	e4c9      	b.n	1a007a10 <_vfprintf_r+0xbb0>
1a00807c:	aa28      	add	r2, sp, #160	; 0xa0
1a00807e:	9907      	ldr	r1, [sp, #28]
1a008080:	9805      	ldr	r0, [sp, #20]
1a008082:	f002 fd29 	bl	1a00aad8 <__sprint_r>
1a008086:	2800      	cmp	r0, #0
1a008088:	f47f ac82 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a00808c:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a008090:	ae2b      	add	r6, sp, #172	; 0xac
1a008092:	930b      	str	r3, [sp, #44]	; 0x2c
1a008094:	e4c9      	b.n	1a007a2a <_vfprintf_r+0xbca>
1a008096:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a00809a:	f7fe fa07 	bl	1a0064ac <__retarget_lock_release_recursive>
1a00809e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0080a2:	e51d      	b.n	1a007ae0 <_vfprintf_r+0xc80>
1a0080a4:	aa28      	add	r2, sp, #160	; 0xa0
1a0080a6:	9907      	ldr	r1, [sp, #28]
1a0080a8:	9805      	ldr	r0, [sp, #20]
1a0080aa:	f002 fd15 	bl	1a00aad8 <__sprint_r>
1a0080ae:	2800      	cmp	r0, #0
1a0080b0:	f47f ac6e 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a0080b4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0080b8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0080ba:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0080be:	f7ff b929 	b.w	1a007314 <_vfprintf_r+0x4b4>
1a0080c2:	46c1      	mov	r9, r8
1a0080c4:	e4fe      	b.n	1a007ac4 <_vfprintf_r+0xc64>
1a0080c6:	aa28      	add	r2, sp, #160	; 0xa0
1a0080c8:	9907      	ldr	r1, [sp, #28]
1a0080ca:	9805      	ldr	r0, [sp, #20]
1a0080cc:	f002 fd04 	bl	1a00aad8 <__sprint_r>
1a0080d0:	2800      	cmp	r0, #0
1a0080d2:	f47f ac5d 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a0080d6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0080da:	f7ff bb93 	b.w	1a007804 <_vfprintf_r+0x9a4>
1a0080de:	464b      	mov	r3, r9
1a0080e0:	3201      	adds	r2, #1
1a0080e2:	442c      	add	r4, r5
1a0080e4:	2a07      	cmp	r2, #7
1a0080e6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0080ea:	e9cb 3500 	strd	r3, r5, [fp]
1a0080ee:	f77f a94a 	ble.w	1a007386 <_vfprintf_r+0x526>
1a0080f2:	e46d      	b.n	1a0079d0 <_vfprintf_r+0xb70>
1a0080f4:	9a08      	ldr	r2, [sp, #32]
1a0080f6:	6812      	ldr	r2, [r2, #0]
1a0080f8:	9308      	str	r3, [sp, #32]
1a0080fa:	9b04      	ldr	r3, [sp, #16]
1a0080fc:	6013      	str	r3, [r2, #0]
1a0080fe:	4657      	mov	r7, sl
1a008100:	f7ff b962 	b.w	1a0073c8 <_vfprintf_r+0x568>
1a008104:	2d10      	cmp	r5, #16
1a008106:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a008108:	4b35      	ldr	r3, [pc, #212]	; (1a0081e0 <_vfprintf_r+0x1380>)
1a00810a:	dd50      	ble.n	1a0081ae <_vfprintf_r+0x134e>
1a00810c:	4619      	mov	r1, r3
1a00810e:	2610      	movs	r6, #16
1a008110:	4623      	mov	r3, r4
1a008112:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a008116:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00811a:	460c      	mov	r4, r1
1a00811c:	e004      	b.n	1a008128 <_vfprintf_r+0x12c8>
1a00811e:	f10b 0b08 	add.w	fp, fp, #8
1a008122:	3d10      	subs	r5, #16
1a008124:	2d10      	cmp	r5, #16
1a008126:	dd3f      	ble.n	1a0081a8 <_vfprintf_r+0x1348>
1a008128:	3201      	adds	r2, #1
1a00812a:	3310      	adds	r3, #16
1a00812c:	2a07      	cmp	r2, #7
1a00812e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a008132:	e9cb 4600 	strd	r4, r6, [fp]
1a008136:	ddf2      	ble.n	1a00811e <_vfprintf_r+0x12be>
1a008138:	aa28      	add	r2, sp, #160	; 0xa0
1a00813a:	4649      	mov	r1, r9
1a00813c:	4640      	mov	r0, r8
1a00813e:	f002 fccb 	bl	1a00aad8 <__sprint_r>
1a008142:	2800      	cmp	r0, #0
1a008144:	f47f acbe 	bne.w	1a007ac4 <_vfprintf_r+0xc64>
1a008148:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a00814c:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a008150:	e7e7      	b.n	1a008122 <_vfprintf_r+0x12c2>
1a008152:	4638      	mov	r0, r7
1a008154:	f7fe fe14 	bl	1a006d80 <strlen>
1a008158:	46a9      	mov	r9, r5
1a00815a:	4606      	mov	r6, r0
1a00815c:	f7ff b849 	b.w	1a0071f2 <_vfprintf_r+0x392>
1a008160:	46d9      	mov	r9, fp
1a008162:	e4af      	b.n	1a007ac4 <_vfprintf_r+0xc64>
1a008164:	9e02      	ldr	r6, [sp, #8]
1a008166:	9b08      	ldr	r3, [sp, #32]
1a008168:	f416 7f00 	tst.w	r6, #512	; 0x200
1a00816c:	d051      	beq.n	1a008212 <_vfprintf_r+0x13b2>
1a00816e:	f993 4000 	ldrsb.w	r4, [r3]
1a008172:	9208      	str	r2, [sp, #32]
1a008174:	17e5      	asrs	r5, r4, #31
1a008176:	4622      	mov	r2, r4
1a008178:	462b      	mov	r3, r5
1a00817a:	f7fe bffb 	b.w	1a007174 <_vfprintf_r+0x314>
1a00817e:	9e02      	ldr	r6, [sp, #8]
1a008180:	05b7      	lsls	r7, r6, #22
1a008182:	bf47      	ittee	mi
1a008184:	9208      	strmi	r2, [sp, #32]
1a008186:	b2e4      	uxtbmi	r4, r4
1a008188:	9e02      	ldrpl	r6, [sp, #8]
1a00818a:	9208      	strpl	r2, [sp, #32]
1a00818c:	2500      	movs	r5, #0
1a00818e:	f7ff baae 	b.w	1a0076ee <_vfprintf_r+0x88e>
1a008192:	9e02      	ldr	r6, [sp, #8]
1a008194:	9208      	str	r2, [sp, #32]
1a008196:	4633      	mov	r3, r6
1a008198:	059b      	lsls	r3, r3, #22
1a00819a:	bf4c      	ite	mi
1a00819c:	b2e4      	uxtbmi	r4, r4
1a00819e:	9e02      	ldrpl	r6, [sp, #8]
1a0081a0:	2500      	movs	r5, #0
1a0081a2:	2301      	movs	r3, #1
1a0081a4:	f7ff b987 	b.w	1a0074b6 <_vfprintf_r+0x656>
1a0081a8:	4621      	mov	r1, r4
1a0081aa:	461c      	mov	r4, r3
1a0081ac:	460b      	mov	r3, r1
1a0081ae:	3201      	adds	r2, #1
1a0081b0:	442c      	add	r4, r5
1a0081b2:	2a07      	cmp	r2, #7
1a0081b4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0081b8:	e9cb 3500 	strd	r3, r5, [fp]
1a0081bc:	f300 80ef 	bgt.w	1a00839e <_vfprintf_r+0x153e>
1a0081c0:	f10b 0b08 	add.w	fp, fp, #8
1a0081c4:	e50e      	b.n	1a007be4 <_vfprintf_r+0xd84>
1a0081c6:	9805      	ldr	r0, [sp, #20]
1a0081c8:	aa28      	add	r2, sp, #160	; 0xa0
1a0081ca:	4649      	mov	r1, r9
1a0081cc:	f002 fc84 	bl	1a00aad8 <__sprint_r>
1a0081d0:	2800      	cmp	r0, #0
1a0081d2:	f43f a903 	beq.w	1a0073dc <_vfprintf_r+0x57c>
1a0081d6:	e47a      	b.n	1a007ace <_vfprintf_r+0xc6e>
1a0081d8:	66666667 	.word	0x66666667
1a0081dc:	1a00b2b0 	.word	0x1a00b2b0
1a0081e0:	1a00b2cc 	.word	0x1a00b2cc
1a0081e4:	3301      	adds	r3, #1
1a0081e6:	930a      	str	r3, [sp, #40]	; 0x28
1a0081e8:	f102 0b08 	add.w	fp, r2, #8
1a0081ec:	4616      	mov	r6, r2
1a0081ee:	e441      	b.n	1a007a74 <_vfprintf_r+0xc14>
1a0081f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0081f2:	18bd      	adds	r5, r7, r2
1a0081f4:	eba5 0509 	sub.w	r5, r5, r9
1a0081f8:	1ad3      	subs	r3, r2, r3
1a0081fa:	429d      	cmp	r5, r3
1a0081fc:	bfa8      	it	ge
1a0081fe:	461d      	movge	r5, r3
1a008200:	e527      	b.n	1a007c52 <_vfprintf_r+0xdf2>
1a008202:	9a08      	ldr	r2, [sp, #32]
1a008204:	9308      	str	r3, [sp, #32]
1a008206:	6812      	ldr	r2, [r2, #0]
1a008208:	9b04      	ldr	r3, [sp, #16]
1a00820a:	8013      	strh	r3, [r2, #0]
1a00820c:	4657      	mov	r7, sl
1a00820e:	f7ff b8db 	b.w	1a0073c8 <_vfprintf_r+0x568>
1a008212:	681c      	ldr	r4, [r3, #0]
1a008214:	9208      	str	r2, [sp, #32]
1a008216:	17e5      	asrs	r5, r4, #31
1a008218:	9e02      	ldr	r6, [sp, #8]
1a00821a:	4622      	mov	r2, r4
1a00821c:	462b      	mov	r3, r5
1a00821e:	f7fe bfa9 	b.w	1a007174 <_vfprintf_r+0x314>
1a008222:	b2e4      	uxtb	r4, r4
1a008224:	2500      	movs	r5, #0
1a008226:	f7fe bf59 	b.w	1a0070dc <_vfprintf_r+0x27c>
1a00822a:	2330      	movs	r3, #48	; 0x30
1a00822c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a008230:	2358      	movs	r3, #88	; 0x58
1a008232:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a008236:	9b02      	ldr	r3, [sp, #8]
1a008238:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a00823c:	f043 0302 	orr.w	r3, r3, #2
1a008240:	930a      	str	r3, [sp, #40]	; 0x28
1a008242:	f300 82b7 	bgt.w	1a0087b4 <_vfprintf_r+0x1954>
1a008246:	2300      	movs	r3, #0
1a008248:	9309      	str	r3, [sp, #36]	; 0x24
1a00824a:	af3b      	add	r7, sp, #236	; 0xec
1a00824c:	9a02      	ldr	r2, [sp, #8]
1a00824e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a008250:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a008254:	9202      	str	r2, [sp, #8]
1a008256:	2b00      	cmp	r3, #0
1a008258:	f028 0220 	bic.w	r2, r8, #32
1a00825c:	9203      	str	r2, [sp, #12]
1a00825e:	f2c0 8188 	blt.w	1a008572 <_vfprintf_r+0x1712>
1a008262:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a008266:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a00826a:	2300      	movs	r3, #0
1a00826c:	931e      	str	r3, [sp, #120]	; 0x78
1a00826e:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a008272:	f000 82d9 	beq.w	1a008828 <_vfprintf_r+0x19c8>
1a008276:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a00827a:	f47f ade7 	bne.w	1a007e4c <_vfprintf_r+0xfec>
1a00827e:	a822      	add	r0, sp, #136	; 0x88
1a008280:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a008284:	f002 fb7c 	bl	1a00a980 <frexp>
1a008288:	2200      	movs	r2, #0
1a00828a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00828e:	ec51 0b10 	vmov	r0, r1, d0
1a008292:	f7fd f98d 	bl	1a0055b0 <__aeabi_dmul>
1a008296:	2200      	movs	r2, #0
1a008298:	2300      	movs	r3, #0
1a00829a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00829e:	f7fd fbef 	bl	1a005a80 <__aeabi_dcmpeq>
1a0082a2:	b108      	cbz	r0, 1a0082a8 <_vfprintf_r+0x1448>
1a0082a4:	2301      	movs	r3, #1
1a0082a6:	9322      	str	r3, [sp, #136]	; 0x88
1a0082a8:	4bb6      	ldr	r3, [pc, #728]	; (1a008584 <_vfprintf_r+0x1724>)
1a0082aa:	930b      	str	r3, [sp, #44]	; 0x2c
1a0082ac:	e9cd 8a0e 	strd	r8, sl, [sp, #56]	; 0x38
1a0082b0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
1a0082b4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
1a0082b8:	f8cd b07c 	str.w	fp, [sp, #124]	; 0x7c
1a0082bc:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a0082c0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a0082c4:	970c      	str	r7, [sp, #48]	; 0x30
1a0082c6:	46ba      	mov	sl, r7
1a0082c8:	e003      	b.n	1a0082d2 <_vfprintf_r+0x1472>
1a0082ca:	f7fd fbd9 	bl	1a005a80 <__aeabi_dcmpeq>
1a0082ce:	bb20      	cbnz	r0, 1a00831a <_vfprintf_r+0x14ba>
1a0082d0:	46b2      	mov	sl, r6
1a0082d2:	2200      	movs	r2, #0
1a0082d4:	4bac      	ldr	r3, [pc, #688]	; (1a008588 <_vfprintf_r+0x1728>)
1a0082d6:	4640      	mov	r0, r8
1a0082d8:	4649      	mov	r1, r9
1a0082da:	f7fd f969 	bl	1a0055b0 <__aeabi_dmul>
1a0082de:	4689      	mov	r9, r1
1a0082e0:	4680      	mov	r8, r0
1a0082e2:	f7fd fbff 	bl	1a005ae4 <__aeabi_d2iz>
1a0082e6:	4607      	mov	r7, r0
1a0082e8:	f7fd f8f8 	bl	1a0054dc <__aeabi_i2d>
1a0082ec:	4602      	mov	r2, r0
1a0082ee:	460b      	mov	r3, r1
1a0082f0:	4640      	mov	r0, r8
1a0082f2:	4649      	mov	r1, r9
1a0082f4:	f7fc ffa4 	bl	1a005240 <__aeabi_dsub>
1a0082f8:	4656      	mov	r6, sl
1a0082fa:	f81b 4007 	ldrb.w	r4, [fp, r7]
1a0082fe:	f806 4b01 	strb.w	r4, [r6], #1
1a008302:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a008306:	462c      	mov	r4, r5
1a008308:	4680      	mov	r8, r0
1a00830a:	4689      	mov	r9, r1
1a00830c:	f04f 0200 	mov.w	r2, #0
1a008310:	f04f 0300 	mov.w	r3, #0
1a008314:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a008318:	d1d7      	bne.n	1a0082ca <_vfprintf_r+0x146a>
1a00831a:	4640      	mov	r0, r8
1a00831c:	4649      	mov	r1, r9
1a00831e:	2200      	movs	r2, #0
1a008320:	4b9a      	ldr	r3, [pc, #616]	; (1a00858c <_vfprintf_r+0x172c>)
1a008322:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a008326:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
1a00832a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a00832e:	463d      	mov	r5, r7
1a008330:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
1a008334:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a008336:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a00833a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00833e:	f7fd fbc7 	bl	1a005ad0 <__aeabi_dcmpgt>
1a008342:	2800      	cmp	r0, #0
1a008344:	f040 8214 	bne.w	1a008770 <_vfprintf_r+0x1910>
1a008348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a00834c:	2200      	movs	r2, #0
1a00834e:	4b8f      	ldr	r3, [pc, #572]	; (1a00858c <_vfprintf_r+0x172c>)
1a008350:	f7fd fb96 	bl	1a005a80 <__aeabi_dcmpeq>
1a008354:	b118      	cbz	r0, 1a00835e <_vfprintf_r+0x14fe>
1a008356:	462b      	mov	r3, r5
1a008358:	07db      	lsls	r3, r3, #31
1a00835a:	f100 8209 	bmi.w	1a008770 <_vfprintf_r+0x1910>
1a00835e:	2c00      	cmp	r4, #0
1a008360:	f6ff ad91 	blt.w	1a007e86 <_vfprintf_r+0x1026>
1a008364:	1c63      	adds	r3, r4, #1
1a008366:	4433      	add	r3, r6
1a008368:	2230      	movs	r2, #48	; 0x30
1a00836a:	f806 2b01 	strb.w	r2, [r6], #1
1a00836e:	429e      	cmp	r6, r3
1a008370:	d1fb      	bne.n	1a00836a <_vfprintf_r+0x150a>
1a008372:	e588      	b.n	1a007e86 <_vfprintf_r+0x1026>
1a008374:	aa28      	add	r2, sp, #160	; 0xa0
1a008376:	9907      	ldr	r1, [sp, #28]
1a008378:	9805      	ldr	r0, [sp, #20]
1a00837a:	f002 fbad 	bl	1a00aad8 <__sprint_r>
1a00837e:	2800      	cmp	r0, #0
1a008380:	f47f ab06 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a008384:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008386:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a00838a:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00838e:	f7ff bb12 	b.w	1a0079b6 <_vfprintf_r+0xb56>
1a008392:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a008396:	f7fe f889 	bl	1a0064ac <__retarget_lock_release_recursive>
1a00839a:	f7fe be6a 	b.w	1a007072 <_vfprintf_r+0x212>
1a00839e:	aa28      	add	r2, sp, #160	; 0xa0
1a0083a0:	9907      	ldr	r1, [sp, #28]
1a0083a2:	9805      	ldr	r0, [sp, #20]
1a0083a4:	f002 fb98 	bl	1a00aad8 <__sprint_r>
1a0083a8:	2800      	cmp	r0, #0
1a0083aa:	f47f aaf1 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a0083ae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0083b0:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0083b4:	e416      	b.n	1a007be4 <_vfprintf_r+0xd84>
1a0083b6:	9e02      	ldr	r6, [sp, #8]
1a0083b8:	f7ff b9ad 	b.w	1a007716 <_vfprintf_r+0x8b6>
1a0083bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0083be:	1cde      	adds	r6, r3, #3
1a0083c0:	db01      	blt.n	1a0083c6 <_vfprintf_r+0x1566>
1a0083c2:	4599      	cmp	r9, r3
1a0083c4:	da05      	bge.n	1a0083d2 <_vfprintf_r+0x1572>
1a0083c6:	f1a8 0802 	sub.w	r8, r8, #2
1a0083ca:	f028 0320 	bic.w	r3, r8, #32
1a0083ce:	9303      	str	r3, [sp, #12]
1a0083d0:	e565      	b.n	1a007e9e <_vfprintf_r+0x103e>
1a0083d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0083d4:	4619      	mov	r1, r3
1a0083d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0083d8:	4299      	cmp	r1, r3
1a0083da:	f300 8174 	bgt.w	1a0086c6 <_vfprintf_r+0x1866>
1a0083de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0083e0:	07d4      	lsls	r4, r2, #31
1a0083e2:	f140 8254 	bpl.w	1a00888e <_vfprintf_r+0x1a2e>
1a0083e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0083e8:	189e      	adds	r6, r3, r2
1a0083ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0083ec:	0558      	lsls	r0, r3, #21
1a0083ee:	d503      	bpl.n	1a0083f8 <_vfprintf_r+0x1598>
1a0083f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0083f2:	2b00      	cmp	r3, #0
1a0083f4:	f300 824d 	bgt.w	1a008892 <_vfprintf_r+0x1a32>
1a0083f8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0083fc:	9303      	str	r3, [sp, #12]
1a0083fe:	f04f 0867 	mov.w	r8, #103	; 0x67
1a008402:	2300      	movs	r3, #0
1a008404:	930c      	str	r3, [sp, #48]	; 0x30
1a008406:	930f      	str	r3, [sp, #60]	; 0x3c
1a008408:	e5ac      	b.n	1a007f64 <_vfprintf_r+0x1104>
1a00840a:	222d      	movs	r2, #45	; 0x2d
1a00840c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a008410:	f04f 0900 	mov.w	r9, #0
1a008414:	f7fe befb 	b.w	1a00720e <_vfprintf_r+0x3ae>
1a008418:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00841a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a00841e:	18fb      	adds	r3, r7, r3
1a008420:	930a      	str	r3, [sp, #40]	; 0x28
1a008422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a008424:	970e      	str	r7, [sp, #56]	; 0x38
1a008426:	465a      	mov	r2, fp
1a008428:	464f      	mov	r7, r9
1a00842a:	4e59      	ldr	r6, [pc, #356]	; (1a008590 <_vfprintf_r+0x1730>)
1a00842c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a008430:	f8dd a014 	ldr.w	sl, [sp, #20]
1a008434:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a008438:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
1a00843c:	4621      	mov	r1, r4
1a00843e:	2b00      	cmp	r3, #0
1a008440:	d032      	beq.n	1a0084a8 <_vfprintf_r+0x1648>
1a008442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008444:	2b00      	cmp	r3, #0
1a008446:	d16e      	bne.n	1a008526 <_vfprintf_r+0x16c6>
1a008448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00844a:	3b01      	subs	r3, #1
1a00844c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a008450:	930f      	str	r3, [sp, #60]	; 0x3c
1a008452:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a008454:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a008456:	6010      	str	r0, [r2, #0]
1a008458:	3301      	adds	r3, #1
1a00845a:	4449      	add	r1, r9
1a00845c:	2b07      	cmp	r3, #7
1a00845e:	912a      	str	r1, [sp, #168]	; 0xa8
1a008460:	f8c2 9004 	str.w	r9, [r2, #4]
1a008464:	9329      	str	r3, [sp, #164]	; 0xa4
1a008466:	dc62      	bgt.n	1a00852e <_vfprintf_r+0x16ce>
1a008468:	3208      	adds	r2, #8
1a00846a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00846c:	f898 3000 	ldrb.w	r3, [r8]
1a008470:	1bc5      	subs	r5, r0, r7
1a008472:	429d      	cmp	r5, r3
1a008474:	bfa8      	it	ge
1a008476:	461d      	movge	r5, r3
1a008478:	2d00      	cmp	r5, #0
1a00847a:	dd0b      	ble.n	1a008494 <_vfprintf_r+0x1634>
1a00847c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00847e:	6017      	str	r7, [r2, #0]
1a008480:	3301      	adds	r3, #1
1a008482:	4429      	add	r1, r5
1a008484:	2b07      	cmp	r3, #7
1a008486:	912a      	str	r1, [sp, #168]	; 0xa8
1a008488:	6055      	str	r5, [r2, #4]
1a00848a:	9329      	str	r3, [sp, #164]	; 0xa4
1a00848c:	dc5a      	bgt.n	1a008544 <_vfprintf_r+0x16e4>
1a00848e:	f898 3000 	ldrb.w	r3, [r8]
1a008492:	3208      	adds	r2, #8
1a008494:	2d00      	cmp	r5, #0
1a008496:	bfac      	ite	ge
1a008498:	1b5d      	subge	r5, r3, r5
1a00849a:	461d      	movlt	r5, r3
1a00849c:	2d00      	cmp	r5, #0
1a00849e:	dc15      	bgt.n	1a0084cc <_vfprintf_r+0x166c>
1a0084a0:	441f      	add	r7, r3
1a0084a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0084a4:	2b00      	cmp	r3, #0
1a0084a6:	d1cc      	bne.n	1a008442 <_vfprintf_r+0x15e2>
1a0084a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0084aa:	2b00      	cmp	r3, #0
1a0084ac:	d13b      	bne.n	1a008526 <_vfprintf_r+0x16c6>
1a0084ae:	46b9      	mov	r9, r7
1a0084b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0084b2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a0084b4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a0084b8:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0084bc:	18fb      	adds	r3, r7, r3
1a0084be:	4599      	cmp	r9, r3
1a0084c0:	4693      	mov	fp, r2
1a0084c2:	460c      	mov	r4, r1
1a0084c4:	bf28      	it	cs
1a0084c6:	4699      	movcs	r9, r3
1a0084c8:	f7ff bb93 	b.w	1a007bf2 <_vfprintf_r+0xd92>
1a0084cc:	2d10      	cmp	r5, #16
1a0084ce:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a0084d0:	dd1c      	ble.n	1a00850c <_vfprintf_r+0x16ac>
1a0084d2:	2410      	movs	r4, #16
1a0084d4:	e004      	b.n	1a0084e0 <_vfprintf_r+0x1680>
1a0084d6:	3d10      	subs	r5, #16
1a0084d8:	2d10      	cmp	r5, #16
1a0084da:	f102 0208 	add.w	r2, r2, #8
1a0084de:	dd15      	ble.n	1a00850c <_vfprintf_r+0x16ac>
1a0084e0:	3001      	adds	r0, #1
1a0084e2:	3110      	adds	r1, #16
1a0084e4:	2807      	cmp	r0, #7
1a0084e6:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a0084ea:	e9c2 6400 	strd	r6, r4, [r2]
1a0084ee:	ddf2      	ble.n	1a0084d6 <_vfprintf_r+0x1676>
1a0084f0:	aa28      	add	r2, sp, #160	; 0xa0
1a0084f2:	4659      	mov	r1, fp
1a0084f4:	4650      	mov	r0, sl
1a0084f6:	f002 faef 	bl	1a00aad8 <__sprint_r>
1a0084fa:	2800      	cmp	r0, #0
1a0084fc:	f47f ae30 	bne.w	1a008160 <_vfprintf_r+0x1300>
1a008500:	3d10      	subs	r5, #16
1a008502:	2d10      	cmp	r5, #16
1a008504:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a008508:	aa2b      	add	r2, sp, #172	; 0xac
1a00850a:	dce9      	bgt.n	1a0084e0 <_vfprintf_r+0x1680>
1a00850c:	3001      	adds	r0, #1
1a00850e:	4429      	add	r1, r5
1a008510:	2807      	cmp	r0, #7
1a008512:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a008516:	e9c2 6500 	strd	r6, r5, [r2]
1a00851a:	dc49      	bgt.n	1a0085b0 <_vfprintf_r+0x1750>
1a00851c:	f898 3000 	ldrb.w	r3, [r8]
1a008520:	3208      	adds	r2, #8
1a008522:	441f      	add	r7, r3
1a008524:	e7bd      	b.n	1a0084a2 <_vfprintf_r+0x1642>
1a008526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a008528:	3b01      	subs	r3, #1
1a00852a:	930c      	str	r3, [sp, #48]	; 0x30
1a00852c:	e791      	b.n	1a008452 <_vfprintf_r+0x15f2>
1a00852e:	aa28      	add	r2, sp, #160	; 0xa0
1a008530:	4659      	mov	r1, fp
1a008532:	4650      	mov	r0, sl
1a008534:	f002 fad0 	bl	1a00aad8 <__sprint_r>
1a008538:	2800      	cmp	r0, #0
1a00853a:	f47f ae11 	bne.w	1a008160 <_vfprintf_r+0x1300>
1a00853e:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a008540:	aa2b      	add	r2, sp, #172	; 0xac
1a008542:	e792      	b.n	1a00846a <_vfprintf_r+0x160a>
1a008544:	aa28      	add	r2, sp, #160	; 0xa0
1a008546:	4659      	mov	r1, fp
1a008548:	4650      	mov	r0, sl
1a00854a:	f002 fac5 	bl	1a00aad8 <__sprint_r>
1a00854e:	2800      	cmp	r0, #0
1a008550:	f47f ae06 	bne.w	1a008160 <_vfprintf_r+0x1300>
1a008554:	f898 3000 	ldrb.w	r3, [r8]
1a008558:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a00855a:	aa2b      	add	r2, sp, #172	; 0xac
1a00855c:	e79a      	b.n	1a008494 <_vfprintf_r+0x1634>
1a00855e:	222d      	movs	r2, #45	; 0x2d
1a008560:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a008564:	f7ff b87d 	b.w	1a007662 <_vfprintf_r+0x802>
1a008568:	9b02      	ldr	r3, [sp, #8]
1a00856a:	930a      	str	r3, [sp, #40]	; 0x28
1a00856c:	2300      	movs	r3, #0
1a00856e:	9309      	str	r3, [sp, #36]	; 0x24
1a008570:	9202      	str	r2, [sp, #8]
1a008572:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a008576:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a00857a:	931d      	str	r3, [sp, #116]	; 0x74
1a00857c:	232d      	movs	r3, #45	; 0x2d
1a00857e:	911c      	str	r1, [sp, #112]	; 0x70
1a008580:	931e      	str	r3, [sp, #120]	; 0x78
1a008582:	e674      	b.n	1a00826e <_vfprintf_r+0x140e>
1a008584:	1a00b288 	.word	0x1a00b288
1a008588:	40300000 	.word	0x40300000
1a00858c:	3fe00000 	.word	0x3fe00000
1a008590:	1a00b2cc 	.word	0x1a00b2cc
1a008594:	aa28      	add	r2, sp, #160	; 0xa0
1a008596:	9907      	ldr	r1, [sp, #28]
1a008598:	9805      	ldr	r0, [sp, #20]
1a00859a:	f002 fa9d 	bl	1a00aad8 <__sprint_r>
1a00859e:	2800      	cmp	r0, #0
1a0085a0:	f47f a9f6 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a0085a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0085a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0085a8:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0085ac:	f7ff bbeb 	b.w	1a007d86 <_vfprintf_r+0xf26>
1a0085b0:	aa28      	add	r2, sp, #160	; 0xa0
1a0085b2:	4659      	mov	r1, fp
1a0085b4:	4650      	mov	r0, sl
1a0085b6:	f002 fa8f 	bl	1a00aad8 <__sprint_r>
1a0085ba:	2800      	cmp	r0, #0
1a0085bc:	f47f add0 	bne.w	1a008160 <_vfprintf_r+0x1300>
1a0085c0:	f898 3000 	ldrb.w	r3, [r8]
1a0085c4:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a0085c6:	aa2b      	add	r2, sp, #172	; 0xac
1a0085c8:	441f      	add	r7, r3
1a0085ca:	e76a      	b.n	1a0084a2 <_vfprintf_r+0x1642>
1a0085cc:	aa28      	add	r2, sp, #160	; 0xa0
1a0085ce:	9907      	ldr	r1, [sp, #28]
1a0085d0:	9805      	ldr	r0, [sp, #20]
1a0085d2:	f002 fa81 	bl	1a00aad8 <__sprint_r>
1a0085d6:	2800      	cmp	r0, #0
1a0085d8:	f47f a9da 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a0085dc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0085de:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0085e2:	f7ff baf7 	b.w	1a007bd4 <_vfprintf_r+0xd74>
1a0085e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a0085e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a0085ea:	1aff      	subs	r7, r7, r3
1a0085ec:	461a      	mov	r2, r3
1a0085ee:	4638      	mov	r0, r7
1a0085f0:	f002 f9fc 	bl	1a00a9ec <strncpy>
1a0085f4:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0085f8:	b10b      	cbz	r3, 1a0085fe <_vfprintf_r+0x179e>
1a0085fa:	f108 0801 	add.w	r8, r8, #1
1a0085fe:	220a      	movs	r2, #10
1a008600:	2300      	movs	r3, #0
1a008602:	4620      	mov	r0, r4
1a008604:	4629      	mov	r1, r5
1a008606:	f04f 0a00 	mov.w	sl, #0
1a00860a:	f7fd fa93 	bl	1a005b34 <__aeabi_uldivmod>
1a00860e:	f7ff b8ab 	b.w	1a007768 <_vfprintf_r+0x908>
1a008612:	aa26      	add	r2, sp, #152	; 0x98
1a008614:	ab23      	add	r3, sp, #140	; 0x8c
1a008616:	e9cd 3200 	strd	r3, r2, [sp]
1a00861a:	2103      	movs	r1, #3
1a00861c:	ab22      	add	r3, sp, #136	; 0x88
1a00861e:	464a      	mov	r2, r9
1a008620:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a008624:	9805      	ldr	r0, [sp, #20]
1a008626:	f000 fb03 	bl	1a008c30 <_dtoa_r>
1a00862a:	7803      	ldrb	r3, [r0, #0]
1a00862c:	2b30      	cmp	r3, #48	; 0x30
1a00862e:	4607      	mov	r7, r0
1a008630:	f000 8161 	beq.w	1a0088f6 <_vfprintf_r+0x1a96>
1a008634:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008636:	444b      	add	r3, r9
1a008638:	18fc      	adds	r4, r7, r3
1a00863a:	2200      	movs	r2, #0
1a00863c:	2300      	movs	r3, #0
1a00863e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a008642:	f7fd fa1d 	bl	1a005a80 <__aeabi_dcmpeq>
1a008646:	b108      	cbz	r0, 1a00864c <_vfprintf_r+0x17ec>
1a008648:	4626      	mov	r6, r4
1a00864a:	e41c      	b.n	1a007e86 <_vfprintf_r+0x1026>
1a00864c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00864e:	42a6      	cmp	r6, r4
1a008650:	f4bf ac19 	bcs.w	1a007e86 <_vfprintf_r+0x1026>
1a008654:	2230      	movs	r2, #48	; 0x30
1a008656:	1c73      	adds	r3, r6, #1
1a008658:	9326      	str	r3, [sp, #152]	; 0x98
1a00865a:	7032      	strb	r2, [r6, #0]
1a00865c:	9e26      	ldr	r6, [sp, #152]	; 0x98
1a00865e:	42b4      	cmp	r4, r6
1a008660:	d8f9      	bhi.n	1a008656 <_vfprintf_r+0x17f6>
1a008662:	e410      	b.n	1a007e86 <_vfprintf_r+0x1026>
1a008664:	aa28      	add	r2, sp, #160	; 0xa0
1a008666:	9907      	ldr	r1, [sp, #28]
1a008668:	9805      	ldr	r0, [sp, #20]
1a00866a:	f002 fa35 	bl	1a00aad8 <__sprint_r>
1a00866e:	2800      	cmp	r0, #0
1a008670:	f47f a98e 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a008674:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a008676:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a008678:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00867c:	f7ff bad1 	b.w	1a007c22 <_vfprintf_r+0xdc2>
1a008680:	464e      	mov	r6, r9
1a008682:	f8cd 900c 	str.w	r9, [sp, #12]
1a008686:	9408      	str	r4, [sp, #32]
1a008688:	4681      	mov	r9, r0
1a00868a:	900c      	str	r0, [sp, #48]	; 0x30
1a00868c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a008690:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a008694:	f7fe bdb9 	b.w	1a00720a <_vfprintf_r+0x3aa>
1a008698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00869a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a00869c:	f003 0301 	and.w	r3, r3, #1
1a0086a0:	2a00      	cmp	r2, #0
1a0086a2:	ea43 0309 	orr.w	r3, r3, r9
1a0086a6:	f340 8142 	ble.w	1a00892e <_vfprintf_r+0x1ace>
1a0086aa:	2b00      	cmp	r3, #0
1a0086ac:	f040 8119 	bne.w	1a0088e2 <_vfprintf_r+0x1a82>
1a0086b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0086b2:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0086b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0086b8:	055a      	lsls	r2, r3, #21
1a0086ba:	f100 80ec 	bmi.w	1a008896 <_vfprintf_r+0x1a36>
1a0086be:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0086c2:	9303      	str	r3, [sp, #12]
1a0086c4:	e69d      	b.n	1a008402 <_vfprintf_r+0x15a2>
1a0086c6:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a0086ca:	189e      	adds	r6, r3, r2
1a0086cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0086ce:	2b00      	cmp	r3, #0
1a0086d0:	f340 811e 	ble.w	1a008910 <_vfprintf_r+0x1ab0>
1a0086d4:	f04f 0867 	mov.w	r8, #103	; 0x67
1a0086d8:	e7ed      	b.n	1a0086b6 <_vfprintf_r+0x1856>
1a0086da:	aa28      	add	r2, sp, #160	; 0xa0
1a0086dc:	9907      	ldr	r1, [sp, #28]
1a0086de:	9805      	ldr	r0, [sp, #20]
1a0086e0:	f002 f9fa 	bl	1a00aad8 <__sprint_r>
1a0086e4:	2800      	cmp	r0, #0
1a0086e6:	f47f a953 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a0086ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0086ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0086ee:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0086f0:	1ad3      	subs	r3, r2, r3
1a0086f2:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0086f6:	f7ff baac 	b.w	1a007c52 <_vfprintf_r+0xdf2>
1a0086fa:	eb07 0409 	add.w	r4, r7, r9
1a0086fe:	e79c      	b.n	1a00863a <_vfprintf_r+0x17da>
1a008700:	425d      	negs	r5, r3
1a008702:	3310      	adds	r3, #16
1a008704:	4ba7      	ldr	r3, [pc, #668]	; (1a0089a4 <_vfprintf_r+0x1b44>)
1a008706:	da63      	bge.n	1a0087d0 <_vfprintf_r+0x1970>
1a008708:	4619      	mov	r1, r3
1a00870a:	2610      	movs	r6, #16
1a00870c:	4623      	mov	r3, r4
1a00870e:	f8dd 8014 	ldr.w	r8, [sp, #20]
1a008712:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a008716:	460c      	mov	r4, r1
1a008718:	e004      	b.n	1a008724 <_vfprintf_r+0x18c4>
1a00871a:	f10b 0b08 	add.w	fp, fp, #8
1a00871e:	3d10      	subs	r5, #16
1a008720:	2d10      	cmp	r5, #16
1a008722:	dd52      	ble.n	1a0087ca <_vfprintf_r+0x196a>
1a008724:	3201      	adds	r2, #1
1a008726:	3310      	adds	r3, #16
1a008728:	2a07      	cmp	r2, #7
1a00872a:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a00872e:	e9cb 4600 	strd	r4, r6, [fp]
1a008732:	ddf2      	ble.n	1a00871a <_vfprintf_r+0x18ba>
1a008734:	aa28      	add	r2, sp, #160	; 0xa0
1a008736:	4649      	mov	r1, r9
1a008738:	4640      	mov	r0, r8
1a00873a:	f002 f9cd 	bl	1a00aad8 <__sprint_r>
1a00873e:	2800      	cmp	r0, #0
1a008740:	f47f a9c0 	bne.w	1a007ac4 <_vfprintf_r+0xc64>
1a008744:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a008748:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a00874c:	e7e7      	b.n	1a00871e <_vfprintf_r+0x18be>
1a00874e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a008752:	07db      	lsls	r3, r3, #31
1a008754:	d407      	bmi.n	1a008766 <_vfprintf_r+0x1906>
1a008756:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00875a:	059f      	lsls	r7, r3, #22
1a00875c:	d403      	bmi.n	1a008766 <_vfprintf_r+0x1906>
1a00875e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a008762:	f7fd fea3 	bl	1a0064ac <__retarget_lock_release_recursive>
1a008766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00876a:	9304      	str	r3, [sp, #16]
1a00876c:	f7ff b9bb 	b.w	1a007ae6 <_vfprintf_r+0xc86>
1a008770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a008772:	9326      	str	r3, [sp, #152]	; 0x98
1a008774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a008776:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1a00877a:	7bd9      	ldrb	r1, [r3, #15]
1a00877c:	428a      	cmp	r2, r1
1a00877e:	4633      	mov	r3, r6
1a008780:	d109      	bne.n	1a008796 <_vfprintf_r+0x1936>
1a008782:	2030      	movs	r0, #48	; 0x30
1a008784:	f803 0c01 	strb.w	r0, [r3, #-1]
1a008788:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a00878a:	1e5a      	subs	r2, r3, #1
1a00878c:	9226      	str	r2, [sp, #152]	; 0x98
1a00878e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a008792:	4291      	cmp	r1, r2
1a008794:	d0f6      	beq.n	1a008784 <_vfprintf_r+0x1924>
1a008796:	2a39      	cmp	r2, #57	; 0x39
1a008798:	bf0b      	itete	eq
1a00879a:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a00879c:	3201      	addne	r2, #1
1a00879e:	7a92      	ldrbeq	r2, [r2, #10]
1a0087a0:	b2d2      	uxtbne	r2, r2
1a0087a2:	f803 2c01 	strb.w	r2, [r3, #-1]
1a0087a6:	f7ff bb6e 	b.w	1a007e86 <_vfprintf_r+0x1026>
1a0087aa:	2330      	movs	r3, #48	; 0x30
1a0087ac:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a0087b0:	2378      	movs	r3, #120	; 0x78
1a0087b2:	e53e      	b.n	1a008232 <_vfprintf_r+0x13d2>
1a0087b4:	f109 0101 	add.w	r1, r9, #1
1a0087b8:	9805      	ldr	r0, [sp, #20]
1a0087ba:	f7fd fe79 	bl	1a0064b0 <_malloc_r>
1a0087be:	4607      	mov	r7, r0
1a0087c0:	2800      	cmp	r0, #0
1a0087c2:	f000 80d5 	beq.w	1a008970 <_vfprintf_r+0x1b10>
1a0087c6:	9009      	str	r0, [sp, #36]	; 0x24
1a0087c8:	e540      	b.n	1a00824c <_vfprintf_r+0x13ec>
1a0087ca:	4621      	mov	r1, r4
1a0087cc:	461c      	mov	r4, r3
1a0087ce:	460b      	mov	r3, r1
1a0087d0:	3201      	adds	r2, #1
1a0087d2:	442c      	add	r4, r5
1a0087d4:	2a07      	cmp	r2, #7
1a0087d6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0087da:	e9cb 3500 	strd	r3, r5, [fp]
1a0087de:	f77f aaea 	ble.w	1a007db6 <_vfprintf_r+0xf56>
1a0087e2:	aa28      	add	r2, sp, #160	; 0xa0
1a0087e4:	9907      	ldr	r1, [sp, #28]
1a0087e6:	9805      	ldr	r0, [sp, #20]
1a0087e8:	f002 f976 	bl	1a00aad8 <__sprint_r>
1a0087ec:	2800      	cmp	r0, #0
1a0087ee:	f47f a8cf 	bne.w	1a007990 <_vfprintf_r+0xb30>
1a0087f2:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0087f6:	f10d 0bac 	add.w	fp, sp, #172	; 0xac
1a0087fa:	f7ff b8df 	b.w	1a0079bc <_vfprintf_r+0xb5c>
1a0087fe:	f109 0401 	add.w	r4, r9, #1
1a008802:	a926      	add	r1, sp, #152	; 0x98
1a008804:	ab23      	add	r3, sp, #140	; 0x8c
1a008806:	e9cd 3100 	strd	r3, r1, [sp]
1a00880a:	4622      	mov	r2, r4
1a00880c:	ab22      	add	r3, sp, #136	; 0x88
1a00880e:	2102      	movs	r1, #2
1a008810:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a008814:	9805      	ldr	r0, [sp, #20]
1a008816:	f000 fa0b 	bl	1a008c30 <_dtoa_r>
1a00881a:	4607      	mov	r7, r0
1a00881c:	443c      	add	r4, r7
1a00881e:	e70c      	b.n	1a00863a <_vfprintf_r+0x17da>
1a008820:	f04f 0906 	mov.w	r9, #6
1a008824:	f7ff bb03 	b.w	1a007e2e <_vfprintf_r+0xfce>
1a008828:	a822      	add	r0, sp, #136	; 0x88
1a00882a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a00882e:	f002 f8a7 	bl	1a00a980 <frexp>
1a008832:	2200      	movs	r2, #0
1a008834:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a008838:	ec51 0b10 	vmov	r0, r1, d0
1a00883c:	f7fc feb8 	bl	1a0055b0 <__aeabi_dmul>
1a008840:	2200      	movs	r2, #0
1a008842:	2300      	movs	r3, #0
1a008844:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a008848:	f7fd f91a 	bl	1a005a80 <__aeabi_dcmpeq>
1a00884c:	b108      	cbz	r0, 1a008852 <_vfprintf_r+0x19f2>
1a00884e:	2301      	movs	r3, #1
1a008850:	9322      	str	r3, [sp, #136]	; 0x88
1a008852:	4b55      	ldr	r3, [pc, #340]	; (1a0089a8 <_vfprintf_r+0x1b48>)
1a008854:	930b      	str	r3, [sp, #44]	; 0x2c
1a008856:	e529      	b.n	1a0082ac <_vfprintf_r+0x144c>
1a008858:	2900      	cmp	r1, #0
1a00885a:	d17b      	bne.n	1a008954 <_vfprintf_r+0x1af4>
1a00885c:	2330      	movs	r3, #48	; 0x30
1a00885e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a008862:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a008866:	3230      	adds	r2, #48	; 0x30
1a008868:	f803 2b01 	strb.w	r2, [r3], #1
1a00886c:	aa24      	add	r2, sp, #144	; 0x90
1a00886e:	1a9b      	subs	r3, r3, r2
1a008870:	9316      	str	r3, [sp, #88]	; 0x58
1a008872:	f7ff bb61 	b.w	1a007f38 <_vfprintf_r+0x10d8>
1a008876:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a008878:	4f4c      	ldr	r7, [pc, #304]	; (1a0089ac <_vfprintf_r+0x1b4c>)
1a00887a:	2b00      	cmp	r3, #0
1a00887c:	bfb6      	itet	lt
1a00887e:	222d      	movlt	r2, #45	; 0x2d
1a008880:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a008884:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a008888:	4b49      	ldr	r3, [pc, #292]	; (1a0089b0 <_vfprintf_r+0x1b50>)
1a00888a:	f7fe beec 	b.w	1a007666 <_vfprintf_r+0x806>
1a00888e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a008890:	e5ab      	b.n	1a0083ea <_vfprintf_r+0x158a>
1a008892:	f04f 0867 	mov.w	r8, #103	; 0x67
1a008896:	9818      	ldr	r0, [sp, #96]	; 0x60
1a008898:	2200      	movs	r2, #0
1a00889a:	920c      	str	r2, [sp, #48]	; 0x30
1a00889c:	920f      	str	r2, [sp, #60]	; 0x3c
1a00889e:	7803      	ldrb	r3, [r0, #0]
1a0088a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a0088a2:	2bff      	cmp	r3, #255	; 0xff
1a0088a4:	d00c      	beq.n	1a0088c0 <_vfprintf_r+0x1a60>
1a0088a6:	4293      	cmp	r3, r2
1a0088a8:	da0a      	bge.n	1a0088c0 <_vfprintf_r+0x1a60>
1a0088aa:	7841      	ldrb	r1, [r0, #1]
1a0088ac:	1ad2      	subs	r2, r2, r3
1a0088ae:	b1a1      	cbz	r1, 1a0088da <_vfprintf_r+0x1a7a>
1a0088b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0088b2:	3301      	adds	r3, #1
1a0088b4:	930f      	str	r3, [sp, #60]	; 0x3c
1a0088b6:	460b      	mov	r3, r1
1a0088b8:	2bff      	cmp	r3, #255	; 0xff
1a0088ba:	f100 0001 	add.w	r0, r0, #1
1a0088be:	d1f2      	bne.n	1a0088a6 <_vfprintf_r+0x1a46>
1a0088c0:	920e      	str	r2, [sp, #56]	; 0x38
1a0088c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0088c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0088c6:	9018      	str	r0, [sp, #96]	; 0x60
1a0088c8:	4413      	add	r3, r2
1a0088ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a0088cc:	fb02 6603 	mla	r6, r2, r3, r6
1a0088d0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a0088d4:	9303      	str	r3, [sp, #12]
1a0088d6:	f7ff bb45 	b.w	1a007f64 <_vfprintf_r+0x1104>
1a0088da:	990c      	ldr	r1, [sp, #48]	; 0x30
1a0088dc:	3101      	adds	r1, #1
1a0088de:	910c      	str	r1, [sp, #48]	; 0x30
1a0088e0:	e7df      	b.n	1a0088a2 <_vfprintf_r+0x1a42>
1a0088e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0088e4:	18d6      	adds	r6, r2, r3
1a0088e6:	444e      	add	r6, r9
1a0088e8:	f04f 0866 	mov.w	r8, #102	; 0x66
1a0088ec:	e6e3      	b.n	1a0086b6 <_vfprintf_r+0x1856>
1a0088ee:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0088f2:	f7ff b8ec 	b.w	1a007ace <_vfprintf_r+0xc6e>
1a0088f6:	2200      	movs	r2, #0
1a0088f8:	2300      	movs	r3, #0
1a0088fa:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a0088fe:	f7fd f8bf 	bl	1a005a80 <__aeabi_dcmpeq>
1a008902:	2800      	cmp	r0, #0
1a008904:	f47f ae96 	bne.w	1a008634 <_vfprintf_r+0x17d4>
1a008908:	f1c9 0301 	rsb	r3, r9, #1
1a00890c:	9322      	str	r3, [sp, #136]	; 0x88
1a00890e:	e692      	b.n	1a008636 <_vfprintf_r+0x17d6>
1a008910:	f1c3 0301 	rsb	r3, r3, #1
1a008914:	441e      	add	r6, r3
1a008916:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a00891a:	9303      	str	r3, [sp, #12]
1a00891c:	f04f 0867 	mov.w	r8, #103	; 0x67
1a008920:	e56f      	b.n	1a008402 <_vfprintf_r+0x15a2>
1a008922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a008924:	07dd      	lsls	r5, r3, #31
1a008926:	f57f ab10 	bpl.w	1a007f4a <_vfprintf_r+0x10ea>
1a00892a:	f7ff bb0c 	b.w	1a007f46 <_vfprintf_r+0x10e6>
1a00892e:	b92b      	cbnz	r3, 1a00893c <_vfprintf_r+0x1adc>
1a008930:	2301      	movs	r3, #1
1a008932:	9303      	str	r3, [sp, #12]
1a008934:	461e      	mov	r6, r3
1a008936:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00893a:	e562      	b.n	1a008402 <_vfprintf_r+0x15a2>
1a00893c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00893e:	1c5e      	adds	r6, r3, #1
1a008940:	444e      	add	r6, r9
1a008942:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a008946:	9303      	str	r3, [sp, #12]
1a008948:	f04f 0866 	mov.w	r8, #102	; 0x66
1a00894c:	e559      	b.n	1a008402 <_vfprintf_r+0x15a2>
1a00894e:	465a      	mov	r2, fp
1a008950:	f7ff bb3f 	b.w	1a007fd2 <_vfprintf_r+0x1172>
1a008954:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a008958:	e785      	b.n	1a008866 <_vfprintf_r+0x1a06>
1a00895a:	9b08      	ldr	r3, [sp, #32]
1a00895c:	f89a 8001 	ldrb.w	r8, [sl, #1]
1a008960:	f853 0b04 	ldr.w	r0, [r3], #4
1a008964:	9308      	str	r3, [sp, #32]
1a008966:	4692      	mov	sl, r2
1a008968:	ea40 79e0 	orr.w	r9, r0, r0, asr #31
1a00896c:	f7fe bafc 	b.w	1a006f68 <_vfprintf_r+0x108>
1a008970:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a008974:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a008978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00897c:	f8a9 300c 	strh.w	r3, [r9, #12]
1a008980:	f7ff b8a5 	b.w	1a007ace <_vfprintf_r+0xc6e>
1a008984:	461e      	mov	r6, r3
1a008986:	f7fe bc15 	b.w	1a0071b4 <_vfprintf_r+0x354>
1a00898a:	461e      	mov	r6, r3
1a00898c:	f7fe bc5e 	b.w	1a00724c <_vfprintf_r+0x3ec>
1a008990:	461e      	mov	r6, r3
1a008992:	f7fe bc48 	b.w	1a007226 <_vfprintf_r+0x3c6>
1a008996:	464c      	mov	r4, r9
1a008998:	443c      	add	r4, r7
1a00899a:	e64e      	b.n	1a00863a <_vfprintf_r+0x17da>
1a00899c:	2302      	movs	r3, #2
1a00899e:	9316      	str	r3, [sp, #88]	; 0x58
1a0089a0:	f7ff baca 	b.w	1a007f38 <_vfprintf_r+0x10d8>
1a0089a4:	1a00b2cc 	.word	0x1a00b2cc
1a0089a8:	1a00b29c 	.word	0x1a00b29c
1a0089ac:	1a00b280 	.word	0x1a00b280
1a0089b0:	1a00b284 	.word	0x1a00b284

1a0089b4 <__sbprintf>:
1a0089b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0089b8:	460c      	mov	r4, r1
1a0089ba:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a0089be:	8989      	ldrh	r1, [r1, #12]
1a0089c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a0089c2:	89e5      	ldrh	r5, [r4, #14]
1a0089c4:	9619      	str	r6, [sp, #100]	; 0x64
1a0089c6:	f021 0102 	bic.w	r1, r1, #2
1a0089ca:	4606      	mov	r6, r0
1a0089cc:	69e0      	ldr	r0, [r4, #28]
1a0089ce:	f8ad 100c 	strh.w	r1, [sp, #12]
1a0089d2:	4617      	mov	r7, r2
1a0089d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a0089d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a0089da:	f8ad 500e 	strh.w	r5, [sp, #14]
1a0089de:	4698      	mov	r8, r3
1a0089e0:	ad1a      	add	r5, sp, #104	; 0x68
1a0089e2:	2300      	movs	r3, #0
1a0089e4:	9007      	str	r0, [sp, #28]
1a0089e6:	a816      	add	r0, sp, #88	; 0x58
1a0089e8:	9209      	str	r2, [sp, #36]	; 0x24
1a0089ea:	9306      	str	r3, [sp, #24]
1a0089ec:	9500      	str	r5, [sp, #0]
1a0089ee:	9504      	str	r5, [sp, #16]
1a0089f0:	9102      	str	r1, [sp, #8]
1a0089f2:	9105      	str	r1, [sp, #20]
1a0089f4:	f7fd fd54 	bl	1a0064a0 <__retarget_lock_init_recursive>
1a0089f8:	4643      	mov	r3, r8
1a0089fa:	463a      	mov	r2, r7
1a0089fc:	4669      	mov	r1, sp
1a0089fe:	4630      	mov	r0, r6
1a008a00:	f7fe fa2e 	bl	1a006e60 <_vfprintf_r>
1a008a04:	1e05      	subs	r5, r0, #0
1a008a06:	db07      	blt.n	1a008a18 <__sbprintf+0x64>
1a008a08:	4630      	mov	r0, r6
1a008a0a:	4669      	mov	r1, sp
1a008a0c:	f7fd fb22 	bl	1a006054 <_fflush_r>
1a008a10:	2800      	cmp	r0, #0
1a008a12:	bf18      	it	ne
1a008a14:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a008a18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a008a1c:	065b      	lsls	r3, r3, #25
1a008a1e:	d503      	bpl.n	1a008a28 <__sbprintf+0x74>
1a008a20:	89a3      	ldrh	r3, [r4, #12]
1a008a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a008a26:	81a3      	strh	r3, [r4, #12]
1a008a28:	9816      	ldr	r0, [sp, #88]	; 0x58
1a008a2a:	f7fd fd3b 	bl	1a0064a4 <__retarget_lock_close_recursive>
1a008a2e:	4628      	mov	r0, r5
1a008a30:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a008a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a008a38 <__swsetup_r>:
1a008a38:	b538      	push	{r3, r4, r5, lr}
1a008a3a:	4b32      	ldr	r3, [pc, #200]	; (1a008b04 <__swsetup_r+0xcc>)
1a008a3c:	681b      	ldr	r3, [r3, #0]
1a008a3e:	4605      	mov	r5, r0
1a008a40:	460c      	mov	r4, r1
1a008a42:	b10b      	cbz	r3, 1a008a48 <__swsetup_r+0x10>
1a008a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a008a46:	b312      	cbz	r2, 1a008a8e <__swsetup_r+0x56>
1a008a48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a008a4c:	b293      	uxth	r3, r2
1a008a4e:	0718      	lsls	r0, r3, #28
1a008a50:	d525      	bpl.n	1a008a9e <__swsetup_r+0x66>
1a008a52:	6920      	ldr	r0, [r4, #16]
1a008a54:	2800      	cmp	r0, #0
1a008a56:	d02d      	beq.n	1a008ab4 <__swsetup_r+0x7c>
1a008a58:	f013 0201 	ands.w	r2, r3, #1
1a008a5c:	d007      	beq.n	1a008a6e <__swsetup_r+0x36>
1a008a5e:	6963      	ldr	r3, [r4, #20]
1a008a60:	2200      	movs	r2, #0
1a008a62:	425b      	negs	r3, r3
1a008a64:	61a3      	str	r3, [r4, #24]
1a008a66:	60a2      	str	r2, [r4, #8]
1a008a68:	b138      	cbz	r0, 1a008a7a <__swsetup_r+0x42>
1a008a6a:	2000      	movs	r0, #0
1a008a6c:	bd38      	pop	{r3, r4, r5, pc}
1a008a6e:	0799      	lsls	r1, r3, #30
1a008a70:	bf58      	it	pl
1a008a72:	6962      	ldrpl	r2, [r4, #20]
1a008a74:	60a2      	str	r2, [r4, #8]
1a008a76:	2800      	cmp	r0, #0
1a008a78:	d1f7      	bne.n	1a008a6a <__swsetup_r+0x32>
1a008a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a008a7e:	061a      	lsls	r2, r3, #24
1a008a80:	d5f4      	bpl.n	1a008a6c <__swsetup_r+0x34>
1a008a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a008a86:	81a3      	strh	r3, [r4, #12]
1a008a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008a8c:	bd38      	pop	{r3, r4, r5, pc}
1a008a8e:	4618      	mov	r0, r3
1a008a90:	f7fd fb3c 	bl	1a00610c <__sinit>
1a008a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a008a98:	b293      	uxth	r3, r2
1a008a9a:	0718      	lsls	r0, r3, #28
1a008a9c:	d4d9      	bmi.n	1a008a52 <__swsetup_r+0x1a>
1a008a9e:	06d9      	lsls	r1, r3, #27
1a008aa0:	d528      	bpl.n	1a008af4 <__swsetup_r+0xbc>
1a008aa2:	0758      	lsls	r0, r3, #29
1a008aa4:	d412      	bmi.n	1a008acc <__swsetup_r+0x94>
1a008aa6:	6920      	ldr	r0, [r4, #16]
1a008aa8:	f042 0308 	orr.w	r3, r2, #8
1a008aac:	81a3      	strh	r3, [r4, #12]
1a008aae:	b29b      	uxth	r3, r3
1a008ab0:	2800      	cmp	r0, #0
1a008ab2:	d1d1      	bne.n	1a008a58 <__swsetup_r+0x20>
1a008ab4:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a008ab8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a008abc:	d0cc      	beq.n	1a008a58 <__swsetup_r+0x20>
1a008abe:	4628      	mov	r0, r5
1a008ac0:	4621      	mov	r1, r4
1a008ac2:	f001 f995 	bl	1a009df0 <__smakebuf_r>
1a008ac6:	89a3      	ldrh	r3, [r4, #12]
1a008ac8:	6920      	ldr	r0, [r4, #16]
1a008aca:	e7c5      	b.n	1a008a58 <__swsetup_r+0x20>
1a008acc:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a008ace:	b151      	cbz	r1, 1a008ae6 <__swsetup_r+0xae>
1a008ad0:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a008ad4:	4299      	cmp	r1, r3
1a008ad6:	d004      	beq.n	1a008ae2 <__swsetup_r+0xaa>
1a008ad8:	4628      	mov	r0, r5
1a008ada:	f7fd fb9d 	bl	1a006218 <_free_r>
1a008ade:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a008ae2:	2300      	movs	r3, #0
1a008ae4:	6323      	str	r3, [r4, #48]	; 0x30
1a008ae6:	2300      	movs	r3, #0
1a008ae8:	6920      	ldr	r0, [r4, #16]
1a008aea:	6063      	str	r3, [r4, #4]
1a008aec:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a008af0:	6020      	str	r0, [r4, #0]
1a008af2:	e7d9      	b.n	1a008aa8 <__swsetup_r+0x70>
1a008af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a008af8:	2309      	movs	r3, #9
1a008afa:	602b      	str	r3, [r5, #0]
1a008afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008b00:	81a2      	strh	r2, [r4, #12]
1a008b02:	bd38      	pop	{r3, r4, r5, pc}
1a008b04:	10000040 	.word	0x10000040

1a008b08 <quorem>:
1a008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008b0c:	6903      	ldr	r3, [r0, #16]
1a008b0e:	690f      	ldr	r7, [r1, #16]
1a008b10:	42bb      	cmp	r3, r7
1a008b12:	b083      	sub	sp, #12
1a008b14:	f2c0 8086 	blt.w	1a008c24 <quorem+0x11c>
1a008b18:	3f01      	subs	r7, #1
1a008b1a:	f101 0614 	add.w	r6, r1, #20
1a008b1e:	f100 0a14 	add.w	sl, r0, #20
1a008b22:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a008b26:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a008b2a:	00bc      	lsls	r4, r7, #2
1a008b2c:	3301      	adds	r3, #1
1a008b2e:	9400      	str	r4, [sp, #0]
1a008b30:	eb06 0904 	add.w	r9, r6, r4
1a008b34:	429a      	cmp	r2, r3
1a008b36:	4454      	add	r4, sl
1a008b38:	fbb2 f8f3 	udiv	r8, r2, r3
1a008b3c:	9401      	str	r4, [sp, #4]
1a008b3e:	d33a      	bcc.n	1a008bb6 <quorem+0xae>
1a008b40:	2500      	movs	r5, #0
1a008b42:	462a      	mov	r2, r5
1a008b44:	46b6      	mov	lr, r6
1a008b46:	46d4      	mov	ip, sl
1a008b48:	f85e 4b04 	ldr.w	r4, [lr], #4
1a008b4c:	f8dc 3000 	ldr.w	r3, [ip]
1a008b50:	fa1f fb84 	uxth.w	fp, r4
1a008b54:	fb08 550b 	mla	r5, r8, fp, r5
1a008b58:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a008b5c:	0c24      	lsrs	r4, r4, #16
1a008b5e:	fb08 b404 	mla	r4, r8, r4, fp
1a008b62:	b2ad      	uxth	r5, r5
1a008b64:	1b55      	subs	r5, r2, r5
1a008b66:	b2a2      	uxth	r2, r4
1a008b68:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a008b6c:	fa15 f383 	uxtah	r3, r5, r3
1a008b70:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a008b74:	b29b      	uxth	r3, r3
1a008b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a008b7a:	45f1      	cmp	r9, lr
1a008b7c:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a008b80:	f84c 3b04 	str.w	r3, [ip], #4
1a008b84:	ea4f 4222 	mov.w	r2, r2, asr #16
1a008b88:	d2de      	bcs.n	1a008b48 <quorem+0x40>
1a008b8a:	9b00      	ldr	r3, [sp, #0]
1a008b8c:	f85a 3003 	ldr.w	r3, [sl, r3]
1a008b90:	b98b      	cbnz	r3, 1a008bb6 <quorem+0xae>
1a008b92:	9a01      	ldr	r2, [sp, #4]
1a008b94:	1f13      	subs	r3, r2, #4
1a008b96:	459a      	cmp	sl, r3
1a008b98:	d20c      	bcs.n	1a008bb4 <quorem+0xac>
1a008b9a:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a008b9e:	b94b      	cbnz	r3, 1a008bb4 <quorem+0xac>
1a008ba0:	f1a2 0308 	sub.w	r3, r2, #8
1a008ba4:	e002      	b.n	1a008bac <quorem+0xa4>
1a008ba6:	681a      	ldr	r2, [r3, #0]
1a008ba8:	3b04      	subs	r3, #4
1a008baa:	b91a      	cbnz	r2, 1a008bb4 <quorem+0xac>
1a008bac:	459a      	cmp	sl, r3
1a008bae:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a008bb2:	d3f8      	bcc.n	1a008ba6 <quorem+0x9e>
1a008bb4:	6107      	str	r7, [r0, #16]
1a008bb6:	4604      	mov	r4, r0
1a008bb8:	f001 fc34 	bl	1a00a424 <__mcmp>
1a008bbc:	2800      	cmp	r0, #0
1a008bbe:	db2d      	blt.n	1a008c1c <quorem+0x114>
1a008bc0:	f108 0801 	add.w	r8, r8, #1
1a008bc4:	4650      	mov	r0, sl
1a008bc6:	2300      	movs	r3, #0
1a008bc8:	f856 1b04 	ldr.w	r1, [r6], #4
1a008bcc:	6805      	ldr	r5, [r0, #0]
1a008bce:	b28a      	uxth	r2, r1
1a008bd0:	1a9a      	subs	r2, r3, r2
1a008bd2:	0c0b      	lsrs	r3, r1, #16
1a008bd4:	fa12 f285 	uxtah	r2, r2, r5
1a008bd8:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a008bdc:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a008be0:	b292      	uxth	r2, r2
1a008be2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a008be6:	45b1      	cmp	r9, r6
1a008be8:	f840 2b04 	str.w	r2, [r0], #4
1a008bec:	ea4f 4323 	mov.w	r3, r3, asr #16
1a008bf0:	d2ea      	bcs.n	1a008bc8 <quorem+0xc0>
1a008bf2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a008bf6:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a008bfa:	b97a      	cbnz	r2, 1a008c1c <quorem+0x114>
1a008bfc:	1f1a      	subs	r2, r3, #4
1a008bfe:	4592      	cmp	sl, r2
1a008c00:	d20b      	bcs.n	1a008c1a <quorem+0x112>
1a008c02:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a008c06:	b942      	cbnz	r2, 1a008c1a <quorem+0x112>
1a008c08:	3b08      	subs	r3, #8
1a008c0a:	e002      	b.n	1a008c12 <quorem+0x10a>
1a008c0c:	681a      	ldr	r2, [r3, #0]
1a008c0e:	3b04      	subs	r3, #4
1a008c10:	b91a      	cbnz	r2, 1a008c1a <quorem+0x112>
1a008c12:	459a      	cmp	sl, r3
1a008c14:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a008c18:	d3f8      	bcc.n	1a008c0c <quorem+0x104>
1a008c1a:	6127      	str	r7, [r4, #16]
1a008c1c:	4640      	mov	r0, r8
1a008c1e:	b003      	add	sp, #12
1a008c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008c24:	2000      	movs	r0, #0
1a008c26:	b003      	add	sp, #12
1a008c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008c2c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a008c30 <_dtoa_r>:
1a008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008c34:	ec57 6b10 	vmov	r6, r7, d0
1a008c38:	b097      	sub	sp, #92	; 0x5c
1a008c3a:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a008c3c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a008c3e:	9102      	str	r1, [sp, #8]
1a008c40:	4682      	mov	sl, r0
1a008c42:	920a      	str	r2, [sp, #40]	; 0x28
1a008c44:	9307      	str	r3, [sp, #28]
1a008c46:	e9cd 6700 	strd	r6, r7, [sp]
1a008c4a:	b155      	cbz	r5, 1a008c62 <_dtoa_r+0x32>
1a008c4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a008c4e:	606a      	str	r2, [r5, #4]
1a008c50:	2301      	movs	r3, #1
1a008c52:	4093      	lsls	r3, r2
1a008c54:	60ab      	str	r3, [r5, #8]
1a008c56:	4629      	mov	r1, r5
1a008c58:	f001 f9f8 	bl	1a00a04c <_Bfree>
1a008c5c:	2300      	movs	r3, #0
1a008c5e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a008c62:	1e3e      	subs	r6, r7, #0
1a008c64:	bfb4      	ite	lt
1a008c66:	2301      	movlt	r3, #1
1a008c68:	2300      	movge	r3, #0
1a008c6a:	6023      	str	r3, [r4, #0]
1a008c6c:	4b76      	ldr	r3, [pc, #472]	; (1a008e48 <_dtoa_r+0x218>)
1a008c6e:	bfbc      	itt	lt
1a008c70:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a008c74:	9601      	strlt	r6, [sp, #4]
1a008c76:	43b3      	bics	r3, r6
1a008c78:	f000 80ae 	beq.w	1a008dd8 <_dtoa_r+0x1a8>
1a008c7c:	ed9d 7b00 	vldr	d7, [sp]
1a008c80:	2200      	movs	r2, #0
1a008c82:	2300      	movs	r3, #0
1a008c84:	ec51 0b17 	vmov	r0, r1, d7
1a008c88:	ed8d 7b04 	vstr	d7, [sp, #16]
1a008c8c:	f7fc fef8 	bl	1a005a80 <__aeabi_dcmpeq>
1a008c90:	4605      	mov	r5, r0
1a008c92:	b178      	cbz	r0, 1a008cb4 <_dtoa_r+0x84>
1a008c94:	9a07      	ldr	r2, [sp, #28]
1a008c96:	2301      	movs	r3, #1
1a008c98:	6013      	str	r3, [r2, #0]
1a008c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a008c9c:	2b00      	cmp	r3, #0
1a008c9e:	f000 8313 	beq.w	1a0092c8 <_dtoa_r+0x698>
1a008ca2:	4b6a      	ldr	r3, [pc, #424]	; (1a008e4c <_dtoa_r+0x21c>)
1a008ca4:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a008ca6:	6013      	str	r3, [r2, #0]
1a008ca8:	3b01      	subs	r3, #1
1a008caa:	9303      	str	r3, [sp, #12]
1a008cac:	9803      	ldr	r0, [sp, #12]
1a008cae:	b017      	add	sp, #92	; 0x5c
1a008cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008cb4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a008cb8:	aa14      	add	r2, sp, #80	; 0x50
1a008cba:	a915      	add	r1, sp, #84	; 0x54
1a008cbc:	ec48 7b10 	vmov	d0, r7, r8
1a008cc0:	4650      	mov	r0, sl
1a008cc2:	f001 fc47 	bl	1a00a554 <__d2b>
1a008cc6:	0d34      	lsrs	r4, r6, #20
1a008cc8:	4683      	mov	fp, r0
1a008cca:	f040 809b 	bne.w	1a008e04 <_dtoa_r+0x1d4>
1a008cce:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a008cd2:	442c      	add	r4, r5
1a008cd4:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a008cd8:	2b20      	cmp	r3, #32
1a008cda:	f340 83bb 	ble.w	1a009454 <_dtoa_r+0x824>
1a008cde:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a008ce2:	409e      	lsls	r6, r3
1a008ce4:	9b00      	ldr	r3, [sp, #0]
1a008ce6:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a008cea:	fa23 f000 	lsr.w	r0, r3, r0
1a008cee:	4330      	orrs	r0, r6
1a008cf0:	f7fc fbe4 	bl	1a0054bc <__aeabi_ui2d>
1a008cf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a008cf8:	2101      	movs	r1, #1
1a008cfa:	4602      	mov	r2, r0
1a008cfc:	3c01      	subs	r4, #1
1a008cfe:	910e      	str	r1, [sp, #56]	; 0x38
1a008d00:	4610      	mov	r0, r2
1a008d02:	4619      	mov	r1, r3
1a008d04:	2200      	movs	r2, #0
1a008d06:	4b52      	ldr	r3, [pc, #328]	; (1a008e50 <_dtoa_r+0x220>)
1a008d08:	f7fc fa9a 	bl	1a005240 <__aeabi_dsub>
1a008d0c:	a348      	add	r3, pc, #288	; (adr r3, 1a008e30 <_dtoa_r+0x200>)
1a008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008d12:	f7fc fc4d 	bl	1a0055b0 <__aeabi_dmul>
1a008d16:	a348      	add	r3, pc, #288	; (adr r3, 1a008e38 <_dtoa_r+0x208>)
1a008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008d1c:	f7fc fa92 	bl	1a005244 <__adddf3>
1a008d20:	4606      	mov	r6, r0
1a008d22:	4620      	mov	r0, r4
1a008d24:	460f      	mov	r7, r1
1a008d26:	f7fc fbd9 	bl	1a0054dc <__aeabi_i2d>
1a008d2a:	a345      	add	r3, pc, #276	; (adr r3, 1a008e40 <_dtoa_r+0x210>)
1a008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008d30:	f7fc fc3e 	bl	1a0055b0 <__aeabi_dmul>
1a008d34:	4602      	mov	r2, r0
1a008d36:	460b      	mov	r3, r1
1a008d38:	4630      	mov	r0, r6
1a008d3a:	4639      	mov	r1, r7
1a008d3c:	f7fc fa82 	bl	1a005244 <__adddf3>
1a008d40:	4606      	mov	r6, r0
1a008d42:	460f      	mov	r7, r1
1a008d44:	f7fc fece 	bl	1a005ae4 <__aeabi_d2iz>
1a008d48:	2200      	movs	r2, #0
1a008d4a:	4681      	mov	r9, r0
1a008d4c:	2300      	movs	r3, #0
1a008d4e:	4630      	mov	r0, r6
1a008d50:	4639      	mov	r1, r7
1a008d52:	f7fc fe9f 	bl	1a005a94 <__aeabi_dcmplt>
1a008d56:	2800      	cmp	r0, #0
1a008d58:	f040 82a9 	bne.w	1a0092ae <_dtoa_r+0x67e>
1a008d5c:	1b2c      	subs	r4, r5, r4
1a008d5e:	f1b9 0f16 	cmp.w	r9, #22
1a008d62:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a008d66:	f200 8296 	bhi.w	1a009296 <_dtoa_r+0x666>
1a008d6a:	4b3a      	ldr	r3, [pc, #232]	; (1a008e54 <_dtoa_r+0x224>)
1a008d6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
1a008d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a008d78:	f7fc fe8c 	bl	1a005a94 <__aeabi_dcmplt>
1a008d7c:	2800      	cmp	r0, #0
1a008d7e:	d06f      	beq.n	1a008e60 <_dtoa_r+0x230>
1a008d80:	2300      	movs	r3, #0
1a008d82:	f1b8 0f00 	cmp.w	r8, #0
1a008d86:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a008d8a:	930d      	str	r3, [sp, #52]	; 0x34
1a008d8c:	f2c0 8289 	blt.w	1a0092a2 <_dtoa_r+0x672>
1a008d90:	2300      	movs	r3, #0
1a008d92:	9308      	str	r3, [sp, #32]
1a008d94:	f1b9 0f00 	cmp.w	r9, #0
1a008d98:	da68      	bge.n	1a008e6c <_dtoa_r+0x23c>
1a008d9a:	9b08      	ldr	r3, [sp, #32]
1a008d9c:	f8cd 9018 	str.w	r9, [sp, #24]
1a008da0:	eba3 0309 	sub.w	r3, r3, r9
1a008da4:	9308      	str	r3, [sp, #32]
1a008da6:	f1c9 0300 	rsb	r3, r9, #0
1a008daa:	930c      	str	r3, [sp, #48]	; 0x30
1a008dac:	9b02      	ldr	r3, [sp, #8]
1a008dae:	2b09      	cmp	r3, #9
1a008db0:	f04f 0900 	mov.w	r9, #0
1a008db4:	d862      	bhi.n	1a008e7c <_dtoa_r+0x24c>
1a008db6:	2b05      	cmp	r3, #5
1a008db8:	f340 834a 	ble.w	1a009450 <_dtoa_r+0x820>
1a008dbc:	3b04      	subs	r3, #4
1a008dbe:	9302      	str	r3, [sp, #8]
1a008dc0:	2400      	movs	r4, #0
1a008dc2:	9b02      	ldr	r3, [sp, #8]
1a008dc4:	3b02      	subs	r3, #2
1a008dc6:	2b03      	cmp	r3, #3
1a008dc8:	f200 8641 	bhi.w	1a009a4e <_dtoa_r+0xe1e>
1a008dcc:	e8df f013 	tbh	[pc, r3, lsl #1]
1a008dd0:	04630466 	.word	0x04630466
1a008dd4:	0456043b 	.word	0x0456043b
1a008dd8:	9a07      	ldr	r2, [sp, #28]
1a008dda:	f242 730f 	movw	r3, #9999	; 0x270f
1a008dde:	6013      	str	r3, [r2, #0]
1a008de0:	9b00      	ldr	r3, [sp, #0]
1a008de2:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a008de6:	4333      	orrs	r3, r6
1a008de8:	d118      	bne.n	1a008e1c <_dtoa_r+0x1ec>
1a008dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a008dec:	2b00      	cmp	r3, #0
1a008dee:	f000 8625 	beq.w	1a009a3c <_dtoa_r+0xe0c>
1a008df2:	4b19      	ldr	r3, [pc, #100]	; (1a008e58 <_dtoa_r+0x228>)
1a008df4:	9303      	str	r3, [sp, #12]
1a008df6:	3308      	adds	r3, #8
1a008df8:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a008dfa:	9803      	ldr	r0, [sp, #12]
1a008dfc:	6013      	str	r3, [r2, #0]
1a008dfe:	b017      	add	sp, #92	; 0x5c
1a008e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008e04:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a008e08:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a008e0c:	950e      	str	r5, [sp, #56]	; 0x38
1a008e0e:	463a      	mov	r2, r7
1a008e10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a008e14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a008e18:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a008e1a:	e771      	b.n	1a008d00 <_dtoa_r+0xd0>
1a008e1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a008e1e:	2b00      	cmp	r3, #0
1a008e20:	f040 8400 	bne.w	1a009624 <_dtoa_r+0x9f4>
1a008e24:	4b0d      	ldr	r3, [pc, #52]	; (1a008e5c <_dtoa_r+0x22c>)
1a008e26:	9303      	str	r3, [sp, #12]
1a008e28:	e740      	b.n	1a008cac <_dtoa_r+0x7c>
1a008e2a:	bf00      	nop
1a008e2c:	f3af 8000 	nop.w
1a008e30:	636f4361 	.word	0x636f4361
1a008e34:	3fd287a7 	.word	0x3fd287a7
1a008e38:	8b60c8b3 	.word	0x8b60c8b3
1a008e3c:	3fc68a28 	.word	0x3fc68a28
1a008e40:	509f79fb 	.word	0x509f79fb
1a008e44:	3fd34413 	.word	0x3fd34413
1a008e48:	7ff00000 	.word	0x7ff00000
1a008e4c:	1a00b2b9 	.word	0x1a00b2b9
1a008e50:	3ff80000 	.word	0x3ff80000
1a008e54:	1a00b318 	.word	0x1a00b318
1a008e58:	1a00b2e0 	.word	0x1a00b2e0
1a008e5c:	1a00b2dc 	.word	0x1a00b2dc
1a008e60:	f1b8 0f00 	cmp.w	r8, #0
1a008e64:	f2c0 84b6 	blt.w	1a0097d4 <_dtoa_r+0xba4>
1a008e68:	900d      	str	r0, [sp, #52]	; 0x34
1a008e6a:	9008      	str	r0, [sp, #32]
1a008e6c:	2300      	movs	r3, #0
1a008e6e:	930c      	str	r3, [sp, #48]	; 0x30
1a008e70:	9b02      	ldr	r3, [sp, #8]
1a008e72:	f8cd 9018 	str.w	r9, [sp, #24]
1a008e76:	2b09      	cmp	r3, #9
1a008e78:	44c8      	add	r8, r9
1a008e7a:	d99c      	bls.n	1a008db6 <_dtoa_r+0x186>
1a008e7c:	2300      	movs	r3, #0
1a008e7e:	2401      	movs	r4, #1
1a008e80:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a008e84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a008e88:	9302      	str	r3, [sp, #8]
1a008e8a:	9509      	str	r5, [sp, #36]	; 0x24
1a008e8c:	2100      	movs	r1, #0
1a008e8e:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a008e92:	950f      	str	r5, [sp, #60]	; 0x3c
1a008e94:	4650      	mov	r0, sl
1a008e96:	f001 f8b3 	bl	1a00a000 <_Balloc>
1a008e9a:	2d0e      	cmp	r5, #14
1a008e9c:	9003      	str	r0, [sp, #12]
1a008e9e:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a008ea2:	f200 810a 	bhi.w	1a0090ba <_dtoa_r+0x48a>
1a008ea6:	2c00      	cmp	r4, #0
1a008ea8:	f000 8107 	beq.w	1a0090ba <_dtoa_r+0x48a>
1a008eac:	9906      	ldr	r1, [sp, #24]
1a008eae:	2900      	cmp	r1, #0
1a008eb0:	f340 8466 	ble.w	1a009780 <_dtoa_r+0xb50>
1a008eb4:	4bb1      	ldr	r3, [pc, #708]	; (1a00917c <_dtoa_r+0x54c>)
1a008eb6:	f001 020f 	and.w	r2, r1, #15
1a008eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a008ebe:	ed93 7b00 	vldr	d7, [r3]
1a008ec2:	110c      	asrs	r4, r1, #4
1a008ec4:	06e3      	lsls	r3, r4, #27
1a008ec6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a008eca:	f140 8406 	bpl.w	1a0096da <_dtoa_r+0xaaa>
1a008ece:	4bac      	ldr	r3, [pc, #688]	; (1a009180 <_dtoa_r+0x550>)
1a008ed0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a008ed4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a008ed8:	f7fc fc94 	bl	1a005804 <__aeabi_ddiv>
1a008edc:	e9cd 0100 	strd	r0, r1, [sp]
1a008ee0:	f004 040f 	and.w	r4, r4, #15
1a008ee4:	2603      	movs	r6, #3
1a008ee6:	b17c      	cbz	r4, 1a008f08 <_dtoa_r+0x2d8>
1a008ee8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a008eec:	4da4      	ldr	r5, [pc, #656]	; (1a009180 <_dtoa_r+0x550>)
1a008eee:	07e7      	lsls	r7, r4, #31
1a008ef0:	d504      	bpl.n	1a008efc <_dtoa_r+0x2cc>
1a008ef2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a008ef6:	f7fc fb5b 	bl	1a0055b0 <__aeabi_dmul>
1a008efa:	3601      	adds	r6, #1
1a008efc:	1064      	asrs	r4, r4, #1
1a008efe:	f105 0508 	add.w	r5, r5, #8
1a008f02:	d1f4      	bne.n	1a008eee <_dtoa_r+0x2be>
1a008f04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a008f08:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008f0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a008f10:	f7fc fc78 	bl	1a005804 <__aeabi_ddiv>
1a008f14:	e9cd 0100 	strd	r0, r1, [sp]
1a008f18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a008f1a:	b153      	cbz	r3, 1a008f32 <_dtoa_r+0x302>
1a008f1c:	e9dd 4500 	ldrd	r4, r5, [sp]
1a008f20:	2200      	movs	r2, #0
1a008f22:	4b98      	ldr	r3, [pc, #608]	; (1a009184 <_dtoa_r+0x554>)
1a008f24:	4620      	mov	r0, r4
1a008f26:	4629      	mov	r1, r5
1a008f28:	f7fc fdb4 	bl	1a005a94 <__aeabi_dcmplt>
1a008f2c:	2800      	cmp	r0, #0
1a008f2e:	f040 8521 	bne.w	1a009974 <_dtoa_r+0xd44>
1a008f32:	4630      	mov	r0, r6
1a008f34:	f7fc fad2 	bl	1a0054dc <__aeabi_i2d>
1a008f38:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008f3c:	f7fc fb38 	bl	1a0055b0 <__aeabi_dmul>
1a008f40:	4b91      	ldr	r3, [pc, #580]	; (1a009188 <_dtoa_r+0x558>)
1a008f42:	2200      	movs	r2, #0
1a008f44:	f7fc f97e 	bl	1a005244 <__adddf3>
1a008f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008f4a:	4604      	mov	r4, r0
1a008f4c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a008f50:	2b00      	cmp	r3, #0
1a008f52:	f000 83f9 	beq.w	1a009748 <_dtoa_r+0xb18>
1a008f56:	9b06      	ldr	r3, [sp, #24]
1a008f58:	9312      	str	r3, [sp, #72]	; 0x48
1a008f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008f5c:	9310      	str	r3, [sp, #64]	; 0x40
1a008f5e:	e9dd 6700 	ldrd	r6, r7, [sp]
1a008f62:	4639      	mov	r1, r7
1a008f64:	4630      	mov	r0, r6
1a008f66:	f7fc fdbd 	bl	1a005ae4 <__aeabi_d2iz>
1a008f6a:	9000      	str	r0, [sp, #0]
1a008f6c:	f7fc fab6 	bl	1a0054dc <__aeabi_i2d>
1a008f70:	4602      	mov	r2, r0
1a008f72:	460b      	mov	r3, r1
1a008f74:	4630      	mov	r0, r6
1a008f76:	4639      	mov	r1, r7
1a008f78:	f7fc f962 	bl	1a005240 <__aeabi_dsub>
1a008f7c:	4b7f      	ldr	r3, [pc, #508]	; (1a00917c <_dtoa_r+0x54c>)
1a008f7e:	9a00      	ldr	r2, [sp, #0]
1a008f80:	460f      	mov	r7, r1
1a008f82:	9910      	ldr	r1, [sp, #64]	; 0x40
1a008f84:	4606      	mov	r6, r0
1a008f86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a008f8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a008f8c:	9903      	ldr	r1, [sp, #12]
1a008f8e:	3230      	adds	r2, #48	; 0x30
1a008f90:	e9cd 4500 	strd	r4, r5, [sp]
1a008f94:	b2d5      	uxtb	r5, r2
1a008f96:	1c4c      	adds	r4, r1, #1
1a008f98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a008f9c:	2800      	cmp	r0, #0
1a008f9e:	f000 848d 	beq.w	1a0098bc <_dtoa_r+0xc8c>
1a008fa2:	2000      	movs	r0, #0
1a008fa4:	4979      	ldr	r1, [pc, #484]	; (1a00918c <_dtoa_r+0x55c>)
1a008fa6:	f7fc fc2d 	bl	1a005804 <__aeabi_ddiv>
1a008faa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a008fae:	f7fc f947 	bl	1a005240 <__aeabi_dsub>
1a008fb2:	9b03      	ldr	r3, [sp, #12]
1a008fb4:	4632      	mov	r2, r6
1a008fb6:	701d      	strb	r5, [r3, #0]
1a008fb8:	463b      	mov	r3, r7
1a008fba:	e9cd 0100 	strd	r0, r1, [sp]
1a008fbe:	f7fc fd87 	bl	1a005ad0 <__aeabi_dcmpgt>
1a008fc2:	2800      	cmp	r0, #0
1a008fc4:	f040 84ca 	bne.w	1a00995c <_dtoa_r+0xd2c>
1a008fc8:	4632      	mov	r2, r6
1a008fca:	463b      	mov	r3, r7
1a008fcc:	2000      	movs	r0, #0
1a008fce:	496d      	ldr	r1, [pc, #436]	; (1a009184 <_dtoa_r+0x554>)
1a008fd0:	f7fc f936 	bl	1a005240 <__aeabi_dsub>
1a008fd4:	4602      	mov	r2, r0
1a008fd6:	460b      	mov	r3, r1
1a008fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
1a008fdc:	f7fc fd78 	bl	1a005ad0 <__aeabi_dcmpgt>
1a008fe0:	2800      	cmp	r0, #0
1a008fe2:	f040 8526 	bne.w	1a009a32 <_dtoa_r+0xe02>
1a008fe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a008fe8:	2b01      	cmp	r3, #1
1a008fea:	d062      	beq.n	1a0090b2 <_dtoa_r+0x482>
1a008fec:	9a03      	ldr	r2, [sp, #12]
1a008fee:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a008ff2:	4413      	add	r3, r2
1a008ff4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a008ff8:	e9dd 8900 	ldrd	r8, r9, [sp]
1a008ffc:	f8cd b000 	str.w	fp, [sp]
1a009000:	46d3      	mov	fp, sl
1a009002:	469a      	mov	sl, r3
1a009004:	e00c      	b.n	1a009020 <_dtoa_r+0x3f0>
1a009006:	2000      	movs	r0, #0
1a009008:	495e      	ldr	r1, [pc, #376]	; (1a009184 <_dtoa_r+0x554>)
1a00900a:	f7fc f919 	bl	1a005240 <__aeabi_dsub>
1a00900e:	4642      	mov	r2, r8
1a009010:	464b      	mov	r3, r9
1a009012:	f7fc fd3f 	bl	1a005a94 <__aeabi_dcmplt>
1a009016:	2800      	cmp	r0, #0
1a009018:	f040 84eb 	bne.w	1a0099f2 <_dtoa_r+0xdc2>
1a00901c:	45a2      	cmp	sl, r4
1a00901e:	d041      	beq.n	1a0090a4 <_dtoa_r+0x474>
1a009020:	4640      	mov	r0, r8
1a009022:	4649      	mov	r1, r9
1a009024:	2200      	movs	r2, #0
1a009026:	4b5a      	ldr	r3, [pc, #360]	; (1a009190 <_dtoa_r+0x560>)
1a009028:	f7fc fac2 	bl	1a0055b0 <__aeabi_dmul>
1a00902c:	2200      	movs	r2, #0
1a00902e:	4b58      	ldr	r3, [pc, #352]	; (1a009190 <_dtoa_r+0x560>)
1a009030:	4680      	mov	r8, r0
1a009032:	4689      	mov	r9, r1
1a009034:	4630      	mov	r0, r6
1a009036:	4639      	mov	r1, r7
1a009038:	f7fc faba 	bl	1a0055b0 <__aeabi_dmul>
1a00903c:	460f      	mov	r7, r1
1a00903e:	4606      	mov	r6, r0
1a009040:	f7fc fd50 	bl	1a005ae4 <__aeabi_d2iz>
1a009044:	4605      	mov	r5, r0
1a009046:	f7fc fa49 	bl	1a0054dc <__aeabi_i2d>
1a00904a:	4602      	mov	r2, r0
1a00904c:	460b      	mov	r3, r1
1a00904e:	4630      	mov	r0, r6
1a009050:	4639      	mov	r1, r7
1a009052:	f7fc f8f5 	bl	1a005240 <__aeabi_dsub>
1a009056:	3530      	adds	r5, #48	; 0x30
1a009058:	b2ed      	uxtb	r5, r5
1a00905a:	4642      	mov	r2, r8
1a00905c:	464b      	mov	r3, r9
1a00905e:	f804 5b01 	strb.w	r5, [r4], #1
1a009062:	4606      	mov	r6, r0
1a009064:	460f      	mov	r7, r1
1a009066:	f7fc fd15 	bl	1a005a94 <__aeabi_dcmplt>
1a00906a:	4632      	mov	r2, r6
1a00906c:	463b      	mov	r3, r7
1a00906e:	2800      	cmp	r0, #0
1a009070:	d0c9      	beq.n	1a009006 <_dtoa_r+0x3d6>
1a009072:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a009074:	46da      	mov	sl, fp
1a009076:	3301      	adds	r3, #1
1a009078:	f8dd b000 	ldr.w	fp, [sp]
1a00907c:	9306      	str	r3, [sp, #24]
1a00907e:	4659      	mov	r1, fp
1a009080:	4650      	mov	r0, sl
1a009082:	f000 ffe3 	bl	1a00a04c <_Bfree>
1a009086:	2300      	movs	r3, #0
1a009088:	7023      	strb	r3, [r4, #0]
1a00908a:	9b07      	ldr	r3, [sp, #28]
1a00908c:	461a      	mov	r2, r3
1a00908e:	9b06      	ldr	r3, [sp, #24]
1a009090:	6013      	str	r3, [r2, #0]
1a009092:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a009094:	2b00      	cmp	r3, #0
1a009096:	f43f ae09 	beq.w	1a008cac <_dtoa_r+0x7c>
1a00909a:	9803      	ldr	r0, [sp, #12]
1a00909c:	601c      	str	r4, [r3, #0]
1a00909e:	b017      	add	sp, #92	; 0x5c
1a0090a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0090a4:	46da      	mov	sl, fp
1a0090a6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a0090aa:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a0090ae:	f8dd b000 	ldr.w	fp, [sp]
1a0090b2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a0090b6:	e9cd 3400 	strd	r3, r4, [sp]
1a0090ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0090bc:	2b00      	cmp	r3, #0
1a0090be:	f2c0 80c9 	blt.w	1a009254 <_dtoa_r+0x624>
1a0090c2:	9a06      	ldr	r2, [sp, #24]
1a0090c4:	2a0e      	cmp	r2, #14
1a0090c6:	f300 80c5 	bgt.w	1a009254 <_dtoa_r+0x624>
1a0090ca:	4b2c      	ldr	r3, [pc, #176]	; (1a00917c <_dtoa_r+0x54c>)
1a0090cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0090d0:	e9d3 8900 	ldrd	r8, r9, [r3]
1a0090d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0090d6:	2b00      	cmp	r3, #0
1a0090d8:	da17      	bge.n	1a00910a <_dtoa_r+0x4da>
1a0090da:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a0090dc:	2f00      	cmp	r7, #0
1a0090de:	dc14      	bgt.n	1a00910a <_dtoa_r+0x4da>
1a0090e0:	f040 834b 	bne.w	1a00977a <_dtoa_r+0xb4a>
1a0090e4:	2200      	movs	r2, #0
1a0090e6:	4b2b      	ldr	r3, [pc, #172]	; (1a009194 <_dtoa_r+0x564>)
1a0090e8:	4640      	mov	r0, r8
1a0090ea:	4649      	mov	r1, r9
1a0090ec:	f7fc fa60 	bl	1a0055b0 <__aeabi_dmul>
1a0090f0:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0090f4:	f7fc fce2 	bl	1a005abc <__aeabi_dcmpge>
1a0090f8:	2800      	cmp	r0, #0
1a0090fa:	f000 83be 	beq.w	1a00987a <_dtoa_r+0xc4a>
1a0090fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a009100:	463d      	mov	r5, r7
1a009102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009104:	9c03      	ldr	r4, [sp, #12]
1a009106:	43db      	mvns	r3, r3
1a009108:	e260      	b.n	1a0095cc <_dtoa_r+0x99c>
1a00910a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a00910e:	4642      	mov	r2, r8
1a009110:	464b      	mov	r3, r9
1a009112:	4620      	mov	r0, r4
1a009114:	4629      	mov	r1, r5
1a009116:	f7fc fb75 	bl	1a005804 <__aeabi_ddiv>
1a00911a:	f7fc fce3 	bl	1a005ae4 <__aeabi_d2iz>
1a00911e:	9000      	str	r0, [sp, #0]
1a009120:	f7fc f9dc 	bl	1a0054dc <__aeabi_i2d>
1a009124:	4642      	mov	r2, r8
1a009126:	464b      	mov	r3, r9
1a009128:	f7fc fa42 	bl	1a0055b0 <__aeabi_dmul>
1a00912c:	4602      	mov	r2, r0
1a00912e:	460b      	mov	r3, r1
1a009130:	4620      	mov	r0, r4
1a009132:	4629      	mov	r1, r5
1a009134:	f7fc f884 	bl	1a005240 <__aeabi_dsub>
1a009138:	9b00      	ldr	r3, [sp, #0]
1a00913a:	9c03      	ldr	r4, [sp, #12]
1a00913c:	9a06      	ldr	r2, [sp, #24]
1a00913e:	3330      	adds	r3, #48	; 0x30
1a009140:	f804 3b01 	strb.w	r3, [r4], #1
1a009144:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009146:	3201      	adds	r2, #1
1a009148:	2b01      	cmp	r3, #1
1a00914a:	4606      	mov	r6, r0
1a00914c:	460f      	mov	r7, r1
1a00914e:	9206      	str	r2, [sp, #24]
1a009150:	d054      	beq.n	1a0091fc <_dtoa_r+0x5cc>
1a009152:	2200      	movs	r2, #0
1a009154:	4b0e      	ldr	r3, [pc, #56]	; (1a009190 <_dtoa_r+0x560>)
1a009156:	f7fc fa2b 	bl	1a0055b0 <__aeabi_dmul>
1a00915a:	2200      	movs	r2, #0
1a00915c:	2300      	movs	r3, #0
1a00915e:	4606      	mov	r6, r0
1a009160:	460f      	mov	r7, r1
1a009162:	f7fc fc8d 	bl	1a005a80 <__aeabi_dcmpeq>
1a009166:	2800      	cmp	r0, #0
1a009168:	d189      	bne.n	1a00907e <_dtoa_r+0x44e>
1a00916a:	f8cd b000 	str.w	fp, [sp]
1a00916e:	2501      	movs	r5, #1
1a009170:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a009174:	f8cd a008 	str.w	sl, [sp, #8]
1a009178:	e019      	b.n	1a0091ae <_dtoa_r+0x57e>
1a00917a:	bf00      	nop
1a00917c:	1a00b318 	.word	0x1a00b318
1a009180:	1a00b2f0 	.word	0x1a00b2f0
1a009184:	3ff00000 	.word	0x3ff00000
1a009188:	401c0000 	.word	0x401c0000
1a00918c:	3fe00000 	.word	0x3fe00000
1a009190:	40240000 	.word	0x40240000
1a009194:	40140000 	.word	0x40140000
1a009198:	f7fc fa0a 	bl	1a0055b0 <__aeabi_dmul>
1a00919c:	2200      	movs	r2, #0
1a00919e:	2300      	movs	r3, #0
1a0091a0:	4606      	mov	r6, r0
1a0091a2:	460f      	mov	r7, r1
1a0091a4:	f7fc fc6c 	bl	1a005a80 <__aeabi_dcmpeq>
1a0091a8:	2800      	cmp	r0, #0
1a0091aa:	f040 835c 	bne.w	1a009866 <_dtoa_r+0xc36>
1a0091ae:	4642      	mov	r2, r8
1a0091b0:	464b      	mov	r3, r9
1a0091b2:	4630      	mov	r0, r6
1a0091b4:	4639      	mov	r1, r7
1a0091b6:	f7fc fb25 	bl	1a005804 <__aeabi_ddiv>
1a0091ba:	f7fc fc93 	bl	1a005ae4 <__aeabi_d2iz>
1a0091be:	4682      	mov	sl, r0
1a0091c0:	f7fc f98c 	bl	1a0054dc <__aeabi_i2d>
1a0091c4:	4642      	mov	r2, r8
1a0091c6:	464b      	mov	r3, r9
1a0091c8:	f7fc f9f2 	bl	1a0055b0 <__aeabi_dmul>
1a0091cc:	4602      	mov	r2, r0
1a0091ce:	460b      	mov	r3, r1
1a0091d0:	4630      	mov	r0, r6
1a0091d2:	4639      	mov	r1, r7
1a0091d4:	f7fc f834 	bl	1a005240 <__aeabi_dsub>
1a0091d8:	3501      	adds	r5, #1
1a0091da:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a0091de:	45ab      	cmp	fp, r5
1a0091e0:	4606      	mov	r6, r0
1a0091e2:	460f      	mov	r7, r1
1a0091e4:	f04f 0200 	mov.w	r2, #0
1a0091e8:	4ba7      	ldr	r3, [pc, #668]	; (1a009488 <_dtoa_r+0x858>)
1a0091ea:	f804 cb01 	strb.w	ip, [r4], #1
1a0091ee:	d1d3      	bne.n	1a009198 <_dtoa_r+0x568>
1a0091f0:	f8dd b000 	ldr.w	fp, [sp]
1a0091f4:	f8cd a000 	str.w	sl, [sp]
1a0091f8:	f8dd a008 	ldr.w	sl, [sp, #8]
1a0091fc:	4632      	mov	r2, r6
1a0091fe:	463b      	mov	r3, r7
1a009200:	4630      	mov	r0, r6
1a009202:	4639      	mov	r1, r7
1a009204:	f7fc f81e 	bl	1a005244 <__adddf3>
1a009208:	4642      	mov	r2, r8
1a00920a:	464b      	mov	r3, r9
1a00920c:	4606      	mov	r6, r0
1a00920e:	460f      	mov	r7, r1
1a009210:	f7fc fc5e 	bl	1a005ad0 <__aeabi_dcmpgt>
1a009214:	b960      	cbnz	r0, 1a009230 <_dtoa_r+0x600>
1a009216:	4642      	mov	r2, r8
1a009218:	464b      	mov	r3, r9
1a00921a:	4630      	mov	r0, r6
1a00921c:	4639      	mov	r1, r7
1a00921e:	f7fc fc2f 	bl	1a005a80 <__aeabi_dcmpeq>
1a009222:	2800      	cmp	r0, #0
1a009224:	f43f af2b 	beq.w	1a00907e <_dtoa_r+0x44e>
1a009228:	9b00      	ldr	r3, [sp, #0]
1a00922a:	07db      	lsls	r3, r3, #31
1a00922c:	f57f af27 	bpl.w	1a00907e <_dtoa_r+0x44e>
1a009230:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a009234:	9a03      	ldr	r2, [sp, #12]
1a009236:	1e63      	subs	r3, r4, #1
1a009238:	e004      	b.n	1a009244 <_dtoa_r+0x614>
1a00923a:	429a      	cmp	r2, r3
1a00923c:	f000 83c0 	beq.w	1a0099c0 <_dtoa_r+0xd90>
1a009240:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a009244:	2d39      	cmp	r5, #57	; 0x39
1a009246:	f103 0401 	add.w	r4, r3, #1
1a00924a:	d0f6      	beq.n	1a00923a <_dtoa_r+0x60a>
1a00924c:	1c6a      	adds	r2, r5, #1
1a00924e:	b2d2      	uxtb	r2, r2
1a009250:	701a      	strb	r2, [r3, #0]
1a009252:	e714      	b.n	1a00907e <_dtoa_r+0x44e>
1a009254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a009256:	2a00      	cmp	r2, #0
1a009258:	d03c      	beq.n	1a0092d4 <_dtoa_r+0x6a4>
1a00925a:	9a02      	ldr	r2, [sp, #8]
1a00925c:	2a01      	cmp	r2, #1
1a00925e:	f340 8258 	ble.w	1a009712 <_dtoa_r+0xae2>
1a009262:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009264:	1e5e      	subs	r6, r3, #1
1a009266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a009268:	42b3      	cmp	r3, r6
1a00926a:	f280 8234 	bge.w	1a0096d6 <_dtoa_r+0xaa6>
1a00926e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a009270:	960c      	str	r6, [sp, #48]	; 0x30
1a009272:	1af3      	subs	r3, r6, r3
1a009274:	4499      	add	r9, r3
1a009276:	2600      	movs	r6, #0
1a009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00927a:	2b00      	cmp	r3, #0
1a00927c:	f2c0 82f8 	blt.w	1a009870 <_dtoa_r+0xc40>
1a009280:	9a08      	ldr	r2, [sp, #32]
1a009282:	4614      	mov	r4, r2
1a009284:	441a      	add	r2, r3
1a009286:	4498      	add	r8, r3
1a009288:	9208      	str	r2, [sp, #32]
1a00928a:	2101      	movs	r1, #1
1a00928c:	4650      	mov	r0, sl
1a00928e:	f000 ff7d 	bl	1a00a18c <__i2b>
1a009292:	4605      	mov	r5, r0
1a009294:	e021      	b.n	1a0092da <_dtoa_r+0x6aa>
1a009296:	2301      	movs	r3, #1
1a009298:	f1b8 0f00 	cmp.w	r8, #0
1a00929c:	930d      	str	r3, [sp, #52]	; 0x34
1a00929e:	f6bf ad77 	bge.w	1a008d90 <_dtoa_r+0x160>
1a0092a2:	f1c4 0301 	rsb	r3, r4, #1
1a0092a6:	9308      	str	r3, [sp, #32]
1a0092a8:	f04f 0800 	mov.w	r8, #0
1a0092ac:	e572      	b.n	1a008d94 <_dtoa_r+0x164>
1a0092ae:	4648      	mov	r0, r9
1a0092b0:	f7fc f914 	bl	1a0054dc <__aeabi_i2d>
1a0092b4:	4632      	mov	r2, r6
1a0092b6:	463b      	mov	r3, r7
1a0092b8:	f7fc fbe2 	bl	1a005a80 <__aeabi_dcmpeq>
1a0092bc:	2800      	cmp	r0, #0
1a0092be:	f47f ad4d 	bne.w	1a008d5c <_dtoa_r+0x12c>
1a0092c2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a0092c6:	e549      	b.n	1a008d5c <_dtoa_r+0x12c>
1a0092c8:	4b70      	ldr	r3, [pc, #448]	; (1a00948c <_dtoa_r+0x85c>)
1a0092ca:	9303      	str	r3, [sp, #12]
1a0092cc:	9803      	ldr	r0, [sp, #12]
1a0092ce:	b017      	add	sp, #92	; 0x5c
1a0092d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0092d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a0092d6:	9c08      	ldr	r4, [sp, #32]
1a0092d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0092da:	2c00      	cmp	r4, #0
1a0092dc:	dd0c      	ble.n	1a0092f8 <_dtoa_r+0x6c8>
1a0092de:	f1b8 0f00 	cmp.w	r8, #0
1a0092e2:	dd09      	ble.n	1a0092f8 <_dtoa_r+0x6c8>
1a0092e4:	4544      	cmp	r4, r8
1a0092e6:	9a08      	ldr	r2, [sp, #32]
1a0092e8:	4623      	mov	r3, r4
1a0092ea:	bfa8      	it	ge
1a0092ec:	4643      	movge	r3, r8
1a0092ee:	1ad2      	subs	r2, r2, r3
1a0092f0:	9208      	str	r2, [sp, #32]
1a0092f2:	1ae4      	subs	r4, r4, r3
1a0092f4:	eba8 0803 	sub.w	r8, r8, r3
1a0092f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0092fa:	b1d3      	cbz	r3, 1a009332 <_dtoa_r+0x702>
1a0092fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0092fe:	2b00      	cmp	r3, #0
1a009300:	f000 8189 	beq.w	1a009616 <_dtoa_r+0x9e6>
1a009304:	2e00      	cmp	r6, #0
1a009306:	dd10      	ble.n	1a00932a <_dtoa_r+0x6fa>
1a009308:	4629      	mov	r1, r5
1a00930a:	4632      	mov	r2, r6
1a00930c:	4650      	mov	r0, sl
1a00930e:	f000 ffdf 	bl	1a00a2d0 <__pow5mult>
1a009312:	465a      	mov	r2, fp
1a009314:	4601      	mov	r1, r0
1a009316:	4605      	mov	r5, r0
1a009318:	4650      	mov	r0, sl
1a00931a:	f000 ff41 	bl	1a00a1a0 <__multiply>
1a00931e:	4659      	mov	r1, fp
1a009320:	4607      	mov	r7, r0
1a009322:	4650      	mov	r0, sl
1a009324:	f000 fe92 	bl	1a00a04c <_Bfree>
1a009328:	46bb      	mov	fp, r7
1a00932a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00932c:	1b9a      	subs	r2, r3, r6
1a00932e:	f040 8173 	bne.w	1a009618 <_dtoa_r+0x9e8>
1a009332:	2101      	movs	r1, #1
1a009334:	4650      	mov	r0, sl
1a009336:	f000 ff29 	bl	1a00a18c <__i2b>
1a00933a:	f1b9 0f00 	cmp.w	r9, #0
1a00933e:	4607      	mov	r7, r0
1a009340:	f300 808e 	bgt.w	1a009460 <_dtoa_r+0x830>
1a009344:	9b02      	ldr	r3, [sp, #8]
1a009346:	2b01      	cmp	r3, #1
1a009348:	f340 8171 	ble.w	1a00962e <_dtoa_r+0x9fe>
1a00934c:	2600      	movs	r6, #0
1a00934e:	2001      	movs	r0, #1
1a009350:	f1b9 0f00 	cmp.w	r9, #0
1a009354:	f040 808f 	bne.w	1a009476 <_dtoa_r+0x846>
1a009358:	4440      	add	r0, r8
1a00935a:	f010 001f 	ands.w	r0, r0, #31
1a00935e:	d075      	beq.n	1a00944c <_dtoa_r+0x81c>
1a009360:	f1c0 0320 	rsb	r3, r0, #32
1a009364:	2b04      	cmp	r3, #4
1a009366:	f340 836d 	ble.w	1a009a44 <_dtoa_r+0xe14>
1a00936a:	f1c0 001c 	rsb	r0, r0, #28
1a00936e:	9b08      	ldr	r3, [sp, #32]
1a009370:	4403      	add	r3, r0
1a009372:	9308      	str	r3, [sp, #32]
1a009374:	4404      	add	r4, r0
1a009376:	4480      	add	r8, r0
1a009378:	9b08      	ldr	r3, [sp, #32]
1a00937a:	2b00      	cmp	r3, #0
1a00937c:	dd05      	ble.n	1a00938a <_dtoa_r+0x75a>
1a00937e:	4659      	mov	r1, fp
1a009380:	461a      	mov	r2, r3
1a009382:	4650      	mov	r0, sl
1a009384:	f000 fff4 	bl	1a00a370 <__lshift>
1a009388:	4683      	mov	fp, r0
1a00938a:	f1b8 0f00 	cmp.w	r8, #0
1a00938e:	dd05      	ble.n	1a00939c <_dtoa_r+0x76c>
1a009390:	4639      	mov	r1, r7
1a009392:	4642      	mov	r2, r8
1a009394:	4650      	mov	r0, sl
1a009396:	f000 ffeb 	bl	1a00a370 <__lshift>
1a00939a:	4607      	mov	r7, r0
1a00939c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00939e:	2b00      	cmp	r3, #0
1a0093a0:	f040 811e 	bne.w	1a0095e0 <_dtoa_r+0x9b0>
1a0093a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0093a6:	2b00      	cmp	r3, #0
1a0093a8:	f340 80f5 	ble.w	1a009596 <_dtoa_r+0x966>
1a0093ac:	9b06      	ldr	r3, [sp, #24]
1a0093ae:	3301      	adds	r3, #1
1a0093b0:	9306      	str	r3, [sp, #24]
1a0093b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0093b4:	2b00      	cmp	r3, #0
1a0093b6:	d177      	bne.n	1a0094a8 <_dtoa_r+0x878>
1a0093b8:	9c03      	ldr	r4, [sp, #12]
1a0093ba:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0093be:	2601      	movs	r6, #1
1a0093c0:	e003      	b.n	1a0093ca <_dtoa_r+0x79a>
1a0093c2:	f000 fe4d 	bl	1a00a060 <__multadd>
1a0093c6:	3601      	adds	r6, #1
1a0093c8:	4683      	mov	fp, r0
1a0093ca:	4639      	mov	r1, r7
1a0093cc:	4658      	mov	r0, fp
1a0093ce:	f7ff fb9b 	bl	1a008b08 <quorem>
1a0093d2:	4546      	cmp	r6, r8
1a0093d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0093d8:	f804 9b01 	strb.w	r9, [r4], #1
1a0093dc:	f04f 0300 	mov.w	r3, #0
1a0093e0:	f04f 020a 	mov.w	r2, #10
1a0093e4:	4659      	mov	r1, fp
1a0093e6:	4650      	mov	r0, sl
1a0093e8:	dbeb      	blt.n	1a0093c2 <_dtoa_r+0x792>
1a0093ea:	2300      	movs	r3, #0
1a0093ec:	9300      	str	r3, [sp, #0]
1a0093ee:	4659      	mov	r1, fp
1a0093f0:	2201      	movs	r2, #1
1a0093f2:	4650      	mov	r0, sl
1a0093f4:	f000 ffbc 	bl	1a00a370 <__lshift>
1a0093f8:	4639      	mov	r1, r7
1a0093fa:	4683      	mov	fp, r0
1a0093fc:	f001 f812 	bl	1a00a424 <__mcmp>
1a009400:	2800      	cmp	r0, #0
1a009402:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a009406:	f340 816f 	ble.w	1a0096e8 <_dtoa_r+0xab8>
1a00940a:	1e63      	subs	r3, r4, #1
1a00940c:	9903      	ldr	r1, [sp, #12]
1a00940e:	e004      	b.n	1a00941a <_dtoa_r+0x7ea>
1a009410:	4299      	cmp	r1, r3
1a009412:	f000 8177 	beq.w	1a009704 <_dtoa_r+0xad4>
1a009416:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00941a:	2a39      	cmp	r2, #57	; 0x39
1a00941c:	f103 0401 	add.w	r4, r3, #1
1a009420:	d0f6      	beq.n	1a009410 <_dtoa_r+0x7e0>
1a009422:	3201      	adds	r2, #1
1a009424:	701a      	strb	r2, [r3, #0]
1a009426:	4639      	mov	r1, r7
1a009428:	4650      	mov	r0, sl
1a00942a:	f000 fe0f 	bl	1a00a04c <_Bfree>
1a00942e:	2d00      	cmp	r5, #0
1a009430:	f43f ae25 	beq.w	1a00907e <_dtoa_r+0x44e>
1a009434:	9900      	ldr	r1, [sp, #0]
1a009436:	b121      	cbz	r1, 1a009442 <_dtoa_r+0x812>
1a009438:	42a9      	cmp	r1, r5
1a00943a:	d002      	beq.n	1a009442 <_dtoa_r+0x812>
1a00943c:	4650      	mov	r0, sl
1a00943e:	f000 fe05 	bl	1a00a04c <_Bfree>
1a009442:	4629      	mov	r1, r5
1a009444:	4650      	mov	r0, sl
1a009446:	f000 fe01 	bl	1a00a04c <_Bfree>
1a00944a:	e618      	b.n	1a00907e <_dtoa_r+0x44e>
1a00944c:	201c      	movs	r0, #28
1a00944e:	e78e      	b.n	1a00936e <_dtoa_r+0x73e>
1a009450:	2401      	movs	r4, #1
1a009452:	e4b6      	b.n	1a008dc2 <_dtoa_r+0x192>
1a009454:	f1c3 0620 	rsb	r6, r3, #32
1a009458:	9b00      	ldr	r3, [sp, #0]
1a00945a:	fa03 f006 	lsl.w	r0, r3, r6
1a00945e:	e447      	b.n	1a008cf0 <_dtoa_r+0xc0>
1a009460:	4601      	mov	r1, r0
1a009462:	464a      	mov	r2, r9
1a009464:	4650      	mov	r0, sl
1a009466:	f000 ff33 	bl	1a00a2d0 <__pow5mult>
1a00946a:	9b02      	ldr	r3, [sp, #8]
1a00946c:	2b01      	cmp	r3, #1
1a00946e:	4607      	mov	r7, r0
1a009470:	f340 81b2 	ble.w	1a0097d8 <_dtoa_r+0xba8>
1a009474:	2600      	movs	r6, #0
1a009476:	693b      	ldr	r3, [r7, #16]
1a009478:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a00947c:	6918      	ldr	r0, [r3, #16]
1a00947e:	f000 fe35 	bl	1a00a0ec <__hi0bits>
1a009482:	f1c0 0020 	rsb	r0, r0, #32
1a009486:	e767      	b.n	1a009358 <_dtoa_r+0x728>
1a009488:	40240000 	.word	0x40240000
1a00948c:	1a00b2b8 	.word	0x1a00b2b8
1a009490:	4629      	mov	r1, r5
1a009492:	2300      	movs	r3, #0
1a009494:	220a      	movs	r2, #10
1a009496:	4650      	mov	r0, sl
1a009498:	f000 fde2 	bl	1a00a060 <__multadd>
1a00949c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00949e:	2b00      	cmp	r3, #0
1a0094a0:	4605      	mov	r5, r0
1a0094a2:	f340 82c1 	ble.w	1a009a28 <_dtoa_r+0xdf8>
1a0094a6:	9309      	str	r3, [sp, #36]	; 0x24
1a0094a8:	2c00      	cmp	r4, #0
1a0094aa:	f300 810d 	bgt.w	1a0096c8 <_dtoa_r+0xa98>
1a0094ae:	2e00      	cmp	r6, #0
1a0094b0:	f040 81c5 	bne.w	1a00983e <_dtoa_r+0xc0e>
1a0094b4:	46a8      	mov	r8, r5
1a0094b6:	9b00      	ldr	r3, [sp, #0]
1a0094b8:	9902      	ldr	r1, [sp, #8]
1a0094ba:	9e03      	ldr	r6, [sp, #12]
1a0094bc:	f003 0201 	and.w	r2, r3, #1
1a0094c0:	920b      	str	r2, [sp, #44]	; 0x2c
1a0094c2:	430a      	orrs	r2, r1
1a0094c4:	920a      	str	r2, [sp, #40]	; 0x28
1a0094c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0094c8:	1e73      	subs	r3, r6, #1
1a0094ca:	441a      	add	r2, r3
1a0094cc:	9209      	str	r2, [sp, #36]	; 0x24
1a0094ce:	463c      	mov	r4, r7
1a0094d0:	4621      	mov	r1, r4
1a0094d2:	4658      	mov	r0, fp
1a0094d4:	f7ff fb18 	bl	1a008b08 <quorem>
1a0094d8:	4629      	mov	r1, r5
1a0094da:	9000      	str	r0, [sp, #0]
1a0094dc:	4658      	mov	r0, fp
1a0094de:	f000 ffa1 	bl	1a00a424 <__mcmp>
1a0094e2:	4642      	mov	r2, r8
1a0094e4:	4607      	mov	r7, r0
1a0094e6:	4621      	mov	r1, r4
1a0094e8:	4650      	mov	r0, sl
1a0094ea:	f000 ffb7 	bl	1a00a45c <__mdiff>
1a0094ee:	9b00      	ldr	r3, [sp, #0]
1a0094f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a0094f4:	68c3      	ldr	r3, [r0, #12]
1a0094f6:	4681      	mov	r9, r0
1a0094f8:	2b00      	cmp	r3, #0
1a0094fa:	d13e      	bne.n	1a00957a <_dtoa_r+0x94a>
1a0094fc:	4601      	mov	r1, r0
1a0094fe:	4658      	mov	r0, fp
1a009500:	9208      	str	r2, [sp, #32]
1a009502:	f000 ff8f 	bl	1a00a424 <__mcmp>
1a009506:	4649      	mov	r1, r9
1a009508:	9004      	str	r0, [sp, #16]
1a00950a:	4650      	mov	r0, sl
1a00950c:	f000 fd9e 	bl	1a00a04c <_Bfree>
1a009510:	9b04      	ldr	r3, [sp, #16]
1a009512:	9a08      	ldr	r2, [sp, #32]
1a009514:	b91b      	cbnz	r3, 1a00951e <_dtoa_r+0x8ee>
1a009516:	990a      	ldr	r1, [sp, #40]	; 0x28
1a009518:	2900      	cmp	r1, #0
1a00951a:	f000 8271 	beq.w	1a009a00 <_dtoa_r+0xdd0>
1a00951e:	2f00      	cmp	r7, #0
1a009520:	f106 0901 	add.w	r9, r6, #1
1a009524:	f2c0 816e 	blt.w	1a009804 <_dtoa_r+0xbd4>
1a009528:	9902      	ldr	r1, [sp, #8]
1a00952a:	430f      	orrs	r7, r1
1a00952c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00952e:	4339      	orrs	r1, r7
1a009530:	f000 8168 	beq.w	1a009804 <_dtoa_r+0xbd4>
1a009534:	2b00      	cmp	r3, #0
1a009536:	f300 81a2 	bgt.w	1a00987e <_dtoa_r+0xc4e>
1a00953a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00953c:	7032      	strb	r2, [r6, #0]
1a00953e:	42b3      	cmp	r3, r6
1a009540:	f000 81a9 	beq.w	1a009896 <_dtoa_r+0xc66>
1a009544:	4659      	mov	r1, fp
1a009546:	2300      	movs	r3, #0
1a009548:	220a      	movs	r2, #10
1a00954a:	4650      	mov	r0, sl
1a00954c:	f000 fd88 	bl	1a00a060 <__multadd>
1a009550:	4545      	cmp	r5, r8
1a009552:	4683      	mov	fp, r0
1a009554:	4629      	mov	r1, r5
1a009556:	f04f 0300 	mov.w	r3, #0
1a00955a:	f04f 020a 	mov.w	r2, #10
1a00955e:	4650      	mov	r0, sl
1a009560:	d013      	beq.n	1a00958a <_dtoa_r+0x95a>
1a009562:	f000 fd7d 	bl	1a00a060 <__multadd>
1a009566:	4641      	mov	r1, r8
1a009568:	4605      	mov	r5, r0
1a00956a:	2300      	movs	r3, #0
1a00956c:	220a      	movs	r2, #10
1a00956e:	4650      	mov	r0, sl
1a009570:	f000 fd76 	bl	1a00a060 <__multadd>
1a009574:	464e      	mov	r6, r9
1a009576:	4680      	mov	r8, r0
1a009578:	e7aa      	b.n	1a0094d0 <_dtoa_r+0x8a0>
1a00957a:	4601      	mov	r1, r0
1a00957c:	4650      	mov	r0, sl
1a00957e:	9204      	str	r2, [sp, #16]
1a009580:	f000 fd64 	bl	1a00a04c <_Bfree>
1a009584:	2301      	movs	r3, #1
1a009586:	9a04      	ldr	r2, [sp, #16]
1a009588:	e7c9      	b.n	1a00951e <_dtoa_r+0x8ee>
1a00958a:	f000 fd69 	bl	1a00a060 <__multadd>
1a00958e:	464e      	mov	r6, r9
1a009590:	4605      	mov	r5, r0
1a009592:	4680      	mov	r8, r0
1a009594:	e79c      	b.n	1a0094d0 <_dtoa_r+0x8a0>
1a009596:	9b02      	ldr	r3, [sp, #8]
1a009598:	2b02      	cmp	r3, #2
1a00959a:	f340 8082 	ble.w	1a0096a2 <_dtoa_r+0xa72>
1a00959e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0095a0:	2b00      	cmp	r3, #0
1a0095a2:	f47f adae 	bne.w	1a009102 <_dtoa_r+0x4d2>
1a0095a6:	4639      	mov	r1, r7
1a0095a8:	2205      	movs	r2, #5
1a0095aa:	4650      	mov	r0, sl
1a0095ac:	f000 fd58 	bl	1a00a060 <__multadd>
1a0095b0:	4601      	mov	r1, r0
1a0095b2:	4607      	mov	r7, r0
1a0095b4:	4658      	mov	r0, fp
1a0095b6:	f000 ff35 	bl	1a00a424 <__mcmp>
1a0095ba:	2800      	cmp	r0, #0
1a0095bc:	f77f ada1 	ble.w	1a009102 <_dtoa_r+0x4d2>
1a0095c0:	9c03      	ldr	r4, [sp, #12]
1a0095c2:	9b06      	ldr	r3, [sp, #24]
1a0095c4:	2231      	movs	r2, #49	; 0x31
1a0095c6:	f804 2b01 	strb.w	r2, [r4], #1
1a0095ca:	3301      	adds	r3, #1
1a0095cc:	3301      	adds	r3, #1
1a0095ce:	4639      	mov	r1, r7
1a0095d0:	4650      	mov	r0, sl
1a0095d2:	9306      	str	r3, [sp, #24]
1a0095d4:	f000 fd3a 	bl	1a00a04c <_Bfree>
1a0095d8:	2d00      	cmp	r5, #0
1a0095da:	f47f af32 	bne.w	1a009442 <_dtoa_r+0x812>
1a0095de:	e54e      	b.n	1a00907e <_dtoa_r+0x44e>
1a0095e0:	4639      	mov	r1, r7
1a0095e2:	4658      	mov	r0, fp
1a0095e4:	f000 ff1e 	bl	1a00a424 <__mcmp>
1a0095e8:	2800      	cmp	r0, #0
1a0095ea:	f6bf aedb 	bge.w	1a0093a4 <_dtoa_r+0x774>
1a0095ee:	4659      	mov	r1, fp
1a0095f0:	2300      	movs	r3, #0
1a0095f2:	220a      	movs	r2, #10
1a0095f4:	4650      	mov	r0, sl
1a0095f6:	f000 fd33 	bl	1a00a060 <__multadd>
1a0095fa:	9b06      	ldr	r3, [sp, #24]
1a0095fc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a009600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a009602:	4683      	mov	fp, r0
1a009604:	2b00      	cmp	r3, #0
1a009606:	f47f af43 	bne.w	1a009490 <_dtoa_r+0x860>
1a00960a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00960c:	2b00      	cmp	r3, #0
1a00960e:	f340 8202 	ble.w	1a009a16 <_dtoa_r+0xde6>
1a009612:	9309      	str	r3, [sp, #36]	; 0x24
1a009614:	e6d0      	b.n	1a0093b8 <_dtoa_r+0x788>
1a009616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a009618:	4659      	mov	r1, fp
1a00961a:	4650      	mov	r0, sl
1a00961c:	f000 fe58 	bl	1a00a2d0 <__pow5mult>
1a009620:	4683      	mov	fp, r0
1a009622:	e686      	b.n	1a009332 <_dtoa_r+0x702>
1a009624:	4b9f      	ldr	r3, [pc, #636]	; (1a0098a4 <_dtoa_r+0xc74>)
1a009626:	9303      	str	r3, [sp, #12]
1a009628:	3303      	adds	r3, #3
1a00962a:	f7ff bbe5 	b.w	1a008df8 <_dtoa_r+0x1c8>
1a00962e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a009632:	2900      	cmp	r1, #0
1a009634:	f47f ae8a 	bne.w	1a00934c <_dtoa_r+0x71c>
1a009638:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00963c:	2b00      	cmp	r3, #0
1a00963e:	f000 80d5 	beq.w	1a0097ec <_dtoa_r+0xbbc>
1a009642:	9e00      	ldr	r6, [sp, #0]
1a009644:	e683      	b.n	1a00934e <_dtoa_r+0x71e>
1a009646:	2301      	movs	r3, #1
1a009648:	930b      	str	r3, [sp, #44]	; 0x2c
1a00964a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00964c:	2800      	cmp	r0, #0
1a00964e:	dd46      	ble.n	1a0096de <_dtoa_r+0xaae>
1a009650:	900f      	str	r0, [sp, #60]	; 0x3c
1a009652:	9009      	str	r0, [sp, #36]	; 0x24
1a009654:	2100      	movs	r1, #0
1a009656:	2817      	cmp	r0, #23
1a009658:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00965c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00965e:	f77f ac19 	ble.w	1a008e94 <_dtoa_r+0x264>
1a009662:	2201      	movs	r2, #1
1a009664:	2304      	movs	r3, #4
1a009666:	005b      	lsls	r3, r3, #1
1a009668:	f103 0614 	add.w	r6, r3, #20
1a00966c:	42b0      	cmp	r0, r6
1a00966e:	4611      	mov	r1, r2
1a009670:	f102 0201 	add.w	r2, r2, #1
1a009674:	d2f7      	bcs.n	1a009666 <_dtoa_r+0xa36>
1a009676:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a00967a:	e40b      	b.n	1a008e94 <_dtoa_r+0x264>
1a00967c:	2301      	movs	r3, #1
1a00967e:	930b      	str	r3, [sp, #44]	; 0x2c
1a009680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009682:	9a06      	ldr	r2, [sp, #24]
1a009684:	4413      	add	r3, r2
1a009686:	930f      	str	r3, [sp, #60]	; 0x3c
1a009688:	3301      	adds	r3, #1
1a00968a:	2b01      	cmp	r3, #1
1a00968c:	4618      	mov	r0, r3
1a00968e:	9309      	str	r3, [sp, #36]	; 0x24
1a009690:	bfb8      	it	lt
1a009692:	2001      	movlt	r0, #1
1a009694:	e7de      	b.n	1a009654 <_dtoa_r+0xa24>
1a009696:	2300      	movs	r3, #0
1a009698:	930b      	str	r3, [sp, #44]	; 0x2c
1a00969a:	e7f1      	b.n	1a009680 <_dtoa_r+0xa50>
1a00969c:	2300      	movs	r3, #0
1a00969e:	930b      	str	r3, [sp, #44]	; 0x2c
1a0096a0:	e7d3      	b.n	1a00964a <_dtoa_r+0xa1a>
1a0096a2:	9b06      	ldr	r3, [sp, #24]
1a0096a4:	3301      	adds	r3, #1
1a0096a6:	9306      	str	r3, [sp, #24]
1a0096a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0096aa:	2b00      	cmp	r3, #0
1a0096ac:	f47f aefc 	bne.w	1a0094a8 <_dtoa_r+0x878>
1a0096b0:	4639      	mov	r1, r7
1a0096b2:	4658      	mov	r0, fp
1a0096b4:	f7ff fa28 	bl	1a008b08 <quorem>
1a0096b8:	9c03      	ldr	r4, [sp, #12]
1a0096ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a0096be:	2300      	movs	r3, #0
1a0096c0:	f804 9b01 	strb.w	r9, [r4], #1
1a0096c4:	9300      	str	r3, [sp, #0]
1a0096c6:	e692      	b.n	1a0093ee <_dtoa_r+0x7be>
1a0096c8:	4629      	mov	r1, r5
1a0096ca:	4622      	mov	r2, r4
1a0096cc:	4650      	mov	r0, sl
1a0096ce:	f000 fe4f 	bl	1a00a370 <__lshift>
1a0096d2:	4605      	mov	r5, r0
1a0096d4:	e6eb      	b.n	1a0094ae <_dtoa_r+0x87e>
1a0096d6:	1b9e      	subs	r6, r3, r6
1a0096d8:	e5ce      	b.n	1a009278 <_dtoa_r+0x648>
1a0096da:	2602      	movs	r6, #2
1a0096dc:	e403      	b.n	1a008ee6 <_dtoa_r+0x2b6>
1a0096de:	2501      	movs	r5, #1
1a0096e0:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a0096e4:	f7ff bbd2 	b.w	1a008e8c <_dtoa_r+0x25c>
1a0096e8:	d103      	bne.n	1a0096f2 <_dtoa_r+0xac2>
1a0096ea:	f019 0f01 	tst.w	r9, #1
1a0096ee:	f47f ae8c 	bne.w	1a00940a <_dtoa_r+0x7da>
1a0096f2:	1e63      	subs	r3, r4, #1
1a0096f4:	e001      	b.n	1a0096fa <_dtoa_r+0xaca>
1a0096f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a0096fa:	2a30      	cmp	r2, #48	; 0x30
1a0096fc:	f103 0401 	add.w	r4, r3, #1
1a009700:	d0f9      	beq.n	1a0096f6 <_dtoa_r+0xac6>
1a009702:	e690      	b.n	1a009426 <_dtoa_r+0x7f6>
1a009704:	9a06      	ldr	r2, [sp, #24]
1a009706:	3201      	adds	r2, #1
1a009708:	9206      	str	r2, [sp, #24]
1a00970a:	9a03      	ldr	r2, [sp, #12]
1a00970c:	2331      	movs	r3, #49	; 0x31
1a00970e:	7013      	strb	r3, [r2, #0]
1a009710:	e689      	b.n	1a009426 <_dtoa_r+0x7f6>
1a009712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a009714:	2a00      	cmp	r2, #0
1a009716:	f000 8126 	beq.w	1a009966 <_dtoa_r+0xd36>
1a00971a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a00971e:	9a08      	ldr	r2, [sp, #32]
1a009720:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a009722:	4614      	mov	r4, r2
1a009724:	441a      	add	r2, r3
1a009726:	4498      	add	r8, r3
1a009728:	9208      	str	r2, [sp, #32]
1a00972a:	e5ae      	b.n	1a00928a <_dtoa_r+0x65a>
1a00972c:	4630      	mov	r0, r6
1a00972e:	f7fb fed5 	bl	1a0054dc <__aeabi_i2d>
1a009732:	e9dd 2300 	ldrd	r2, r3, [sp]
1a009736:	f7fb ff3b 	bl	1a0055b0 <__aeabi_dmul>
1a00973a:	2200      	movs	r2, #0
1a00973c:	4b5a      	ldr	r3, [pc, #360]	; (1a0098a8 <_dtoa_r+0xc78>)
1a00973e:	f7fb fd81 	bl	1a005244 <__adddf3>
1a009742:	4604      	mov	r4, r0
1a009744:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a009748:	2200      	movs	r2, #0
1a00974a:	4b58      	ldr	r3, [pc, #352]	; (1a0098ac <_dtoa_r+0xc7c>)
1a00974c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a009750:	f7fb fd76 	bl	1a005240 <__aeabi_dsub>
1a009754:	4622      	mov	r2, r4
1a009756:	462b      	mov	r3, r5
1a009758:	4606      	mov	r6, r0
1a00975a:	460f      	mov	r7, r1
1a00975c:	f7fc f9b8 	bl	1a005ad0 <__aeabi_dcmpgt>
1a009760:	2800      	cmp	r0, #0
1a009762:	f040 8089 	bne.w	1a009878 <_dtoa_r+0xc48>
1a009766:	4622      	mov	r2, r4
1a009768:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a00976c:	4630      	mov	r0, r6
1a00976e:	4639      	mov	r1, r7
1a009770:	f7fc f990 	bl	1a005a94 <__aeabi_dcmplt>
1a009774:	2800      	cmp	r0, #0
1a009776:	f43f ac9c 	beq.w	1a0090b2 <_dtoa_r+0x482>
1a00977a:	2700      	movs	r7, #0
1a00977c:	463d      	mov	r5, r7
1a00977e:	e4c0      	b.n	1a009102 <_dtoa_r+0x4d2>
1a009780:	f000 80f5 	beq.w	1a00996e <_dtoa_r+0xd3e>
1a009784:	9b06      	ldr	r3, [sp, #24]
1a009786:	425c      	negs	r4, r3
1a009788:	4b49      	ldr	r3, [pc, #292]	; (1a0098b0 <_dtoa_r+0xc80>)
1a00978a:	f004 020f 	and.w	r2, r4, #15
1a00978e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a009792:	e9d3 2300 	ldrd	r2, r3, [r3]
1a009796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00979a:	f7fb ff09 	bl	1a0055b0 <__aeabi_dmul>
1a00979e:	1124      	asrs	r4, r4, #4
1a0097a0:	e9cd 0100 	strd	r0, r1, [sp]
1a0097a4:	f000 80e3 	beq.w	1a00996e <_dtoa_r+0xd3e>
1a0097a8:	4d42      	ldr	r5, [pc, #264]	; (1a0098b4 <_dtoa_r+0xc84>)
1a0097aa:	2300      	movs	r3, #0
1a0097ac:	2602      	movs	r6, #2
1a0097ae:	07e2      	lsls	r2, r4, #31
1a0097b0:	d505      	bpl.n	1a0097be <_dtoa_r+0xb8e>
1a0097b2:	e9d5 2300 	ldrd	r2, r3, [r5]
1a0097b6:	f7fb fefb 	bl	1a0055b0 <__aeabi_dmul>
1a0097ba:	3601      	adds	r6, #1
1a0097bc:	2301      	movs	r3, #1
1a0097be:	1064      	asrs	r4, r4, #1
1a0097c0:	f105 0508 	add.w	r5, r5, #8
1a0097c4:	d1f3      	bne.n	1a0097ae <_dtoa_r+0xb7e>
1a0097c6:	2b00      	cmp	r3, #0
1a0097c8:	f43f aba6 	beq.w	1a008f18 <_dtoa_r+0x2e8>
1a0097cc:	e9cd 0100 	strd	r0, r1, [sp]
1a0097d0:	f7ff bba2 	b.w	1a008f18 <_dtoa_r+0x2e8>
1a0097d4:	900d      	str	r0, [sp, #52]	; 0x34
1a0097d6:	e564      	b.n	1a0092a2 <_dtoa_r+0x672>
1a0097d8:	e9dd 1200 	ldrd	r1, r2, [sp]
1a0097dc:	2900      	cmp	r1, #0
1a0097de:	f47f ae49 	bne.w	1a009474 <_dtoa_r+0x844>
1a0097e2:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a0097e6:	2b00      	cmp	r3, #0
1a0097e8:	f47f ae44 	bne.w	1a009474 <_dtoa_r+0x844>
1a0097ec:	4e32      	ldr	r6, [pc, #200]	; (1a0098b8 <_dtoa_r+0xc88>)
1a0097ee:	4016      	ands	r6, r2
1a0097f0:	2e00      	cmp	r6, #0
1a0097f2:	f43f adac 	beq.w	1a00934e <_dtoa_r+0x71e>
1a0097f6:	9b08      	ldr	r3, [sp, #32]
1a0097f8:	3301      	adds	r3, #1
1a0097fa:	9308      	str	r3, [sp, #32]
1a0097fc:	f108 0801 	add.w	r8, r8, #1
1a009800:	2601      	movs	r6, #1
1a009802:	e5a4      	b.n	1a00934e <_dtoa_r+0x71e>
1a009804:	2b00      	cmp	r3, #0
1a009806:	4627      	mov	r7, r4
1a009808:	464c      	mov	r4, r9
1a00980a:	4691      	mov	r9, r2
1a00980c:	dd12      	ble.n	1a009834 <_dtoa_r+0xc04>
1a00980e:	4659      	mov	r1, fp
1a009810:	2201      	movs	r2, #1
1a009812:	4650      	mov	r0, sl
1a009814:	f000 fdac 	bl	1a00a370 <__lshift>
1a009818:	4639      	mov	r1, r7
1a00981a:	4683      	mov	fp, r0
1a00981c:	f000 fe02 	bl	1a00a424 <__mcmp>
1a009820:	2800      	cmp	r0, #0
1a009822:	f340 80df 	ble.w	1a0099e4 <_dtoa_r+0xdb4>
1a009826:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a00982a:	f000 80d0 	beq.w	1a0099ce <_dtoa_r+0xd9e>
1a00982e:	9b00      	ldr	r3, [sp, #0]
1a009830:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a009834:	9500      	str	r5, [sp, #0]
1a009836:	f886 9000 	strb.w	r9, [r6]
1a00983a:	4645      	mov	r5, r8
1a00983c:	e5f3      	b.n	1a009426 <_dtoa_r+0x7f6>
1a00983e:	6869      	ldr	r1, [r5, #4]
1a009840:	4650      	mov	r0, sl
1a009842:	f000 fbdd 	bl	1a00a000 <_Balloc>
1a009846:	692b      	ldr	r3, [r5, #16]
1a009848:	3302      	adds	r3, #2
1a00984a:	009a      	lsls	r2, r3, #2
1a00984c:	4604      	mov	r4, r0
1a00984e:	f105 010c 	add.w	r1, r5, #12
1a009852:	300c      	adds	r0, #12
1a009854:	f7fd f8e4 	bl	1a006a20 <memcpy>
1a009858:	4621      	mov	r1, r4
1a00985a:	2201      	movs	r2, #1
1a00985c:	4650      	mov	r0, sl
1a00985e:	f000 fd87 	bl	1a00a370 <__lshift>
1a009862:	4680      	mov	r8, r0
1a009864:	e627      	b.n	1a0094b6 <_dtoa_r+0x886>
1a009866:	f8dd b000 	ldr.w	fp, [sp]
1a00986a:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00986e:	e406      	b.n	1a00907e <_dtoa_r+0x44e>
1a009870:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a009874:	1a9c      	subs	r4, r3, r2
1a009876:	e508      	b.n	1a00928a <_dtoa_r+0x65a>
1a009878:	2700      	movs	r7, #0
1a00987a:	463d      	mov	r5, r7
1a00987c:	e6a0      	b.n	1a0095c0 <_dtoa_r+0x990>
1a00987e:	2a39      	cmp	r2, #57	; 0x39
1a009880:	4627      	mov	r7, r4
1a009882:	464c      	mov	r4, r9
1a009884:	f000 80a3 	beq.w	1a0099ce <_dtoa_r+0xd9e>
1a009888:	f102 0901 	add.w	r9, r2, #1
1a00988c:	9500      	str	r5, [sp, #0]
1a00988e:	f886 9000 	strb.w	r9, [r6]
1a009892:	4645      	mov	r5, r8
1a009894:	e5c7      	b.n	1a009426 <_dtoa_r+0x7f6>
1a009896:	4627      	mov	r7, r4
1a009898:	9500      	str	r5, [sp, #0]
1a00989a:	464c      	mov	r4, r9
1a00989c:	4645      	mov	r5, r8
1a00989e:	4691      	mov	r9, r2
1a0098a0:	e5a5      	b.n	1a0093ee <_dtoa_r+0x7be>
1a0098a2:	bf00      	nop
1a0098a4:	1a00b2dc 	.word	0x1a00b2dc
1a0098a8:	401c0000 	.word	0x401c0000
1a0098ac:	40140000 	.word	0x40140000
1a0098b0:	1a00b318 	.word	0x1a00b318
1a0098b4:	1a00b2f0 	.word	0x1a00b2f0
1a0098b8:	7ff00000 	.word	0x7ff00000
1a0098bc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0098c0:	f7fb fe76 	bl	1a0055b0 <__aeabi_dmul>
1a0098c4:	9b03      	ldr	r3, [sp, #12]
1a0098c6:	701d      	strb	r5, [r3, #0]
1a0098c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0098ca:	2b01      	cmp	r3, #1
1a0098cc:	e9cd 0100 	strd	r0, r1, [sp]
1a0098d0:	d023      	beq.n	1a00991a <_dtoa_r+0xcea>
1a0098d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0098d4:	9a03      	ldr	r2, [sp, #12]
1a0098d6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a0098da:	4413      	add	r3, r2
1a0098dc:	46c1      	mov	r9, r8
1a0098de:	4698      	mov	r8, r3
1a0098e0:	2200      	movs	r2, #0
1a0098e2:	4b64      	ldr	r3, [pc, #400]	; (1a009a74 <_dtoa_r+0xe44>)
1a0098e4:	4630      	mov	r0, r6
1a0098e6:	4639      	mov	r1, r7
1a0098e8:	f7fb fe62 	bl	1a0055b0 <__aeabi_dmul>
1a0098ec:	460f      	mov	r7, r1
1a0098ee:	4606      	mov	r6, r0
1a0098f0:	f7fc f8f8 	bl	1a005ae4 <__aeabi_d2iz>
1a0098f4:	4605      	mov	r5, r0
1a0098f6:	f7fb fdf1 	bl	1a0054dc <__aeabi_i2d>
1a0098fa:	3530      	adds	r5, #48	; 0x30
1a0098fc:	4602      	mov	r2, r0
1a0098fe:	460b      	mov	r3, r1
1a009900:	4630      	mov	r0, r6
1a009902:	4639      	mov	r1, r7
1a009904:	f7fb fc9c 	bl	1a005240 <__aeabi_dsub>
1a009908:	f804 5b01 	strb.w	r5, [r4], #1
1a00990c:	45a0      	cmp	r8, r4
1a00990e:	4606      	mov	r6, r0
1a009910:	460f      	mov	r7, r1
1a009912:	d1e5      	bne.n	1a0098e0 <_dtoa_r+0xcb0>
1a009914:	46c8      	mov	r8, r9
1a009916:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a00991a:	4b57      	ldr	r3, [pc, #348]	; (1a009a78 <_dtoa_r+0xe48>)
1a00991c:	2200      	movs	r2, #0
1a00991e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a009922:	f7fb fc8f 	bl	1a005244 <__adddf3>
1a009926:	4632      	mov	r2, r6
1a009928:	463b      	mov	r3, r7
1a00992a:	f7fc f8b3 	bl	1a005a94 <__aeabi_dcmplt>
1a00992e:	2800      	cmp	r0, #0
1a009930:	d152      	bne.n	1a0099d8 <_dtoa_r+0xda8>
1a009932:	e9dd 2300 	ldrd	r2, r3, [sp]
1a009936:	2000      	movs	r0, #0
1a009938:	494f      	ldr	r1, [pc, #316]	; (1a009a78 <_dtoa_r+0xe48>)
1a00993a:	f7fb fc81 	bl	1a005240 <__aeabi_dsub>
1a00993e:	4632      	mov	r2, r6
1a009940:	463b      	mov	r3, r7
1a009942:	f7fc f8c5 	bl	1a005ad0 <__aeabi_dcmpgt>
1a009946:	2800      	cmp	r0, #0
1a009948:	f43f abb3 	beq.w	1a0090b2 <_dtoa_r+0x482>
1a00994c:	e000      	b.n	1a009950 <_dtoa_r+0xd20>
1a00994e:	4614      	mov	r4, r2
1a009950:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a009954:	2b30      	cmp	r3, #48	; 0x30
1a009956:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a00995a:	d0f8      	beq.n	1a00994e <_dtoa_r+0xd1e>
1a00995c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00995e:	3301      	adds	r3, #1
1a009960:	9306      	str	r3, [sp, #24]
1a009962:	f7ff bb8c 	b.w	1a00907e <_dtoa_r+0x44e>
1a009966:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a009968:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a00996c:	e6d7      	b.n	1a00971e <_dtoa_r+0xaee>
1a00996e:	2602      	movs	r6, #2
1a009970:	f7ff bad2 	b.w	1a008f18 <_dtoa_r+0x2e8>
1a009974:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009976:	2b00      	cmp	r3, #0
1a009978:	f43f aed8 	beq.w	1a00972c <_dtoa_r+0xafc>
1a00997c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a00997e:	2f00      	cmp	r7, #0
1a009980:	f77f ab97 	ble.w	1a0090b2 <_dtoa_r+0x482>
1a009984:	2200      	movs	r2, #0
1a009986:	4b3b      	ldr	r3, [pc, #236]	; (1a009a74 <_dtoa_r+0xe44>)
1a009988:	4620      	mov	r0, r4
1a00998a:	4629      	mov	r1, r5
1a00998c:	f7fb fe10 	bl	1a0055b0 <__aeabi_dmul>
1a009990:	4604      	mov	r4, r0
1a009992:	460d      	mov	r5, r1
1a009994:	1c70      	adds	r0, r6, #1
1a009996:	e9cd 4500 	strd	r4, r5, [sp]
1a00999a:	f7fb fd9f 	bl	1a0054dc <__aeabi_i2d>
1a00999e:	4622      	mov	r2, r4
1a0099a0:	462b      	mov	r3, r5
1a0099a2:	f7fb fe05 	bl	1a0055b0 <__aeabi_dmul>
1a0099a6:	4b35      	ldr	r3, [pc, #212]	; (1a009a7c <_dtoa_r+0xe4c>)
1a0099a8:	2200      	movs	r2, #0
1a0099aa:	f7fb fc4b 	bl	1a005244 <__adddf3>
1a0099ae:	9b06      	ldr	r3, [sp, #24]
1a0099b0:	9710      	str	r7, [sp, #64]	; 0x40
1a0099b2:	3b01      	subs	r3, #1
1a0099b4:	4604      	mov	r4, r0
1a0099b6:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a0099ba:	9312      	str	r3, [sp, #72]	; 0x48
1a0099bc:	f7ff bacf 	b.w	1a008f5e <_dtoa_r+0x32e>
1a0099c0:	9a06      	ldr	r2, [sp, #24]
1a0099c2:	3201      	adds	r2, #1
1a0099c4:	9206      	str	r2, [sp, #24]
1a0099c6:	2231      	movs	r2, #49	; 0x31
1a0099c8:	701a      	strb	r2, [r3, #0]
1a0099ca:	f7ff bb58 	b.w	1a00907e <_dtoa_r+0x44e>
1a0099ce:	2239      	movs	r2, #57	; 0x39
1a0099d0:	9500      	str	r5, [sp, #0]
1a0099d2:	7032      	strb	r2, [r6, #0]
1a0099d4:	4645      	mov	r5, r8
1a0099d6:	e518      	b.n	1a00940a <_dtoa_r+0x7da>
1a0099d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0099da:	3301      	adds	r3, #1
1a0099dc:	9306      	str	r3, [sp, #24]
1a0099de:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a0099e2:	e427      	b.n	1a009234 <_dtoa_r+0x604>
1a0099e4:	f47f af26 	bne.w	1a009834 <_dtoa_r+0xc04>
1a0099e8:	f019 0f01 	tst.w	r9, #1
1a0099ec:	f47f af1b 	bne.w	1a009826 <_dtoa_r+0xbf6>
1a0099f0:	e720      	b.n	1a009834 <_dtoa_r+0xc04>
1a0099f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0099f4:	3301      	adds	r3, #1
1a0099f6:	46da      	mov	sl, fp
1a0099f8:	9306      	str	r3, [sp, #24]
1a0099fa:	f8dd b000 	ldr.w	fp, [sp]
1a0099fe:	e419      	b.n	1a009234 <_dtoa_r+0x604>
1a009a00:	2a39      	cmp	r2, #57	; 0x39
1a009a02:	463b      	mov	r3, r7
1a009a04:	4691      	mov	r9, r2
1a009a06:	4627      	mov	r7, r4
1a009a08:	f106 0401 	add.w	r4, r6, #1
1a009a0c:	d0df      	beq.n	1a0099ce <_dtoa_r+0xd9e>
1a009a0e:	2b00      	cmp	r3, #0
1a009a10:	f73f af0d 	bgt.w	1a00982e <_dtoa_r+0xbfe>
1a009a14:	e70e      	b.n	1a009834 <_dtoa_r+0xc04>
1a009a16:	9b02      	ldr	r3, [sp, #8]
1a009a18:	2b02      	cmp	r3, #2
1a009a1a:	f77f ae49 	ble.w	1a0096b0 <_dtoa_r+0xa80>
1a009a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a009a20:	9309      	str	r3, [sp, #36]	; 0x24
1a009a22:	f8cd 8018 	str.w	r8, [sp, #24]
1a009a26:	e5ba      	b.n	1a00959e <_dtoa_r+0x96e>
1a009a28:	9b02      	ldr	r3, [sp, #8]
1a009a2a:	2b02      	cmp	r3, #2
1a009a2c:	dcf7      	bgt.n	1a009a1e <_dtoa_r+0xdee>
1a009a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a009a30:	e539      	b.n	1a0094a6 <_dtoa_r+0x876>
1a009a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a009a34:	3301      	adds	r3, #1
1a009a36:	9306      	str	r3, [sp, #24]
1a009a38:	f7ff bbfc 	b.w	1a009234 <_dtoa_r+0x604>
1a009a3c:	4b10      	ldr	r3, [pc, #64]	; (1a009a80 <_dtoa_r+0xe50>)
1a009a3e:	9303      	str	r3, [sp, #12]
1a009a40:	f7ff b934 	b.w	1a008cac <_dtoa_r+0x7c>
1a009a44:	f43f ac98 	beq.w	1a009378 <_dtoa_r+0x748>
1a009a48:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a009a4c:	e48f      	b.n	1a00936e <_dtoa_r+0x73e>
1a009a4e:	2400      	movs	r4, #0
1a009a50:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a009a54:	4621      	mov	r1, r4
1a009a56:	4650      	mov	r0, sl
1a009a58:	f000 fad2 	bl	1a00a000 <_Balloc>
1a009a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a009a60:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a009a64:	930f      	str	r3, [sp, #60]	; 0x3c
1a009a66:	2301      	movs	r3, #1
1a009a68:	9003      	str	r0, [sp, #12]
1a009a6a:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a009a6e:	930b      	str	r3, [sp, #44]	; 0x2c
1a009a70:	f7ff bb23 	b.w	1a0090ba <_dtoa_r+0x48a>
1a009a74:	40240000 	.word	0x40240000
1a009a78:	3fe00000 	.word	0x3fe00000
1a009a7c:	401c0000 	.word	0x401c0000
1a009a80:	1a00b2e0 	.word	0x1a00b2e0

1a009a84 <__sfvwrite_r>:
1a009a84:	6893      	ldr	r3, [r2, #8]
1a009a86:	2b00      	cmp	r3, #0
1a009a88:	f000 8102 	beq.w	1a009c90 <__sfvwrite_r+0x20c>
1a009a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a009a90:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a009a94:	b29b      	uxth	r3, r3
1a009a96:	460c      	mov	r4, r1
1a009a98:	0719      	lsls	r1, r3, #28
1a009a9a:	b083      	sub	sp, #12
1a009a9c:	4682      	mov	sl, r0
1a009a9e:	4690      	mov	r8, r2
1a009aa0:	d535      	bpl.n	1a009b0e <__sfvwrite_r+0x8a>
1a009aa2:	6922      	ldr	r2, [r4, #16]
1a009aa4:	b39a      	cbz	r2, 1a009b0e <__sfvwrite_r+0x8a>
1a009aa6:	f013 0202 	ands.w	r2, r3, #2
1a009aaa:	f8d8 6000 	ldr.w	r6, [r8]
1a009aae:	d03d      	beq.n	1a009b2c <__sfvwrite_r+0xa8>
1a009ab0:	2700      	movs	r7, #0
1a009ab2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a009ab6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a009aba:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a009d88 <__sfvwrite_r+0x304>
1a009abe:	463d      	mov	r5, r7
1a009ac0:	454d      	cmp	r5, r9
1a009ac2:	462b      	mov	r3, r5
1a009ac4:	463a      	mov	r2, r7
1a009ac6:	bf28      	it	cs
1a009ac8:	464b      	movcs	r3, r9
1a009aca:	4661      	mov	r1, ip
1a009acc:	4650      	mov	r0, sl
1a009ace:	b1d5      	cbz	r5, 1a009b06 <__sfvwrite_r+0x82>
1a009ad0:	47d8      	blx	fp
1a009ad2:	2800      	cmp	r0, #0
1a009ad4:	f340 80d2 	ble.w	1a009c7c <__sfvwrite_r+0x1f8>
1a009ad8:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009adc:	1a1b      	subs	r3, r3, r0
1a009ade:	4407      	add	r7, r0
1a009ae0:	1a2d      	subs	r5, r5, r0
1a009ae2:	f8c8 3008 	str.w	r3, [r8, #8]
1a009ae6:	2b00      	cmp	r3, #0
1a009ae8:	f000 80b7 	beq.w	1a009c5a <__sfvwrite_r+0x1d6>
1a009aec:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a009af0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a009af4:	454d      	cmp	r5, r9
1a009af6:	462b      	mov	r3, r5
1a009af8:	463a      	mov	r2, r7
1a009afa:	bf28      	it	cs
1a009afc:	464b      	movcs	r3, r9
1a009afe:	4661      	mov	r1, ip
1a009b00:	4650      	mov	r0, sl
1a009b02:	2d00      	cmp	r5, #0
1a009b04:	d1e4      	bne.n	1a009ad0 <__sfvwrite_r+0x4c>
1a009b06:	e9d6 7500 	ldrd	r7, r5, [r6]
1a009b0a:	3608      	adds	r6, #8
1a009b0c:	e7d8      	b.n	1a009ac0 <__sfvwrite_r+0x3c>
1a009b0e:	4621      	mov	r1, r4
1a009b10:	4650      	mov	r0, sl
1a009b12:	f7fe ff91 	bl	1a008a38 <__swsetup_r>
1a009b16:	2800      	cmp	r0, #0
1a009b18:	f040 8130 	bne.w	1a009d7c <__sfvwrite_r+0x2f8>
1a009b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009b20:	f8d8 6000 	ldr.w	r6, [r8]
1a009b24:	b29b      	uxth	r3, r3
1a009b26:	f013 0202 	ands.w	r2, r3, #2
1a009b2a:	d1c1      	bne.n	1a009ab0 <__sfvwrite_r+0x2c>
1a009b2c:	f013 0901 	ands.w	r9, r3, #1
1a009b30:	f040 80b0 	bne.w	1a009c94 <__sfvwrite_r+0x210>
1a009b34:	68a7      	ldr	r7, [r4, #8]
1a009b36:	6820      	ldr	r0, [r4, #0]
1a009b38:	464d      	mov	r5, r9
1a009b3a:	2d00      	cmp	r5, #0
1a009b3c:	d054      	beq.n	1a009be8 <__sfvwrite_r+0x164>
1a009b3e:	059a      	lsls	r2, r3, #22
1a009b40:	f140 80bc 	bpl.w	1a009cbc <__sfvwrite_r+0x238>
1a009b44:	42af      	cmp	r7, r5
1a009b46:	46bb      	mov	fp, r7
1a009b48:	f200 80e7 	bhi.w	1a009d1a <__sfvwrite_r+0x296>
1a009b4c:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a009b50:	d02f      	beq.n	1a009bb2 <__sfvwrite_r+0x12e>
1a009b52:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a009b56:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a009b5a:	eba0 0b01 	sub.w	fp, r0, r1
1a009b5e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a009b62:	1c68      	adds	r0, r5, #1
1a009b64:	107f      	asrs	r7, r7, #1
1a009b66:	4458      	add	r0, fp
1a009b68:	42b8      	cmp	r0, r7
1a009b6a:	463a      	mov	r2, r7
1a009b6c:	bf84      	itt	hi
1a009b6e:	4607      	movhi	r7, r0
1a009b70:	463a      	movhi	r2, r7
1a009b72:	055b      	lsls	r3, r3, #21
1a009b74:	f140 80e9 	bpl.w	1a009d4a <__sfvwrite_r+0x2c6>
1a009b78:	4611      	mov	r1, r2
1a009b7a:	4650      	mov	r0, sl
1a009b7c:	f7fc fc98 	bl	1a0064b0 <_malloc_r>
1a009b80:	2800      	cmp	r0, #0
1a009b82:	f000 80f5 	beq.w	1a009d70 <__sfvwrite_r+0x2ec>
1a009b86:	465a      	mov	r2, fp
1a009b88:	6921      	ldr	r1, [r4, #16]
1a009b8a:	9001      	str	r0, [sp, #4]
1a009b8c:	f7fc ff48 	bl	1a006a20 <memcpy>
1a009b90:	89a2      	ldrh	r2, [r4, #12]
1a009b92:	9b01      	ldr	r3, [sp, #4]
1a009b94:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a009b98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a009b9c:	81a2      	strh	r2, [r4, #12]
1a009b9e:	eba7 020b 	sub.w	r2, r7, fp
1a009ba2:	eb03 000b 	add.w	r0, r3, fp
1a009ba6:	6167      	str	r7, [r4, #20]
1a009ba8:	6123      	str	r3, [r4, #16]
1a009baa:	6020      	str	r0, [r4, #0]
1a009bac:	60a2      	str	r2, [r4, #8]
1a009bae:	462f      	mov	r7, r5
1a009bb0:	46ab      	mov	fp, r5
1a009bb2:	465a      	mov	r2, fp
1a009bb4:	4649      	mov	r1, r9
1a009bb6:	f000 f9bb 	bl	1a009f30 <memmove>
1a009bba:	68a2      	ldr	r2, [r4, #8]
1a009bbc:	6823      	ldr	r3, [r4, #0]
1a009bbe:	1bd2      	subs	r2, r2, r7
1a009bc0:	445b      	add	r3, fp
1a009bc2:	462f      	mov	r7, r5
1a009bc4:	60a2      	str	r2, [r4, #8]
1a009bc6:	6023      	str	r3, [r4, #0]
1a009bc8:	2500      	movs	r5, #0
1a009bca:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009bce:	1bdb      	subs	r3, r3, r7
1a009bd0:	44b9      	add	r9, r7
1a009bd2:	f8c8 3008 	str.w	r3, [r8, #8]
1a009bd6:	2b00      	cmp	r3, #0
1a009bd8:	d03f      	beq.n	1a009c5a <__sfvwrite_r+0x1d6>
1a009bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009bde:	68a7      	ldr	r7, [r4, #8]
1a009be0:	6820      	ldr	r0, [r4, #0]
1a009be2:	b29b      	uxth	r3, r3
1a009be4:	2d00      	cmp	r5, #0
1a009be6:	d1aa      	bne.n	1a009b3e <__sfvwrite_r+0xba>
1a009be8:	e9d6 9500 	ldrd	r9, r5, [r6]
1a009bec:	3608      	adds	r6, #8
1a009bee:	e7a4      	b.n	1a009b3a <__sfvwrite_r+0xb6>
1a009bf0:	f10b 0308 	add.w	r3, fp, #8
1a009bf4:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a009bf8:	469b      	mov	fp, r3
1a009bfa:	3308      	adds	r3, #8
1a009bfc:	2f00      	cmp	r7, #0
1a009bfe:	d0f9      	beq.n	1a009bf4 <__sfvwrite_r+0x170>
1a009c00:	463a      	mov	r2, r7
1a009c02:	210a      	movs	r1, #10
1a009c04:	4630      	mov	r0, r6
1a009c06:	f000 f943 	bl	1a009e90 <memchr>
1a009c0a:	2800      	cmp	r0, #0
1a009c0c:	d053      	beq.n	1a009cb6 <__sfvwrite_r+0x232>
1a009c0e:	3001      	adds	r0, #1
1a009c10:	eba0 0906 	sub.w	r9, r0, r6
1a009c14:	464b      	mov	r3, r9
1a009c16:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a009c1a:	6820      	ldr	r0, [r4, #0]
1a009c1c:	42bb      	cmp	r3, r7
1a009c1e:	bf28      	it	cs
1a009c20:	463b      	movcs	r3, r7
1a009c22:	4288      	cmp	r0, r1
1a009c24:	d903      	bls.n	1a009c2e <__sfvwrite_r+0x1aa>
1a009c26:	68a5      	ldr	r5, [r4, #8]
1a009c28:	4415      	add	r5, r2
1a009c2a:	42ab      	cmp	r3, r5
1a009c2c:	dc19      	bgt.n	1a009c62 <__sfvwrite_r+0x1de>
1a009c2e:	429a      	cmp	r2, r3
1a009c30:	dc7d      	bgt.n	1a009d2e <__sfvwrite_r+0x2aa>
1a009c32:	4613      	mov	r3, r2
1a009c34:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a009c36:	69e1      	ldr	r1, [r4, #28]
1a009c38:	4632      	mov	r2, r6
1a009c3a:	4650      	mov	r0, sl
1a009c3c:	47a8      	blx	r5
1a009c3e:	1e05      	subs	r5, r0, #0
1a009c40:	dd1c      	ble.n	1a009c7c <__sfvwrite_r+0x1f8>
1a009c42:	ebb9 0905 	subs.w	r9, r9, r5
1a009c46:	d06b      	beq.n	1a009d20 <__sfvwrite_r+0x29c>
1a009c48:	2001      	movs	r0, #1
1a009c4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a009c4e:	1b5b      	subs	r3, r3, r5
1a009c50:	442e      	add	r6, r5
1a009c52:	1b7f      	subs	r7, r7, r5
1a009c54:	f8c8 3008 	str.w	r3, [r8, #8]
1a009c58:	bb13      	cbnz	r3, 1a009ca0 <__sfvwrite_r+0x21c>
1a009c5a:	2000      	movs	r0, #0
1a009c5c:	b003      	add	sp, #12
1a009c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009c62:	4631      	mov	r1, r6
1a009c64:	462a      	mov	r2, r5
1a009c66:	f000 f963 	bl	1a009f30 <memmove>
1a009c6a:	6823      	ldr	r3, [r4, #0]
1a009c6c:	442b      	add	r3, r5
1a009c6e:	6023      	str	r3, [r4, #0]
1a009c70:	4621      	mov	r1, r4
1a009c72:	4650      	mov	r0, sl
1a009c74:	f7fc f9ee 	bl	1a006054 <_fflush_r>
1a009c78:	2800      	cmp	r0, #0
1a009c7a:	d0e2      	beq.n	1a009c42 <__sfvwrite_r+0x1be>
1a009c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a009c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a009c88:	81a3      	strh	r3, [r4, #12]
1a009c8a:	b003      	add	sp, #12
1a009c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a009c90:	2000      	movs	r0, #0
1a009c92:	4770      	bx	lr
1a009c94:	4633      	mov	r3, r6
1a009c96:	4691      	mov	r9, r2
1a009c98:	4610      	mov	r0, r2
1a009c9a:	4617      	mov	r7, r2
1a009c9c:	464e      	mov	r6, r9
1a009c9e:	469b      	mov	fp, r3
1a009ca0:	2f00      	cmp	r7, #0
1a009ca2:	d0a5      	beq.n	1a009bf0 <__sfvwrite_r+0x16c>
1a009ca4:	2800      	cmp	r0, #0
1a009ca6:	d1b5      	bne.n	1a009c14 <__sfvwrite_r+0x190>
1a009ca8:	463a      	mov	r2, r7
1a009caa:	210a      	movs	r1, #10
1a009cac:	4630      	mov	r0, r6
1a009cae:	f000 f8ef 	bl	1a009e90 <memchr>
1a009cb2:	2800      	cmp	r0, #0
1a009cb4:	d1ab      	bne.n	1a009c0e <__sfvwrite_r+0x18a>
1a009cb6:	1c7b      	adds	r3, r7, #1
1a009cb8:	4699      	mov	r9, r3
1a009cba:	e7ac      	b.n	1a009c16 <__sfvwrite_r+0x192>
1a009cbc:	6923      	ldr	r3, [r4, #16]
1a009cbe:	4283      	cmp	r3, r0
1a009cc0:	d315      	bcc.n	1a009cee <__sfvwrite_r+0x26a>
1a009cc2:	6961      	ldr	r1, [r4, #20]
1a009cc4:	42a9      	cmp	r1, r5
1a009cc6:	d812      	bhi.n	1a009cee <__sfvwrite_r+0x26a>
1a009cc8:	4b2e      	ldr	r3, [pc, #184]	; (1a009d84 <__sfvwrite_r+0x300>)
1a009cca:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a009ccc:	429d      	cmp	r5, r3
1a009cce:	bf94      	ite	ls
1a009cd0:	462b      	movls	r3, r5
1a009cd2:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a009cd6:	464a      	mov	r2, r9
1a009cd8:	fb93 f3f1 	sdiv	r3, r3, r1
1a009cdc:	4650      	mov	r0, sl
1a009cde:	fb01 f303 	mul.w	r3, r1, r3
1a009ce2:	69e1      	ldr	r1, [r4, #28]
1a009ce4:	47b8      	blx	r7
1a009ce6:	1e07      	subs	r7, r0, #0
1a009ce8:	ddc8      	ble.n	1a009c7c <__sfvwrite_r+0x1f8>
1a009cea:	1bed      	subs	r5, r5, r7
1a009cec:	e76d      	b.n	1a009bca <__sfvwrite_r+0x146>
1a009cee:	42af      	cmp	r7, r5
1a009cf0:	bf28      	it	cs
1a009cf2:	462f      	movcs	r7, r5
1a009cf4:	463a      	mov	r2, r7
1a009cf6:	4649      	mov	r1, r9
1a009cf8:	f000 f91a 	bl	1a009f30 <memmove>
1a009cfc:	68a3      	ldr	r3, [r4, #8]
1a009cfe:	6822      	ldr	r2, [r4, #0]
1a009d00:	1bdb      	subs	r3, r3, r7
1a009d02:	443a      	add	r2, r7
1a009d04:	60a3      	str	r3, [r4, #8]
1a009d06:	6022      	str	r2, [r4, #0]
1a009d08:	2b00      	cmp	r3, #0
1a009d0a:	d1ee      	bne.n	1a009cea <__sfvwrite_r+0x266>
1a009d0c:	4621      	mov	r1, r4
1a009d0e:	4650      	mov	r0, sl
1a009d10:	f7fc f9a0 	bl	1a006054 <_fflush_r>
1a009d14:	2800      	cmp	r0, #0
1a009d16:	d0e8      	beq.n	1a009cea <__sfvwrite_r+0x266>
1a009d18:	e7b0      	b.n	1a009c7c <__sfvwrite_r+0x1f8>
1a009d1a:	462f      	mov	r7, r5
1a009d1c:	46ab      	mov	fp, r5
1a009d1e:	e748      	b.n	1a009bb2 <__sfvwrite_r+0x12e>
1a009d20:	4621      	mov	r1, r4
1a009d22:	4650      	mov	r0, sl
1a009d24:	f7fc f996 	bl	1a006054 <_fflush_r>
1a009d28:	2800      	cmp	r0, #0
1a009d2a:	d08e      	beq.n	1a009c4a <__sfvwrite_r+0x1c6>
1a009d2c:	e7a6      	b.n	1a009c7c <__sfvwrite_r+0x1f8>
1a009d2e:	461a      	mov	r2, r3
1a009d30:	4631      	mov	r1, r6
1a009d32:	9301      	str	r3, [sp, #4]
1a009d34:	f000 f8fc 	bl	1a009f30 <memmove>
1a009d38:	9b01      	ldr	r3, [sp, #4]
1a009d3a:	68a1      	ldr	r1, [r4, #8]
1a009d3c:	6822      	ldr	r2, [r4, #0]
1a009d3e:	1ac9      	subs	r1, r1, r3
1a009d40:	441a      	add	r2, r3
1a009d42:	60a1      	str	r1, [r4, #8]
1a009d44:	6022      	str	r2, [r4, #0]
1a009d46:	461d      	mov	r5, r3
1a009d48:	e77b      	b.n	1a009c42 <__sfvwrite_r+0x1be>
1a009d4a:	4650      	mov	r0, sl
1a009d4c:	f000 fc62 	bl	1a00a614 <_realloc_r>
1a009d50:	4603      	mov	r3, r0
1a009d52:	2800      	cmp	r0, #0
1a009d54:	f47f af23 	bne.w	1a009b9e <__sfvwrite_r+0x11a>
1a009d58:	6921      	ldr	r1, [r4, #16]
1a009d5a:	4650      	mov	r0, sl
1a009d5c:	f7fc fa5c 	bl	1a006218 <_free_r>
1a009d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009d64:	220c      	movs	r2, #12
1a009d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a009d6a:	f8ca 2000 	str.w	r2, [sl]
1a009d6e:	e787      	b.n	1a009c80 <__sfvwrite_r+0x1fc>
1a009d70:	230c      	movs	r3, #12
1a009d72:	f8ca 3000 	str.w	r3, [sl]
1a009d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009d7a:	e781      	b.n	1a009c80 <__sfvwrite_r+0x1fc>
1a009d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a009d80:	e76c      	b.n	1a009c5c <__sfvwrite_r+0x1d8>
1a009d82:	bf00      	nop
1a009d84:	7ffffffe 	.word	0x7ffffffe
1a009d88:	7ffffc00 	.word	0x7ffffc00

1a009d8c <_localeconv_r>:
1a009d8c:	4800      	ldr	r0, [pc, #0]	; (1a009d90 <_localeconv_r+0x4>)
1a009d8e:	4770      	bx	lr
1a009d90:	10000970 	.word	0x10000970

1a009d94 <__swhatbuf_r>:
1a009d94:	b570      	push	{r4, r5, r6, lr}
1a009d96:	460c      	mov	r4, r1
1a009d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a009d9c:	2900      	cmp	r1, #0
1a009d9e:	b096      	sub	sp, #88	; 0x58
1a009da0:	4615      	mov	r5, r2
1a009da2:	461e      	mov	r6, r3
1a009da4:	db14      	blt.n	1a009dd0 <__swhatbuf_r+0x3c>
1a009da6:	466a      	mov	r2, sp
1a009da8:	f7f7 fa2c 	bl	1a001204 <_fstat_r>
1a009dac:	2800      	cmp	r0, #0
1a009dae:	db0f      	blt.n	1a009dd0 <__swhatbuf_r+0x3c>
1a009db0:	9a01      	ldr	r2, [sp, #4]
1a009db2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a009db6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a009dba:	fab2 f282 	clz	r2, r2
1a009dbe:	0952      	lsrs	r2, r2, #5
1a009dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a009dc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a009dc8:	6032      	str	r2, [r6, #0]
1a009dca:	602b      	str	r3, [r5, #0]
1a009dcc:	b016      	add	sp, #88	; 0x58
1a009dce:	bd70      	pop	{r4, r5, r6, pc}
1a009dd0:	89a2      	ldrh	r2, [r4, #12]
1a009dd2:	2300      	movs	r3, #0
1a009dd4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a009dd8:	6033      	str	r3, [r6, #0]
1a009dda:	d004      	beq.n	1a009de6 <__swhatbuf_r+0x52>
1a009ddc:	2240      	movs	r2, #64	; 0x40
1a009dde:	4618      	mov	r0, r3
1a009de0:	602a      	str	r2, [r5, #0]
1a009de2:	b016      	add	sp, #88	; 0x58
1a009de4:	bd70      	pop	{r4, r5, r6, pc}
1a009de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a009dea:	602b      	str	r3, [r5, #0]
1a009dec:	b016      	add	sp, #88	; 0x58
1a009dee:	bd70      	pop	{r4, r5, r6, pc}

1a009df0 <__smakebuf_r>:
1a009df0:	898a      	ldrh	r2, [r1, #12]
1a009df2:	0792      	lsls	r2, r2, #30
1a009df4:	460b      	mov	r3, r1
1a009df6:	d506      	bpl.n	1a009e06 <__smakebuf_r+0x16>
1a009df8:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a009dfc:	2101      	movs	r1, #1
1a009dfe:	601a      	str	r2, [r3, #0]
1a009e00:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a009e04:	4770      	bx	lr
1a009e06:	b570      	push	{r4, r5, r6, lr}
1a009e08:	b082      	sub	sp, #8
1a009e0a:	ab01      	add	r3, sp, #4
1a009e0c:	466a      	mov	r2, sp
1a009e0e:	460c      	mov	r4, r1
1a009e10:	4606      	mov	r6, r0
1a009e12:	f7ff ffbf 	bl	1a009d94 <__swhatbuf_r>
1a009e16:	9900      	ldr	r1, [sp, #0]
1a009e18:	4605      	mov	r5, r0
1a009e1a:	4630      	mov	r0, r6
1a009e1c:	f7fc fb48 	bl	1a0064b0 <_malloc_r>
1a009e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009e24:	b170      	cbz	r0, 1a009e44 <__smakebuf_r+0x54>
1a009e26:	4916      	ldr	r1, [pc, #88]	; (1a009e80 <__smakebuf_r+0x90>)
1a009e28:	63f1      	str	r1, [r6, #60]	; 0x3c
1a009e2a:	9a01      	ldr	r2, [sp, #4]
1a009e2c:	9900      	ldr	r1, [sp, #0]
1a009e2e:	6020      	str	r0, [r4, #0]
1a009e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a009e34:	81a3      	strh	r3, [r4, #12]
1a009e36:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a009e3a:	b98a      	cbnz	r2, 1a009e60 <__smakebuf_r+0x70>
1a009e3c:	432b      	orrs	r3, r5
1a009e3e:	81a3      	strh	r3, [r4, #12]
1a009e40:	b002      	add	sp, #8
1a009e42:	bd70      	pop	{r4, r5, r6, pc}
1a009e44:	059a      	lsls	r2, r3, #22
1a009e46:	d4fb      	bmi.n	1a009e40 <__smakebuf_r+0x50>
1a009e48:	f023 0303 	bic.w	r3, r3, #3
1a009e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a009e50:	f043 0302 	orr.w	r3, r3, #2
1a009e54:	2101      	movs	r1, #1
1a009e56:	81a3      	strh	r3, [r4, #12]
1a009e58:	6022      	str	r2, [r4, #0]
1a009e5a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a009e5e:	e7ef      	b.n	1a009e40 <__smakebuf_r+0x50>
1a009e60:	4630      	mov	r0, r6
1a009e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a009e66:	f7f7 f9de 	bl	1a001226 <_isatty_r>
1a009e6a:	b910      	cbnz	r0, 1a009e72 <__smakebuf_r+0x82>
1a009e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009e70:	e7e4      	b.n	1a009e3c <__smakebuf_r+0x4c>
1a009e72:	89a3      	ldrh	r3, [r4, #12]
1a009e74:	f023 0303 	bic.w	r3, r3, #3
1a009e78:	f043 0301 	orr.w	r3, r3, #1
1a009e7c:	b21b      	sxth	r3, r3
1a009e7e:	e7dd      	b.n	1a009e3c <__smakebuf_r+0x4c>
1a009e80:	1a006101 	.word	0x1a006101
1a009e84:	ffffffff 	.word	0xffffffff
1a009e88:	ffffffff 	.word	0xffffffff
1a009e8c:	ffffffff 	.word	0xffffffff

1a009e90 <memchr>:
1a009e90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a009e94:	2a10      	cmp	r2, #16
1a009e96:	db2b      	blt.n	1a009ef0 <memchr+0x60>
1a009e98:	f010 0f07 	tst.w	r0, #7
1a009e9c:	d008      	beq.n	1a009eb0 <memchr+0x20>
1a009e9e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a009ea2:	3a01      	subs	r2, #1
1a009ea4:	428b      	cmp	r3, r1
1a009ea6:	d02d      	beq.n	1a009f04 <memchr+0x74>
1a009ea8:	f010 0f07 	tst.w	r0, #7
1a009eac:	b342      	cbz	r2, 1a009f00 <memchr+0x70>
1a009eae:	d1f6      	bne.n	1a009e9e <memchr+0xe>
1a009eb0:	b4f0      	push	{r4, r5, r6, r7}
1a009eb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a009eb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a009eba:	f022 0407 	bic.w	r4, r2, #7
1a009ebe:	f07f 0700 	mvns.w	r7, #0
1a009ec2:	2300      	movs	r3, #0
1a009ec4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a009ec8:	3c08      	subs	r4, #8
1a009eca:	ea85 0501 	eor.w	r5, r5, r1
1a009ece:	ea86 0601 	eor.w	r6, r6, r1
1a009ed2:	fa85 f547 	uadd8	r5, r5, r7
1a009ed6:	faa3 f587 	sel	r5, r3, r7
1a009eda:	fa86 f647 	uadd8	r6, r6, r7
1a009ede:	faa5 f687 	sel	r6, r5, r7
1a009ee2:	b98e      	cbnz	r6, 1a009f08 <memchr+0x78>
1a009ee4:	d1ee      	bne.n	1a009ec4 <memchr+0x34>
1a009ee6:	bcf0      	pop	{r4, r5, r6, r7}
1a009ee8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a009eec:	f002 0207 	and.w	r2, r2, #7
1a009ef0:	b132      	cbz	r2, 1a009f00 <memchr+0x70>
1a009ef2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a009ef6:	3a01      	subs	r2, #1
1a009ef8:	ea83 0301 	eor.w	r3, r3, r1
1a009efc:	b113      	cbz	r3, 1a009f04 <memchr+0x74>
1a009efe:	d1f8      	bne.n	1a009ef2 <memchr+0x62>
1a009f00:	2000      	movs	r0, #0
1a009f02:	4770      	bx	lr
1a009f04:	3801      	subs	r0, #1
1a009f06:	4770      	bx	lr
1a009f08:	2d00      	cmp	r5, #0
1a009f0a:	bf06      	itte	eq
1a009f0c:	4635      	moveq	r5, r6
1a009f0e:	3803      	subeq	r0, #3
1a009f10:	3807      	subne	r0, #7
1a009f12:	f015 0f01 	tst.w	r5, #1
1a009f16:	d107      	bne.n	1a009f28 <memchr+0x98>
1a009f18:	3001      	adds	r0, #1
1a009f1a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a009f1e:	bf02      	ittt	eq
1a009f20:	3001      	addeq	r0, #1
1a009f22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a009f26:	3001      	addeq	r0, #1
1a009f28:	bcf0      	pop	{r4, r5, r6, r7}
1a009f2a:	3801      	subs	r0, #1
1a009f2c:	4770      	bx	lr
1a009f2e:	bf00      	nop

1a009f30 <memmove>:
1a009f30:	4288      	cmp	r0, r1
1a009f32:	b4f0      	push	{r4, r5, r6, r7}
1a009f34:	d90d      	bls.n	1a009f52 <memmove+0x22>
1a009f36:	188b      	adds	r3, r1, r2
1a009f38:	4283      	cmp	r3, r0
1a009f3a:	d90a      	bls.n	1a009f52 <memmove+0x22>
1a009f3c:	1884      	adds	r4, r0, r2
1a009f3e:	b132      	cbz	r2, 1a009f4e <memmove+0x1e>
1a009f40:	4622      	mov	r2, r4
1a009f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a009f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a009f4a:	4299      	cmp	r1, r3
1a009f4c:	d1f9      	bne.n	1a009f42 <memmove+0x12>
1a009f4e:	bcf0      	pop	{r4, r5, r6, r7}
1a009f50:	4770      	bx	lr
1a009f52:	2a0f      	cmp	r2, #15
1a009f54:	d80e      	bhi.n	1a009f74 <memmove+0x44>
1a009f56:	4603      	mov	r3, r0
1a009f58:	1e54      	subs	r4, r2, #1
1a009f5a:	2a00      	cmp	r2, #0
1a009f5c:	d0f7      	beq.n	1a009f4e <memmove+0x1e>
1a009f5e:	3401      	adds	r4, #1
1a009f60:	440c      	add	r4, r1
1a009f62:	3b01      	subs	r3, #1
1a009f64:	f811 2b01 	ldrb.w	r2, [r1], #1
1a009f68:	f803 2f01 	strb.w	r2, [r3, #1]!
1a009f6c:	42a1      	cmp	r1, r4
1a009f6e:	d1f9      	bne.n	1a009f64 <memmove+0x34>
1a009f70:	bcf0      	pop	{r4, r5, r6, r7}
1a009f72:	4770      	bx	lr
1a009f74:	ea40 0301 	orr.w	r3, r0, r1
1a009f78:	079b      	lsls	r3, r3, #30
1a009f7a:	d13b      	bne.n	1a009ff4 <memmove+0xc4>
1a009f7c:	f1a2 0710 	sub.w	r7, r2, #16
1a009f80:	093f      	lsrs	r7, r7, #4
1a009f82:	f101 0620 	add.w	r6, r1, #32
1a009f86:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a009f8a:	f101 0310 	add.w	r3, r1, #16
1a009f8e:	f100 0410 	add.w	r4, r0, #16
1a009f92:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a009f96:	f844 5c10 	str.w	r5, [r4, #-16]
1a009f9a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a009f9e:	f844 5c0c 	str.w	r5, [r4, #-12]
1a009fa2:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a009fa6:	f844 5c08 	str.w	r5, [r4, #-8]
1a009faa:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a009fae:	f844 5c04 	str.w	r5, [r4, #-4]
1a009fb2:	3310      	adds	r3, #16
1a009fb4:	42b3      	cmp	r3, r6
1a009fb6:	f104 0410 	add.w	r4, r4, #16
1a009fba:	d1ea      	bne.n	1a009f92 <memmove+0x62>
1a009fbc:	1c7b      	adds	r3, r7, #1
1a009fbe:	011b      	lsls	r3, r3, #4
1a009fc0:	f012 0f0c 	tst.w	r2, #12
1a009fc4:	4419      	add	r1, r3
1a009fc6:	f002 050f 	and.w	r5, r2, #15
1a009fca:	4403      	add	r3, r0
1a009fcc:	d015      	beq.n	1a009ffa <memmove+0xca>
1a009fce:	3d04      	subs	r5, #4
1a009fd0:	08ad      	lsrs	r5, r5, #2
1a009fd2:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a009fd6:	1f1c      	subs	r4, r3, #4
1a009fd8:	460e      	mov	r6, r1
1a009fda:	f856 7b04 	ldr.w	r7, [r6], #4
1a009fde:	f844 7f04 	str.w	r7, [r4, #4]!
1a009fe2:	4564      	cmp	r4, ip
1a009fe4:	d1f9      	bne.n	1a009fda <memmove+0xaa>
1a009fe6:	3501      	adds	r5, #1
1a009fe8:	00ad      	lsls	r5, r5, #2
1a009fea:	442b      	add	r3, r5
1a009fec:	4429      	add	r1, r5
1a009fee:	f002 0203 	and.w	r2, r2, #3
1a009ff2:	e7b1      	b.n	1a009f58 <memmove+0x28>
1a009ff4:	1e54      	subs	r4, r2, #1
1a009ff6:	4603      	mov	r3, r0
1a009ff8:	e7b1      	b.n	1a009f5e <memmove+0x2e>
1a009ffa:	462a      	mov	r2, r5
1a009ffc:	e7ac      	b.n	1a009f58 <memmove+0x28>
1a009ffe:	bf00      	nop

1a00a000 <_Balloc>:
1a00a000:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00a002:	b570      	push	{r4, r5, r6, lr}
1a00a004:	4605      	mov	r5, r0
1a00a006:	460c      	mov	r4, r1
1a00a008:	b14b      	cbz	r3, 1a00a01e <_Balloc+0x1e>
1a00a00a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a00a00e:	b180      	cbz	r0, 1a00a032 <_Balloc+0x32>
1a00a010:	6802      	ldr	r2, [r0, #0]
1a00a012:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a00a016:	2300      	movs	r3, #0
1a00a018:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a00a01c:	bd70      	pop	{r4, r5, r6, pc}
1a00a01e:	2221      	movs	r2, #33	; 0x21
1a00a020:	2104      	movs	r1, #4
1a00a022:	f000 fd63 	bl	1a00aaec <_calloc_r>
1a00a026:	4603      	mov	r3, r0
1a00a028:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00a02a:	2800      	cmp	r0, #0
1a00a02c:	d1ed      	bne.n	1a00a00a <_Balloc+0xa>
1a00a02e:	2000      	movs	r0, #0
1a00a030:	bd70      	pop	{r4, r5, r6, pc}
1a00a032:	2101      	movs	r1, #1
1a00a034:	fa01 f604 	lsl.w	r6, r1, r4
1a00a038:	1d72      	adds	r2, r6, #5
1a00a03a:	4628      	mov	r0, r5
1a00a03c:	0092      	lsls	r2, r2, #2
1a00a03e:	f000 fd55 	bl	1a00aaec <_calloc_r>
1a00a042:	2800      	cmp	r0, #0
1a00a044:	d0f3      	beq.n	1a00a02e <_Balloc+0x2e>
1a00a046:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a00a04a:	e7e4      	b.n	1a00a016 <_Balloc+0x16>

1a00a04c <_Bfree>:
1a00a04c:	b131      	cbz	r1, 1a00a05c <_Bfree+0x10>
1a00a04e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00a050:	684a      	ldr	r2, [r1, #4]
1a00a052:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a00a056:	6008      	str	r0, [r1, #0]
1a00a058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a00a05c:	4770      	bx	lr
1a00a05e:	bf00      	nop

1a00a060 <__multadd>:
1a00a060:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00a062:	690c      	ldr	r4, [r1, #16]
1a00a064:	b083      	sub	sp, #12
1a00a066:	460d      	mov	r5, r1
1a00a068:	4606      	mov	r6, r0
1a00a06a:	f101 0c14 	add.w	ip, r1, #20
1a00a06e:	2700      	movs	r7, #0
1a00a070:	f8dc 0000 	ldr.w	r0, [ip]
1a00a074:	b281      	uxth	r1, r0
1a00a076:	fb02 3301 	mla	r3, r2, r1, r3
1a00a07a:	0c19      	lsrs	r1, r3, #16
1a00a07c:	0c00      	lsrs	r0, r0, #16
1a00a07e:	fb02 1000 	mla	r0, r2, r0, r1
1a00a082:	b29b      	uxth	r3, r3
1a00a084:	3701      	adds	r7, #1
1a00a086:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a00a08a:	42bc      	cmp	r4, r7
1a00a08c:	f84c 3b04 	str.w	r3, [ip], #4
1a00a090:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a00a094:	dcec      	bgt.n	1a00a070 <__multadd+0x10>
1a00a096:	b13b      	cbz	r3, 1a00a0a8 <__multadd+0x48>
1a00a098:	68aa      	ldr	r2, [r5, #8]
1a00a09a:	42a2      	cmp	r2, r4
1a00a09c:	dd07      	ble.n	1a00a0ae <__multadd+0x4e>
1a00a09e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00a0a2:	3401      	adds	r4, #1
1a00a0a4:	6153      	str	r3, [r2, #20]
1a00a0a6:	612c      	str	r4, [r5, #16]
1a00a0a8:	4628      	mov	r0, r5
1a00a0aa:	b003      	add	sp, #12
1a00a0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00a0ae:	6869      	ldr	r1, [r5, #4]
1a00a0b0:	9301      	str	r3, [sp, #4]
1a00a0b2:	3101      	adds	r1, #1
1a00a0b4:	4630      	mov	r0, r6
1a00a0b6:	f7ff ffa3 	bl	1a00a000 <_Balloc>
1a00a0ba:	692a      	ldr	r2, [r5, #16]
1a00a0bc:	3202      	adds	r2, #2
1a00a0be:	f105 010c 	add.w	r1, r5, #12
1a00a0c2:	4607      	mov	r7, r0
1a00a0c4:	0092      	lsls	r2, r2, #2
1a00a0c6:	300c      	adds	r0, #12
1a00a0c8:	f7fc fcaa 	bl	1a006a20 <memcpy>
1a00a0cc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a00a0ce:	6869      	ldr	r1, [r5, #4]
1a00a0d0:	9b01      	ldr	r3, [sp, #4]
1a00a0d2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a00a0d6:	6028      	str	r0, [r5, #0]
1a00a0d8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a00a0dc:	463d      	mov	r5, r7
1a00a0de:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00a0e2:	3401      	adds	r4, #1
1a00a0e4:	6153      	str	r3, [r2, #20]
1a00a0e6:	612c      	str	r4, [r5, #16]
1a00a0e8:	e7de      	b.n	1a00a0a8 <__multadd+0x48>
1a00a0ea:	bf00      	nop

1a00a0ec <__hi0bits>:
1a00a0ec:	0c02      	lsrs	r2, r0, #16
1a00a0ee:	0412      	lsls	r2, r2, #16
1a00a0f0:	4603      	mov	r3, r0
1a00a0f2:	b9ca      	cbnz	r2, 1a00a128 <__hi0bits+0x3c>
1a00a0f4:	0403      	lsls	r3, r0, #16
1a00a0f6:	2010      	movs	r0, #16
1a00a0f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a00a0fc:	bf04      	itt	eq
1a00a0fe:	021b      	lsleq	r3, r3, #8
1a00a100:	3008      	addeq	r0, #8
1a00a102:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a00a106:	bf04      	itt	eq
1a00a108:	011b      	lsleq	r3, r3, #4
1a00a10a:	3004      	addeq	r0, #4
1a00a10c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a00a110:	bf04      	itt	eq
1a00a112:	009b      	lsleq	r3, r3, #2
1a00a114:	3002      	addeq	r0, #2
1a00a116:	2b00      	cmp	r3, #0
1a00a118:	db05      	blt.n	1a00a126 <__hi0bits+0x3a>
1a00a11a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a00a11e:	f100 0001 	add.w	r0, r0, #1
1a00a122:	bf08      	it	eq
1a00a124:	2020      	moveq	r0, #32
1a00a126:	4770      	bx	lr
1a00a128:	2000      	movs	r0, #0
1a00a12a:	e7e5      	b.n	1a00a0f8 <__hi0bits+0xc>

1a00a12c <__lo0bits>:
1a00a12c:	6803      	ldr	r3, [r0, #0]
1a00a12e:	f013 0207 	ands.w	r2, r3, #7
1a00a132:	4601      	mov	r1, r0
1a00a134:	d007      	beq.n	1a00a146 <__lo0bits+0x1a>
1a00a136:	07da      	lsls	r2, r3, #31
1a00a138:	d420      	bmi.n	1a00a17c <__lo0bits+0x50>
1a00a13a:	0798      	lsls	r0, r3, #30
1a00a13c:	d522      	bpl.n	1a00a184 <__lo0bits+0x58>
1a00a13e:	085b      	lsrs	r3, r3, #1
1a00a140:	600b      	str	r3, [r1, #0]
1a00a142:	2001      	movs	r0, #1
1a00a144:	4770      	bx	lr
1a00a146:	b298      	uxth	r0, r3
1a00a148:	b9b0      	cbnz	r0, 1a00a178 <__lo0bits+0x4c>
1a00a14a:	0c1b      	lsrs	r3, r3, #16
1a00a14c:	2010      	movs	r0, #16
1a00a14e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00a152:	bf04      	itt	eq
1a00a154:	0a1b      	lsreq	r3, r3, #8
1a00a156:	3008      	addeq	r0, #8
1a00a158:	071a      	lsls	r2, r3, #28
1a00a15a:	bf04      	itt	eq
1a00a15c:	091b      	lsreq	r3, r3, #4
1a00a15e:	3004      	addeq	r0, #4
1a00a160:	079a      	lsls	r2, r3, #30
1a00a162:	bf04      	itt	eq
1a00a164:	089b      	lsreq	r3, r3, #2
1a00a166:	3002      	addeq	r0, #2
1a00a168:	07da      	lsls	r2, r3, #31
1a00a16a:	d403      	bmi.n	1a00a174 <__lo0bits+0x48>
1a00a16c:	085b      	lsrs	r3, r3, #1
1a00a16e:	f100 0001 	add.w	r0, r0, #1
1a00a172:	d005      	beq.n	1a00a180 <__lo0bits+0x54>
1a00a174:	600b      	str	r3, [r1, #0]
1a00a176:	4770      	bx	lr
1a00a178:	4610      	mov	r0, r2
1a00a17a:	e7e8      	b.n	1a00a14e <__lo0bits+0x22>
1a00a17c:	2000      	movs	r0, #0
1a00a17e:	4770      	bx	lr
1a00a180:	2020      	movs	r0, #32
1a00a182:	4770      	bx	lr
1a00a184:	089b      	lsrs	r3, r3, #2
1a00a186:	600b      	str	r3, [r1, #0]
1a00a188:	2002      	movs	r0, #2
1a00a18a:	4770      	bx	lr

1a00a18c <__i2b>:
1a00a18c:	b510      	push	{r4, lr}
1a00a18e:	460c      	mov	r4, r1
1a00a190:	2101      	movs	r1, #1
1a00a192:	f7ff ff35 	bl	1a00a000 <_Balloc>
1a00a196:	2201      	movs	r2, #1
1a00a198:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a00a19c:	bd10      	pop	{r4, pc}
1a00a19e:	bf00      	nop

1a00a1a0 <__multiply>:
1a00a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a1a4:	690e      	ldr	r6, [r1, #16]
1a00a1a6:	6917      	ldr	r7, [r2, #16]
1a00a1a8:	42be      	cmp	r6, r7
1a00a1aa:	b083      	sub	sp, #12
1a00a1ac:	460c      	mov	r4, r1
1a00a1ae:	4615      	mov	r5, r2
1a00a1b0:	db05      	blt.n	1a00a1be <__multiply+0x1e>
1a00a1b2:	463a      	mov	r2, r7
1a00a1b4:	462b      	mov	r3, r5
1a00a1b6:	4637      	mov	r7, r6
1a00a1b8:	460d      	mov	r5, r1
1a00a1ba:	4616      	mov	r6, r2
1a00a1bc:	461c      	mov	r4, r3
1a00a1be:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a00a1c2:	eb07 0806 	add.w	r8, r7, r6
1a00a1c6:	4543      	cmp	r3, r8
1a00a1c8:	bfb8      	it	lt
1a00a1ca:	3101      	addlt	r1, #1
1a00a1cc:	f7ff ff18 	bl	1a00a000 <_Balloc>
1a00a1d0:	f100 0a14 	add.w	sl, r0, #20
1a00a1d4:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a00a1d8:	45ca      	cmp	sl, r9
1a00a1da:	9000      	str	r0, [sp, #0]
1a00a1dc:	d205      	bcs.n	1a00a1ea <__multiply+0x4a>
1a00a1de:	4653      	mov	r3, sl
1a00a1e0:	2100      	movs	r1, #0
1a00a1e2:	f843 1b04 	str.w	r1, [r3], #4
1a00a1e6:	4599      	cmp	r9, r3
1a00a1e8:	d8fb      	bhi.n	1a00a1e2 <__multiply+0x42>
1a00a1ea:	f104 0e14 	add.w	lr, r4, #20
1a00a1ee:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a00a1f2:	f105 0314 	add.w	r3, r5, #20
1a00a1f6:	45de      	cmp	lr, fp
1a00a1f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a00a1fc:	d253      	bcs.n	1a00a2a6 <__multiply+0x106>
1a00a1fe:	f8cd 8004 	str.w	r8, [sp, #4]
1a00a202:	4698      	mov	r8, r3
1a00a204:	e005      	b.n	1a00a212 <__multiply+0x72>
1a00a206:	0c09      	lsrs	r1, r1, #16
1a00a208:	d128      	bne.n	1a00a25c <__multiply+0xbc>
1a00a20a:	45f3      	cmp	fp, lr
1a00a20c:	f10a 0a04 	add.w	sl, sl, #4
1a00a210:	d947      	bls.n	1a00a2a2 <__multiply+0x102>
1a00a212:	f85e 1b04 	ldr.w	r1, [lr], #4
1a00a216:	b28e      	uxth	r6, r1
1a00a218:	2e00      	cmp	r6, #0
1a00a21a:	d0f4      	beq.n	1a00a206 <__multiply+0x66>
1a00a21c:	4645      	mov	r5, r8
1a00a21e:	4654      	mov	r4, sl
1a00a220:	2300      	movs	r3, #0
1a00a222:	f855 1b04 	ldr.w	r1, [r5], #4
1a00a226:	6820      	ldr	r0, [r4, #0]
1a00a228:	b28a      	uxth	r2, r1
1a00a22a:	fa1f fc80 	uxth.w	ip, r0
1a00a22e:	fb06 c202 	mla	r2, r6, r2, ip
1a00a232:	0c09      	lsrs	r1, r1, #16
1a00a234:	0c00      	lsrs	r0, r0, #16
1a00a236:	4413      	add	r3, r2
1a00a238:	fb06 0201 	mla	r2, r6, r1, r0
1a00a23c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a00a240:	b29b      	uxth	r3, r3
1a00a242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00a246:	42af      	cmp	r7, r5
1a00a248:	f844 3b04 	str.w	r3, [r4], #4
1a00a24c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a00a250:	d8e7      	bhi.n	1a00a222 <__multiply+0x82>
1a00a252:	6023      	str	r3, [r4, #0]
1a00a254:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a00a258:	0c09      	lsrs	r1, r1, #16
1a00a25a:	d0d6      	beq.n	1a00a20a <__multiply+0x6a>
1a00a25c:	f8da 3000 	ldr.w	r3, [sl]
1a00a260:	4640      	mov	r0, r8
1a00a262:	461a      	mov	r2, r3
1a00a264:	4654      	mov	r4, sl
1a00a266:	f04f 0c00 	mov.w	ip, #0
1a00a26a:	8805      	ldrh	r5, [r0, #0]
1a00a26c:	0c12      	lsrs	r2, r2, #16
1a00a26e:	fb01 2205 	mla	r2, r1, r5, r2
1a00a272:	4494      	add	ip, r2
1a00a274:	b29b      	uxth	r3, r3
1a00a276:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a00a27a:	f844 3b04 	str.w	r3, [r4], #4
1a00a27e:	f850 3b04 	ldr.w	r3, [r0], #4
1a00a282:	6822      	ldr	r2, [r4, #0]
1a00a284:	0c1b      	lsrs	r3, r3, #16
1a00a286:	b295      	uxth	r5, r2
1a00a288:	fb01 5303 	mla	r3, r1, r3, r5
1a00a28c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a00a290:	4287      	cmp	r7, r0
1a00a292:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a00a296:	d8e8      	bhi.n	1a00a26a <__multiply+0xca>
1a00a298:	45f3      	cmp	fp, lr
1a00a29a:	6023      	str	r3, [r4, #0]
1a00a29c:	f10a 0a04 	add.w	sl, sl, #4
1a00a2a0:	d8b7      	bhi.n	1a00a212 <__multiply+0x72>
1a00a2a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a00a2a6:	f1b8 0f00 	cmp.w	r8, #0
1a00a2aa:	dd0b      	ble.n	1a00a2c4 <__multiply+0x124>
1a00a2ac:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a00a2b0:	f1a9 0904 	sub.w	r9, r9, #4
1a00a2b4:	b11b      	cbz	r3, 1a00a2be <__multiply+0x11e>
1a00a2b6:	e005      	b.n	1a00a2c4 <__multiply+0x124>
1a00a2b8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a00a2bc:	b913      	cbnz	r3, 1a00a2c4 <__multiply+0x124>
1a00a2be:	f1b8 0801 	subs.w	r8, r8, #1
1a00a2c2:	d1f9      	bne.n	1a00a2b8 <__multiply+0x118>
1a00a2c4:	9800      	ldr	r0, [sp, #0]
1a00a2c6:	f8c0 8010 	str.w	r8, [r0, #16]
1a00a2ca:	b003      	add	sp, #12
1a00a2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a00a2d0 <__pow5mult>:
1a00a2d0:	f012 0303 	ands.w	r3, r2, #3
1a00a2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00a2d8:	4614      	mov	r4, r2
1a00a2da:	4607      	mov	r7, r0
1a00a2dc:	d12e      	bne.n	1a00a33c <__pow5mult+0x6c>
1a00a2de:	460d      	mov	r5, r1
1a00a2e0:	10a4      	asrs	r4, r4, #2
1a00a2e2:	d01c      	beq.n	1a00a31e <__pow5mult+0x4e>
1a00a2e4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a00a2e6:	b396      	cbz	r6, 1a00a34e <__pow5mult+0x7e>
1a00a2e8:	07e3      	lsls	r3, r4, #31
1a00a2ea:	f04f 0800 	mov.w	r8, #0
1a00a2ee:	d406      	bmi.n	1a00a2fe <__pow5mult+0x2e>
1a00a2f0:	1064      	asrs	r4, r4, #1
1a00a2f2:	d014      	beq.n	1a00a31e <__pow5mult+0x4e>
1a00a2f4:	6830      	ldr	r0, [r6, #0]
1a00a2f6:	b1a8      	cbz	r0, 1a00a324 <__pow5mult+0x54>
1a00a2f8:	4606      	mov	r6, r0
1a00a2fa:	07e3      	lsls	r3, r4, #31
1a00a2fc:	d5f8      	bpl.n	1a00a2f0 <__pow5mult+0x20>
1a00a2fe:	4632      	mov	r2, r6
1a00a300:	4629      	mov	r1, r5
1a00a302:	4638      	mov	r0, r7
1a00a304:	f7ff ff4c 	bl	1a00a1a0 <__multiply>
1a00a308:	b1b5      	cbz	r5, 1a00a338 <__pow5mult+0x68>
1a00a30a:	686a      	ldr	r2, [r5, #4]
1a00a30c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00a30e:	1064      	asrs	r4, r4, #1
1a00a310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00a314:	6029      	str	r1, [r5, #0]
1a00a316:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00a31a:	4605      	mov	r5, r0
1a00a31c:	d1ea      	bne.n	1a00a2f4 <__pow5mult+0x24>
1a00a31e:	4628      	mov	r0, r5
1a00a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00a324:	4632      	mov	r2, r6
1a00a326:	4631      	mov	r1, r6
1a00a328:	4638      	mov	r0, r7
1a00a32a:	f7ff ff39 	bl	1a00a1a0 <__multiply>
1a00a32e:	6030      	str	r0, [r6, #0]
1a00a330:	f8c0 8000 	str.w	r8, [r0]
1a00a334:	4606      	mov	r6, r0
1a00a336:	e7e0      	b.n	1a00a2fa <__pow5mult+0x2a>
1a00a338:	4605      	mov	r5, r0
1a00a33a:	e7d9      	b.n	1a00a2f0 <__pow5mult+0x20>
1a00a33c:	3b01      	subs	r3, #1
1a00a33e:	4a0b      	ldr	r2, [pc, #44]	; (1a00a36c <__pow5mult+0x9c>)
1a00a340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a00a344:	2300      	movs	r3, #0
1a00a346:	f7ff fe8b 	bl	1a00a060 <__multadd>
1a00a34a:	4605      	mov	r5, r0
1a00a34c:	e7c8      	b.n	1a00a2e0 <__pow5mult+0x10>
1a00a34e:	2101      	movs	r1, #1
1a00a350:	4638      	mov	r0, r7
1a00a352:	f7ff fe55 	bl	1a00a000 <_Balloc>
1a00a356:	f240 2371 	movw	r3, #625	; 0x271
1a00a35a:	6143      	str	r3, [r0, #20]
1a00a35c:	2201      	movs	r2, #1
1a00a35e:	2300      	movs	r3, #0
1a00a360:	6102      	str	r2, [r0, #16]
1a00a362:	4606      	mov	r6, r0
1a00a364:	64b8      	str	r0, [r7, #72]	; 0x48
1a00a366:	6003      	str	r3, [r0, #0]
1a00a368:	e7be      	b.n	1a00a2e8 <__pow5mult+0x18>
1a00a36a:	bf00      	nop
1a00a36c:	1a00b3e0 	.word	0x1a00b3e0

1a00a370 <__lshift>:
1a00a370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00a374:	690e      	ldr	r6, [r1, #16]
1a00a376:	460d      	mov	r5, r1
1a00a378:	ea4f 1962 	mov.w	r9, r2, asr #5
1a00a37c:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a00a380:	444e      	add	r6, r9
1a00a382:	1c74      	adds	r4, r6, #1
1a00a384:	429c      	cmp	r4, r3
1a00a386:	4690      	mov	r8, r2
1a00a388:	4607      	mov	r7, r0
1a00a38a:	dd04      	ble.n	1a00a396 <__lshift+0x26>
1a00a38c:	005b      	lsls	r3, r3, #1
1a00a38e:	429c      	cmp	r4, r3
1a00a390:	f101 0101 	add.w	r1, r1, #1
1a00a394:	dcfa      	bgt.n	1a00a38c <__lshift+0x1c>
1a00a396:	4638      	mov	r0, r7
1a00a398:	f7ff fe32 	bl	1a00a000 <_Balloc>
1a00a39c:	f1b9 0f00 	cmp.w	r9, #0
1a00a3a0:	f100 0c14 	add.w	ip, r0, #20
1a00a3a4:	dd0e      	ble.n	1a00a3c4 <__lshift+0x54>
1a00a3a6:	f109 0905 	add.w	r9, r9, #5
1a00a3aa:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a00a3ae:	eb00 0109 	add.w	r1, r0, r9
1a00a3b2:	4663      	mov	r3, ip
1a00a3b4:	2200      	movs	r2, #0
1a00a3b6:	f843 2b04 	str.w	r2, [r3], #4
1a00a3ba:	428b      	cmp	r3, r1
1a00a3bc:	d1fb      	bne.n	1a00a3b6 <__lshift+0x46>
1a00a3be:	f1a9 0914 	sub.w	r9, r9, #20
1a00a3c2:	44cc      	add	ip, r9
1a00a3c4:	6929      	ldr	r1, [r5, #16]
1a00a3c6:	f105 0314 	add.w	r3, r5, #20
1a00a3ca:	f018 081f 	ands.w	r8, r8, #31
1a00a3ce:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a00a3d2:	d01d      	beq.n	1a00a410 <__lshift+0xa0>
1a00a3d4:	f1c8 0920 	rsb	r9, r8, #32
1a00a3d8:	2200      	movs	r2, #0
1a00a3da:	6819      	ldr	r1, [r3, #0]
1a00a3dc:	fa01 f108 	lsl.w	r1, r1, r8
1a00a3e0:	4311      	orrs	r1, r2
1a00a3e2:	f84c 1b04 	str.w	r1, [ip], #4
1a00a3e6:	f853 2b04 	ldr.w	r2, [r3], #4
1a00a3ea:	4573      	cmp	r3, lr
1a00a3ec:	fa22 f209 	lsr.w	r2, r2, r9
1a00a3f0:	d3f3      	bcc.n	1a00a3da <__lshift+0x6a>
1a00a3f2:	f8cc 2000 	str.w	r2, [ip]
1a00a3f6:	2a00      	cmp	r2, #0
1a00a3f8:	bf18      	it	ne
1a00a3fa:	4626      	movne	r6, r4
1a00a3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00a3fe:	686a      	ldr	r2, [r5, #4]
1a00a400:	6106      	str	r6, [r0, #16]
1a00a402:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00a406:	6029      	str	r1, [r5, #0]
1a00a408:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00a40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00a410:	f1ac 0c04 	sub.w	ip, ip, #4
1a00a414:	f853 2b04 	ldr.w	r2, [r3], #4
1a00a418:	f84c 2f04 	str.w	r2, [ip, #4]!
1a00a41c:	459e      	cmp	lr, r3
1a00a41e:	d8f9      	bhi.n	1a00a414 <__lshift+0xa4>
1a00a420:	e7ec      	b.n	1a00a3fc <__lshift+0x8c>
1a00a422:	bf00      	nop

1a00a424 <__mcmp>:
1a00a424:	b430      	push	{r4, r5}
1a00a426:	690b      	ldr	r3, [r1, #16]
1a00a428:	4605      	mov	r5, r0
1a00a42a:	6900      	ldr	r0, [r0, #16]
1a00a42c:	1ac0      	subs	r0, r0, r3
1a00a42e:	d110      	bne.n	1a00a452 <__mcmp+0x2e>
1a00a430:	009b      	lsls	r3, r3, #2
1a00a432:	3514      	adds	r5, #20
1a00a434:	3114      	adds	r1, #20
1a00a436:	4419      	add	r1, r3
1a00a438:	442b      	add	r3, r5
1a00a43a:	e001      	b.n	1a00a440 <__mcmp+0x1c>
1a00a43c:	429d      	cmp	r5, r3
1a00a43e:	d208      	bcs.n	1a00a452 <__mcmp+0x2e>
1a00a440:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a00a444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00a448:	4294      	cmp	r4, r2
1a00a44a:	d0f7      	beq.n	1a00a43c <__mcmp+0x18>
1a00a44c:	d203      	bcs.n	1a00a456 <__mcmp+0x32>
1a00a44e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00a452:	bc30      	pop	{r4, r5}
1a00a454:	4770      	bx	lr
1a00a456:	2001      	movs	r0, #1
1a00a458:	bc30      	pop	{r4, r5}
1a00a45a:	4770      	bx	lr

1a00a45c <__mdiff>:
1a00a45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00a460:	460f      	mov	r7, r1
1a00a462:	690d      	ldr	r5, [r1, #16]
1a00a464:	6911      	ldr	r1, [r2, #16]
1a00a466:	1a6d      	subs	r5, r5, r1
1a00a468:	2d00      	cmp	r5, #0
1a00a46a:	4690      	mov	r8, r2
1a00a46c:	4684      	mov	ip, r0
1a00a46e:	f107 0414 	add.w	r4, r7, #20
1a00a472:	f102 0614 	add.w	r6, r2, #20
1a00a476:	d114      	bne.n	1a00a4a2 <__mdiff+0x46>
1a00a478:	0089      	lsls	r1, r1, #2
1a00a47a:	1863      	adds	r3, r4, r1
1a00a47c:	4431      	add	r1, r6
1a00a47e:	e001      	b.n	1a00a484 <__mdiff+0x28>
1a00a480:	42a3      	cmp	r3, r4
1a00a482:	d95d      	bls.n	1a00a540 <__mdiff+0xe4>
1a00a484:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a00a488:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00a48c:	4290      	cmp	r0, r2
1a00a48e:	d0f7      	beq.n	1a00a480 <__mdiff+0x24>
1a00a490:	d209      	bcs.n	1a00a4a6 <__mdiff+0x4a>
1a00a492:	4622      	mov	r2, r4
1a00a494:	463b      	mov	r3, r7
1a00a496:	4634      	mov	r4, r6
1a00a498:	4647      	mov	r7, r8
1a00a49a:	4616      	mov	r6, r2
1a00a49c:	4698      	mov	r8, r3
1a00a49e:	2501      	movs	r5, #1
1a00a4a0:	e001      	b.n	1a00a4a6 <__mdiff+0x4a>
1a00a4a2:	dbf6      	blt.n	1a00a492 <__mdiff+0x36>
1a00a4a4:	2500      	movs	r5, #0
1a00a4a6:	4660      	mov	r0, ip
1a00a4a8:	6879      	ldr	r1, [r7, #4]
1a00a4aa:	f7ff fda9 	bl	1a00a000 <_Balloc>
1a00a4ae:	693f      	ldr	r7, [r7, #16]
1a00a4b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a00a4b4:	60c5      	str	r5, [r0, #12]
1a00a4b6:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a00a4ba:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a00a4be:	f100 0514 	add.w	r5, r0, #20
1a00a4c2:	2200      	movs	r2, #0
1a00a4c4:	e000      	b.n	1a00a4c8 <__mdiff+0x6c>
1a00a4c6:	460d      	mov	r5, r1
1a00a4c8:	f856 1b04 	ldr.w	r1, [r6], #4
1a00a4cc:	f854 8b04 	ldr.w	r8, [r4], #4
1a00a4d0:	fa1f f981 	uxth.w	r9, r1
1a00a4d4:	fa12 f388 	uxtah	r3, r2, r8
1a00a4d8:	0c0a      	lsrs	r2, r1, #16
1a00a4da:	eba3 0309 	sub.w	r3, r3, r9
1a00a4de:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a00a4e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a00a4e6:	4629      	mov	r1, r5
1a00a4e8:	b29b      	uxth	r3, r3
1a00a4ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00a4ee:	45b6      	cmp	lr, r6
1a00a4f0:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00a4f4:	f841 3b04 	str.w	r3, [r1], #4
1a00a4f8:	46a0      	mov	r8, r4
1a00a4fa:	d8e4      	bhi.n	1a00a4c6 <__mdiff+0x6a>
1a00a4fc:	45a4      	cmp	ip, r4
1a00a4fe:	d916      	bls.n	1a00a52e <__mdiff+0xd2>
1a00a500:	460e      	mov	r6, r1
1a00a502:	f858 5b04 	ldr.w	r5, [r8], #4
1a00a506:	fa12 f385 	uxtah	r3, r2, r5
1a00a50a:	141a      	asrs	r2, r3, #16
1a00a50c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a00a510:	b29b      	uxth	r3, r3
1a00a512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00a516:	45c4      	cmp	ip, r8
1a00a518:	f846 3b04 	str.w	r3, [r6], #4
1a00a51c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00a520:	d8ef      	bhi.n	1a00a502 <__mdiff+0xa6>
1a00a522:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a00a526:	1b2d      	subs	r5, r5, r4
1a00a528:	f025 0503 	bic.w	r5, r5, #3
1a00a52c:	440d      	add	r5, r1
1a00a52e:	b923      	cbnz	r3, 1a00a53a <__mdiff+0xde>
1a00a530:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a00a534:	3f01      	subs	r7, #1
1a00a536:	2b00      	cmp	r3, #0
1a00a538:	d0fa      	beq.n	1a00a530 <__mdiff+0xd4>
1a00a53a:	6107      	str	r7, [r0, #16]
1a00a53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00a540:	4660      	mov	r0, ip
1a00a542:	2100      	movs	r1, #0
1a00a544:	f7ff fd5c 	bl	1a00a000 <_Balloc>
1a00a548:	2201      	movs	r2, #1
1a00a54a:	2300      	movs	r3, #0
1a00a54c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a00a550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00a554 <__d2b>:
1a00a554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00a558:	460f      	mov	r7, r1
1a00a55a:	b083      	sub	sp, #12
1a00a55c:	2101      	movs	r1, #1
1a00a55e:	ec55 4b10 	vmov	r4, r5, d0
1a00a562:	4616      	mov	r6, r2
1a00a564:	f7ff fd4c 	bl	1a00a000 <_Balloc>
1a00a568:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a00a56c:	4681      	mov	r9, r0
1a00a56e:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a00a572:	f1b8 0f00 	cmp.w	r8, #0
1a00a576:	d001      	beq.n	1a00a57c <__d2b+0x28>
1a00a578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a00a57c:	2c00      	cmp	r4, #0
1a00a57e:	9301      	str	r3, [sp, #4]
1a00a580:	d02b      	beq.n	1a00a5da <__d2b+0x86>
1a00a582:	4668      	mov	r0, sp
1a00a584:	9400      	str	r4, [sp, #0]
1a00a586:	f7ff fdd1 	bl	1a00a12c <__lo0bits>
1a00a58a:	b9d0      	cbnz	r0, 1a00a5c2 <__d2b+0x6e>
1a00a58c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00a590:	f8c9 2014 	str.w	r2, [r9, #20]
1a00a594:	2b00      	cmp	r3, #0
1a00a596:	bf14      	ite	ne
1a00a598:	2102      	movne	r1, #2
1a00a59a:	2101      	moveq	r1, #1
1a00a59c:	f8c9 3018 	str.w	r3, [r9, #24]
1a00a5a0:	f8c9 1010 	str.w	r1, [r9, #16]
1a00a5a4:	f1b8 0f00 	cmp.w	r8, #0
1a00a5a8:	d024      	beq.n	1a00a5f4 <__d2b+0xa0>
1a00a5aa:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a00a5ae:	eb08 0300 	add.w	r3, r8, r0
1a00a5b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a00a5b6:	603b      	str	r3, [r7, #0]
1a00a5b8:	6030      	str	r0, [r6, #0]
1a00a5ba:	4648      	mov	r0, r9
1a00a5bc:	b003      	add	sp, #12
1a00a5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00a5c2:	e9dd 1300 	ldrd	r1, r3, [sp]
1a00a5c6:	f1c0 0220 	rsb	r2, r0, #32
1a00a5ca:	fa03 f202 	lsl.w	r2, r3, r2
1a00a5ce:	430a      	orrs	r2, r1
1a00a5d0:	40c3      	lsrs	r3, r0
1a00a5d2:	9301      	str	r3, [sp, #4]
1a00a5d4:	f8c9 2014 	str.w	r2, [r9, #20]
1a00a5d8:	e7dc      	b.n	1a00a594 <__d2b+0x40>
1a00a5da:	a801      	add	r0, sp, #4
1a00a5dc:	f7ff fda6 	bl	1a00a12c <__lo0bits>
1a00a5e0:	9b01      	ldr	r3, [sp, #4]
1a00a5e2:	f8c9 3014 	str.w	r3, [r9, #20]
1a00a5e6:	2101      	movs	r1, #1
1a00a5e8:	3020      	adds	r0, #32
1a00a5ea:	f8c9 1010 	str.w	r1, [r9, #16]
1a00a5ee:	f1b8 0f00 	cmp.w	r8, #0
1a00a5f2:	d1da      	bne.n	1a00a5aa <__d2b+0x56>
1a00a5f4:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a00a5f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a00a5fc:	6038      	str	r0, [r7, #0]
1a00a5fe:	6918      	ldr	r0, [r3, #16]
1a00a600:	f7ff fd74 	bl	1a00a0ec <__hi0bits>
1a00a604:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a00a608:	6030      	str	r0, [r6, #0]
1a00a60a:	4648      	mov	r0, r9
1a00a60c:	b003      	add	sp, #12
1a00a60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00a612:	bf00      	nop

1a00a614 <_realloc_r>:
1a00a614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a618:	4617      	mov	r7, r2
1a00a61a:	2900      	cmp	r1, #0
1a00a61c:	f000 80bb 	beq.w	1a00a796 <_realloc_r+0x182>
1a00a620:	f107 040b 	add.w	r4, r7, #11
1a00a624:	4681      	mov	r9, r0
1a00a626:	460d      	mov	r5, r1
1a00a628:	f7fc fae4 	bl	1a006bf4 <__malloc_lock>
1a00a62c:	2c16      	cmp	r4, #22
1a00a62e:	d85e      	bhi.n	1a00a6ee <_realloc_r+0xda>
1a00a630:	2410      	movs	r4, #16
1a00a632:	4622      	mov	r2, r4
1a00a634:	42a7      	cmp	r7, r4
1a00a636:	d85f      	bhi.n	1a00a6f8 <_realloc_r+0xe4>
1a00a638:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00a63c:	f02e 0603 	bic.w	r6, lr, #3
1a00a640:	f1a5 0808 	sub.w	r8, r5, #8
1a00a644:	4296      	cmp	r6, r2
1a00a646:	eb08 0a06 	add.w	sl, r8, r6
1a00a64a:	f280 8081 	bge.w	1a00a750 <_realloc_r+0x13c>
1a00a64e:	4bcb      	ldr	r3, [pc, #812]	; (1a00a97c <_realloc_r+0x368>)
1a00a650:	f8da 0004 	ldr.w	r0, [sl, #4]
1a00a654:	6899      	ldr	r1, [r3, #8]
1a00a656:	4551      	cmp	r1, sl
1a00a658:	f000 80b5 	beq.w	1a00a7c6 <_realloc_r+0x1b2>
1a00a65c:	f020 0301 	bic.w	r3, r0, #1
1a00a660:	4453      	add	r3, sl
1a00a662:	685b      	ldr	r3, [r3, #4]
1a00a664:	07db      	lsls	r3, r3, #31
1a00a666:	f100 808a 	bmi.w	1a00a77e <_realloc_r+0x16a>
1a00a66a:	f020 0003 	bic.w	r0, r0, #3
1a00a66e:	1833      	adds	r3, r6, r0
1a00a670:	4293      	cmp	r3, r2
1a00a672:	f280 8112 	bge.w	1a00a89a <_realloc_r+0x286>
1a00a676:	f01e 0f01 	tst.w	lr, #1
1a00a67a:	d10f      	bne.n	1a00a69c <_realloc_r+0x88>
1a00a67c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00a680:	eba8 0b03 	sub.w	fp, r8, r3
1a00a684:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00a688:	f021 0103 	bic.w	r1, r1, #3
1a00a68c:	4408      	add	r0, r1
1a00a68e:	1983      	adds	r3, r0, r6
1a00a690:	4293      	cmp	r3, r2
1a00a692:	f280 8116 	bge.w	1a00a8c2 <_realloc_r+0x2ae>
1a00a696:	1873      	adds	r3, r6, r1
1a00a698:	4293      	cmp	r3, r2
1a00a69a:	da34      	bge.n	1a00a706 <_realloc_r+0xf2>
1a00a69c:	4639      	mov	r1, r7
1a00a69e:	4648      	mov	r0, r9
1a00a6a0:	f7fb ff06 	bl	1a0064b0 <_malloc_r>
1a00a6a4:	4607      	mov	r7, r0
1a00a6a6:	b1e0      	cbz	r0, 1a00a6e2 <_realloc_r+0xce>
1a00a6a8:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00a6ac:	f023 0301 	bic.w	r3, r3, #1
1a00a6b0:	4443      	add	r3, r8
1a00a6b2:	f1a0 0208 	sub.w	r2, r0, #8
1a00a6b6:	4293      	cmp	r3, r2
1a00a6b8:	f000 80f7 	beq.w	1a00a8aa <_realloc_r+0x296>
1a00a6bc:	1f32      	subs	r2, r6, #4
1a00a6be:	2a24      	cmp	r2, #36	; 0x24
1a00a6c0:	f200 80fb 	bhi.w	1a00a8ba <_realloc_r+0x2a6>
1a00a6c4:	2a13      	cmp	r2, #19
1a00a6c6:	6829      	ldr	r1, [r5, #0]
1a00a6c8:	f200 80c9 	bhi.w	1a00a85e <_realloc_r+0x24a>
1a00a6cc:	4603      	mov	r3, r0
1a00a6ce:	462a      	mov	r2, r5
1a00a6d0:	6019      	str	r1, [r3, #0]
1a00a6d2:	6851      	ldr	r1, [r2, #4]
1a00a6d4:	6059      	str	r1, [r3, #4]
1a00a6d6:	6892      	ldr	r2, [r2, #8]
1a00a6d8:	609a      	str	r2, [r3, #8]
1a00a6da:	4629      	mov	r1, r5
1a00a6dc:	4648      	mov	r0, r9
1a00a6de:	f7fb fd9b 	bl	1a006218 <_free_r>
1a00a6e2:	4648      	mov	r0, r9
1a00a6e4:	f7fc fa8c 	bl	1a006c00 <__malloc_unlock>
1a00a6e8:	4638      	mov	r0, r7
1a00a6ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a6ee:	f024 0407 	bic.w	r4, r4, #7
1a00a6f2:	2c00      	cmp	r4, #0
1a00a6f4:	4622      	mov	r2, r4
1a00a6f6:	da9d      	bge.n	1a00a634 <_realloc_r+0x20>
1a00a6f8:	230c      	movs	r3, #12
1a00a6fa:	f8c9 3000 	str.w	r3, [r9]
1a00a6fe:	2700      	movs	r7, #0
1a00a700:	4638      	mov	r0, r7
1a00a702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a706:	465f      	mov	r7, fp
1a00a708:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00a70c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a00a710:	1f32      	subs	r2, r6, #4
1a00a712:	2a24      	cmp	r2, #36	; 0x24
1a00a714:	60c1      	str	r1, [r0, #12]
1a00a716:	eb0b 0a03 	add.w	sl, fp, r3
1a00a71a:	6088      	str	r0, [r1, #8]
1a00a71c:	f200 80d9 	bhi.w	1a00a8d2 <_realloc_r+0x2be>
1a00a720:	2a13      	cmp	r2, #19
1a00a722:	6829      	ldr	r1, [r5, #0]
1a00a724:	f240 80d3 	bls.w	1a00a8ce <_realloc_r+0x2ba>
1a00a728:	f8cb 1008 	str.w	r1, [fp, #8]
1a00a72c:	6869      	ldr	r1, [r5, #4]
1a00a72e:	f8cb 100c 	str.w	r1, [fp, #12]
1a00a732:	2a1b      	cmp	r2, #27
1a00a734:	68a9      	ldr	r1, [r5, #8]
1a00a736:	f200 80e0 	bhi.w	1a00a8fa <_realloc_r+0x2e6>
1a00a73a:	f10b 0210 	add.w	r2, fp, #16
1a00a73e:	3508      	adds	r5, #8
1a00a740:	6011      	str	r1, [r2, #0]
1a00a742:	6869      	ldr	r1, [r5, #4]
1a00a744:	6051      	str	r1, [r2, #4]
1a00a746:	68a9      	ldr	r1, [r5, #8]
1a00a748:	6091      	str	r1, [r2, #8]
1a00a74a:	461e      	mov	r6, r3
1a00a74c:	46d8      	mov	r8, fp
1a00a74e:	463d      	mov	r5, r7
1a00a750:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a00a754:	1b32      	subs	r2, r6, r4
1a00a756:	2a0f      	cmp	r2, #15
1a00a758:	f003 0301 	and.w	r3, r3, #1
1a00a75c:	d820      	bhi.n	1a00a7a0 <_realloc_r+0x18c>
1a00a75e:	4333      	orrs	r3, r6
1a00a760:	f8c8 3004 	str.w	r3, [r8, #4]
1a00a764:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00a768:	f043 0301 	orr.w	r3, r3, #1
1a00a76c:	f8ca 3004 	str.w	r3, [sl, #4]
1a00a770:	4648      	mov	r0, r9
1a00a772:	462f      	mov	r7, r5
1a00a774:	f7fc fa44 	bl	1a006c00 <__malloc_unlock>
1a00a778:	4638      	mov	r0, r7
1a00a77a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00a77e:	f01e 0f01 	tst.w	lr, #1
1a00a782:	d18b      	bne.n	1a00a69c <_realloc_r+0x88>
1a00a784:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00a788:	eba8 0b03 	sub.w	fp, r8, r3
1a00a78c:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00a790:	f021 0103 	bic.w	r1, r1, #3
1a00a794:	e77f      	b.n	1a00a696 <_realloc_r+0x82>
1a00a796:	4611      	mov	r1, r2
1a00a798:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00a79c:	f7fb be88 	b.w	1a0064b0 <_malloc_r>
1a00a7a0:	eb08 0104 	add.w	r1, r8, r4
1a00a7a4:	4323      	orrs	r3, r4
1a00a7a6:	f042 0201 	orr.w	r2, r2, #1
1a00a7aa:	f8c8 3004 	str.w	r3, [r8, #4]
1a00a7ae:	604a      	str	r2, [r1, #4]
1a00a7b0:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00a7b4:	f043 0301 	orr.w	r3, r3, #1
1a00a7b8:	3108      	adds	r1, #8
1a00a7ba:	f8ca 3004 	str.w	r3, [sl, #4]
1a00a7be:	4648      	mov	r0, r9
1a00a7c0:	f7fb fd2a 	bl	1a006218 <_free_r>
1a00a7c4:	e7d4      	b.n	1a00a770 <_realloc_r+0x15c>
1a00a7c6:	f020 0003 	bic.w	r0, r0, #3
1a00a7ca:	1831      	adds	r1, r6, r0
1a00a7cc:	f104 0c10 	add.w	ip, r4, #16
1a00a7d0:	4561      	cmp	r1, ip
1a00a7d2:	da4f      	bge.n	1a00a874 <_realloc_r+0x260>
1a00a7d4:	f01e 0f01 	tst.w	lr, #1
1a00a7d8:	f47f af60 	bne.w	1a00a69c <_realloc_r+0x88>
1a00a7dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a00a7e0:	eba8 0b01 	sub.w	fp, r8, r1
1a00a7e4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00a7e8:	f021 0103 	bic.w	r1, r1, #3
1a00a7ec:	4408      	add	r0, r1
1a00a7ee:	eb00 0a06 	add.w	sl, r0, r6
1a00a7f2:	45d4      	cmp	ip, sl
1a00a7f4:	f73f af4f 	bgt.w	1a00a696 <_realloc_r+0x82>
1a00a7f8:	465f      	mov	r7, fp
1a00a7fa:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00a7fe:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a00a802:	1f32      	subs	r2, r6, #4
1a00a804:	2a24      	cmp	r2, #36	; 0x24
1a00a806:	60c1      	str	r1, [r0, #12]
1a00a808:	6088      	str	r0, [r1, #8]
1a00a80a:	f200 8099 	bhi.w	1a00a940 <_realloc_r+0x32c>
1a00a80e:	2a13      	cmp	r2, #19
1a00a810:	6829      	ldr	r1, [r5, #0]
1a00a812:	f240 8093 	bls.w	1a00a93c <_realloc_r+0x328>
1a00a816:	f8cb 1008 	str.w	r1, [fp, #8]
1a00a81a:	6869      	ldr	r1, [r5, #4]
1a00a81c:	f8cb 100c 	str.w	r1, [fp, #12]
1a00a820:	2a1b      	cmp	r2, #27
1a00a822:	68a9      	ldr	r1, [r5, #8]
1a00a824:	f200 8092 	bhi.w	1a00a94c <_realloc_r+0x338>
1a00a828:	f10b 0210 	add.w	r2, fp, #16
1a00a82c:	3508      	adds	r5, #8
1a00a82e:	6011      	str	r1, [r2, #0]
1a00a830:	6869      	ldr	r1, [r5, #4]
1a00a832:	6051      	str	r1, [r2, #4]
1a00a834:	68a9      	ldr	r1, [r5, #8]
1a00a836:	6091      	str	r1, [r2, #8]
1a00a838:	eb0b 0104 	add.w	r1, fp, r4
1a00a83c:	ebaa 0204 	sub.w	r2, sl, r4
1a00a840:	f042 0201 	orr.w	r2, r2, #1
1a00a844:	6099      	str	r1, [r3, #8]
1a00a846:	604a      	str	r2, [r1, #4]
1a00a848:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00a84c:	f003 0301 	and.w	r3, r3, #1
1a00a850:	431c      	orrs	r4, r3
1a00a852:	4648      	mov	r0, r9
1a00a854:	f8cb 4004 	str.w	r4, [fp, #4]
1a00a858:	f7fc f9d2 	bl	1a006c00 <__malloc_unlock>
1a00a85c:	e750      	b.n	1a00a700 <_realloc_r+0xec>
1a00a85e:	6001      	str	r1, [r0, #0]
1a00a860:	686b      	ldr	r3, [r5, #4]
1a00a862:	6043      	str	r3, [r0, #4]
1a00a864:	2a1b      	cmp	r2, #27
1a00a866:	d83c      	bhi.n	1a00a8e2 <_realloc_r+0x2ce>
1a00a868:	f105 0208 	add.w	r2, r5, #8
1a00a86c:	f100 0308 	add.w	r3, r0, #8
1a00a870:	68a9      	ldr	r1, [r5, #8]
1a00a872:	e72d      	b.n	1a00a6d0 <_realloc_r+0xbc>
1a00a874:	eb08 0004 	add.w	r0, r8, r4
1a00a878:	1b0a      	subs	r2, r1, r4
1a00a87a:	f042 0201 	orr.w	r2, r2, #1
1a00a87e:	6098      	str	r0, [r3, #8]
1a00a880:	6042      	str	r2, [r0, #4]
1a00a882:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00a886:	f003 0301 	and.w	r3, r3, #1
1a00a88a:	431c      	orrs	r4, r3
1a00a88c:	4648      	mov	r0, r9
1a00a88e:	f845 4c04 	str.w	r4, [r5, #-4]
1a00a892:	f7fc f9b5 	bl	1a006c00 <__malloc_unlock>
1a00a896:	462f      	mov	r7, r5
1a00a898:	e732      	b.n	1a00a700 <_realloc_r+0xec>
1a00a89a:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00a89e:	461e      	mov	r6, r3
1a00a8a0:	60ca      	str	r2, [r1, #12]
1a00a8a2:	eb08 0a03 	add.w	sl, r8, r3
1a00a8a6:	6091      	str	r1, [r2, #8]
1a00a8a8:	e752      	b.n	1a00a750 <_realloc_r+0x13c>
1a00a8aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a00a8ae:	f023 0303 	bic.w	r3, r3, #3
1a00a8b2:	441e      	add	r6, r3
1a00a8b4:	eb08 0a06 	add.w	sl, r8, r6
1a00a8b8:	e74a      	b.n	1a00a750 <_realloc_r+0x13c>
1a00a8ba:	4629      	mov	r1, r5
1a00a8bc:	f7ff fb38 	bl	1a009f30 <memmove>
1a00a8c0:	e70b      	b.n	1a00a6da <_realloc_r+0xc6>
1a00a8c2:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00a8c6:	465f      	mov	r7, fp
1a00a8c8:	60ca      	str	r2, [r1, #12]
1a00a8ca:	6091      	str	r1, [r2, #8]
1a00a8cc:	e71c      	b.n	1a00a708 <_realloc_r+0xf4>
1a00a8ce:	463a      	mov	r2, r7
1a00a8d0:	e736      	b.n	1a00a740 <_realloc_r+0x12c>
1a00a8d2:	4629      	mov	r1, r5
1a00a8d4:	4638      	mov	r0, r7
1a00a8d6:	461e      	mov	r6, r3
1a00a8d8:	46d8      	mov	r8, fp
1a00a8da:	f7ff fb29 	bl	1a009f30 <memmove>
1a00a8de:	463d      	mov	r5, r7
1a00a8e0:	e736      	b.n	1a00a750 <_realloc_r+0x13c>
1a00a8e2:	68ab      	ldr	r3, [r5, #8]
1a00a8e4:	6083      	str	r3, [r0, #8]
1a00a8e6:	68eb      	ldr	r3, [r5, #12]
1a00a8e8:	60c3      	str	r3, [r0, #12]
1a00a8ea:	2a24      	cmp	r2, #36	; 0x24
1a00a8ec:	d011      	beq.n	1a00a912 <_realloc_r+0x2fe>
1a00a8ee:	f105 0210 	add.w	r2, r5, #16
1a00a8f2:	f100 0310 	add.w	r3, r0, #16
1a00a8f6:	6929      	ldr	r1, [r5, #16]
1a00a8f8:	e6ea      	b.n	1a00a6d0 <_realloc_r+0xbc>
1a00a8fa:	f8cb 1010 	str.w	r1, [fp, #16]
1a00a8fe:	68e9      	ldr	r1, [r5, #12]
1a00a900:	f8cb 1014 	str.w	r1, [fp, #20]
1a00a904:	2a24      	cmp	r2, #36	; 0x24
1a00a906:	d00e      	beq.n	1a00a926 <_realloc_r+0x312>
1a00a908:	6929      	ldr	r1, [r5, #16]
1a00a90a:	f10b 0218 	add.w	r2, fp, #24
1a00a90e:	3510      	adds	r5, #16
1a00a910:	e716      	b.n	1a00a740 <_realloc_r+0x12c>
1a00a912:	692b      	ldr	r3, [r5, #16]
1a00a914:	6103      	str	r3, [r0, #16]
1a00a916:	696b      	ldr	r3, [r5, #20]
1a00a918:	6143      	str	r3, [r0, #20]
1a00a91a:	69a9      	ldr	r1, [r5, #24]
1a00a91c:	f105 0218 	add.w	r2, r5, #24
1a00a920:	f100 0318 	add.w	r3, r0, #24
1a00a924:	e6d4      	b.n	1a00a6d0 <_realloc_r+0xbc>
1a00a926:	692a      	ldr	r2, [r5, #16]
1a00a928:	f8cb 2018 	str.w	r2, [fp, #24]
1a00a92c:	696a      	ldr	r2, [r5, #20]
1a00a92e:	f8cb 201c 	str.w	r2, [fp, #28]
1a00a932:	69a9      	ldr	r1, [r5, #24]
1a00a934:	f10b 0220 	add.w	r2, fp, #32
1a00a938:	3518      	adds	r5, #24
1a00a93a:	e701      	b.n	1a00a740 <_realloc_r+0x12c>
1a00a93c:	463a      	mov	r2, r7
1a00a93e:	e776      	b.n	1a00a82e <_realloc_r+0x21a>
1a00a940:	4629      	mov	r1, r5
1a00a942:	4638      	mov	r0, r7
1a00a944:	f7ff faf4 	bl	1a009f30 <memmove>
1a00a948:	4b0c      	ldr	r3, [pc, #48]	; (1a00a97c <_realloc_r+0x368>)
1a00a94a:	e775      	b.n	1a00a838 <_realloc_r+0x224>
1a00a94c:	f8cb 1010 	str.w	r1, [fp, #16]
1a00a950:	68e9      	ldr	r1, [r5, #12]
1a00a952:	f8cb 1014 	str.w	r1, [fp, #20]
1a00a956:	2a24      	cmp	r2, #36	; 0x24
1a00a958:	d004      	beq.n	1a00a964 <_realloc_r+0x350>
1a00a95a:	6929      	ldr	r1, [r5, #16]
1a00a95c:	f10b 0218 	add.w	r2, fp, #24
1a00a960:	3510      	adds	r5, #16
1a00a962:	e764      	b.n	1a00a82e <_realloc_r+0x21a>
1a00a964:	692a      	ldr	r2, [r5, #16]
1a00a966:	f8cb 2018 	str.w	r2, [fp, #24]
1a00a96a:	696a      	ldr	r2, [r5, #20]
1a00a96c:	f8cb 201c 	str.w	r2, [fp, #28]
1a00a970:	69a9      	ldr	r1, [r5, #24]
1a00a972:	f10b 0220 	add.w	r2, fp, #32
1a00a976:	3518      	adds	r5, #24
1a00a978:	e759      	b.n	1a00a82e <_realloc_r+0x21a>
1a00a97a:	bf00      	nop
1a00a97c:	10000470 	.word	0x10000470

1a00a980 <frexp>:
1a00a980:	ec53 2b10 	vmov	r2, r3, d0
1a00a984:	b570      	push	{r4, r5, r6, lr}
1a00a986:	4e16      	ldr	r6, [pc, #88]	; (1a00a9e0 <frexp+0x60>)
1a00a988:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a00a98c:	2500      	movs	r5, #0
1a00a98e:	42b1      	cmp	r1, r6
1a00a990:	4604      	mov	r4, r0
1a00a992:	6005      	str	r5, [r0, #0]
1a00a994:	dc21      	bgt.n	1a00a9da <frexp+0x5a>
1a00a996:	ee10 6a10 	vmov	r6, s0
1a00a99a:	430e      	orrs	r6, r1
1a00a99c:	d01d      	beq.n	1a00a9da <frexp+0x5a>
1a00a99e:	4e11      	ldr	r6, [pc, #68]	; (1a00a9e4 <frexp+0x64>)
1a00a9a0:	401e      	ands	r6, r3
1a00a9a2:	4618      	mov	r0, r3
1a00a9a4:	b966      	cbnz	r6, 1a00a9c0 <frexp+0x40>
1a00a9a6:	4619      	mov	r1, r3
1a00a9a8:	2200      	movs	r2, #0
1a00a9aa:	ee10 0a10 	vmov	r0, s0
1a00a9ae:	4b0e      	ldr	r3, [pc, #56]	; (1a00a9e8 <frexp+0x68>)
1a00a9b0:	f7fa fdfe 	bl	1a0055b0 <__aeabi_dmul>
1a00a9b4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a00a9b8:	4602      	mov	r2, r0
1a00a9ba:	4608      	mov	r0, r1
1a00a9bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a00a9c0:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a00a9c4:	1509      	asrs	r1, r1, #20
1a00a9c6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a00a9ca:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a00a9ce:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a00a9d2:	4429      	add	r1, r5
1a00a9d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a00a9d8:	6021      	str	r1, [r4, #0]
1a00a9da:	ec43 2b10 	vmov	d0, r2, r3
1a00a9de:	bd70      	pop	{r4, r5, r6, pc}
1a00a9e0:	7fefffff 	.word	0x7fefffff
1a00a9e4:	7ff00000 	.word	0x7ff00000
1a00a9e8:	43500000 	.word	0x43500000

1a00a9ec <strncpy>:
1a00a9ec:	b470      	push	{r4, r5, r6}
1a00a9ee:	ea40 0401 	orr.w	r4, r0, r1
1a00a9f2:	07a3      	lsls	r3, r4, #30
1a00a9f4:	d127      	bne.n	1a00aa46 <strncpy+0x5a>
1a00a9f6:	2a03      	cmp	r2, #3
1a00a9f8:	d925      	bls.n	1a00aa46 <strncpy+0x5a>
1a00a9fa:	460b      	mov	r3, r1
1a00a9fc:	4606      	mov	r6, r0
1a00a9fe:	4619      	mov	r1, r3
1a00aa00:	f853 5b04 	ldr.w	r5, [r3], #4
1a00aa04:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a00aa08:	ea24 0405 	bic.w	r4, r4, r5
1a00aa0c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a00aa10:	d106      	bne.n	1a00aa20 <strncpy+0x34>
1a00aa12:	3a04      	subs	r2, #4
1a00aa14:	2a03      	cmp	r2, #3
1a00aa16:	f846 5b04 	str.w	r5, [r6], #4
1a00aa1a:	4619      	mov	r1, r3
1a00aa1c:	d8ef      	bhi.n	1a00a9fe <strncpy+0x12>
1a00aa1e:	b182      	cbz	r2, 1a00aa42 <strncpy+0x56>
1a00aa20:	4633      	mov	r3, r6
1a00aa22:	780c      	ldrb	r4, [r1, #0]
1a00aa24:	f803 4b01 	strb.w	r4, [r3], #1
1a00aa28:	1e55      	subs	r5, r2, #1
1a00aa2a:	b174      	cbz	r4, 1a00aa4a <strncpy+0x5e>
1a00aa2c:	4432      	add	r2, r6
1a00aa2e:	442e      	add	r6, r5
1a00aa30:	e005      	b.n	1a00aa3e <strncpy+0x52>
1a00aa32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a00aa36:	1af5      	subs	r5, r6, r3
1a00aa38:	f803 4b01 	strb.w	r4, [r3], #1
1a00aa3c:	b12c      	cbz	r4, 1a00aa4a <strncpy+0x5e>
1a00aa3e:	429a      	cmp	r2, r3
1a00aa40:	d1f7      	bne.n	1a00aa32 <strncpy+0x46>
1a00aa42:	bc70      	pop	{r4, r5, r6}
1a00aa44:	4770      	bx	lr
1a00aa46:	4606      	mov	r6, r0
1a00aa48:	e7e9      	b.n	1a00aa1e <strncpy+0x32>
1a00aa4a:	2d00      	cmp	r5, #0
1a00aa4c:	d0f9      	beq.n	1a00aa42 <strncpy+0x56>
1a00aa4e:	441d      	add	r5, r3
1a00aa50:	2200      	movs	r2, #0
1a00aa52:	f803 2b01 	strb.w	r2, [r3], #1
1a00aa56:	42ab      	cmp	r3, r5
1a00aa58:	d1fb      	bne.n	1a00aa52 <strncpy+0x66>
1a00aa5a:	bc70      	pop	{r4, r5, r6}
1a00aa5c:	4770      	bx	lr
1a00aa5e:	bf00      	nop

1a00aa60 <__sprint_r.part.0>:
1a00aa60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00aa64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a00aa66:	049c      	lsls	r4, r3, #18
1a00aa68:	4693      	mov	fp, r2
1a00aa6a:	d52d      	bpl.n	1a00aac8 <__sprint_r.part.0+0x68>
1a00aa6c:	6893      	ldr	r3, [r2, #8]
1a00aa6e:	6812      	ldr	r2, [r2, #0]
1a00aa70:	b343      	cbz	r3, 1a00aac4 <__sprint_r.part.0+0x64>
1a00aa72:	460e      	mov	r6, r1
1a00aa74:	4607      	mov	r7, r0
1a00aa76:	f102 0908 	add.w	r9, r2, #8
1a00aa7a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
1a00aa7e:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a00aa82:	d015      	beq.n	1a00aab0 <__sprint_r.part.0+0x50>
1a00aa84:	3d04      	subs	r5, #4
1a00aa86:	2400      	movs	r4, #0
1a00aa88:	e001      	b.n	1a00aa8e <__sprint_r.part.0+0x2e>
1a00aa8a:	45a0      	cmp	r8, r4
1a00aa8c:	d00e      	beq.n	1a00aaac <__sprint_r.part.0+0x4c>
1a00aa8e:	4632      	mov	r2, r6
1a00aa90:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a00aa94:	4638      	mov	r0, r7
1a00aa96:	f000 f8a9 	bl	1a00abec <_fputwc_r>
1a00aa9a:	1c43      	adds	r3, r0, #1
1a00aa9c:	f104 0401 	add.w	r4, r4, #1
1a00aaa0:	d1f3      	bne.n	1a00aa8a <__sprint_r.part.0+0x2a>
1a00aaa2:	2300      	movs	r3, #0
1a00aaa4:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a00aaa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00aaac:	f8db 3008 	ldr.w	r3, [fp, #8]
1a00aab0:	f02a 0a03 	bic.w	sl, sl, #3
1a00aab4:	eba3 030a 	sub.w	r3, r3, sl
1a00aab8:	f8cb 3008 	str.w	r3, [fp, #8]
1a00aabc:	f109 0908 	add.w	r9, r9, #8
1a00aac0:	2b00      	cmp	r3, #0
1a00aac2:	d1da      	bne.n	1a00aa7a <__sprint_r.part.0+0x1a>
1a00aac4:	2000      	movs	r0, #0
1a00aac6:	e7ec      	b.n	1a00aaa2 <__sprint_r.part.0+0x42>
1a00aac8:	f7fe ffdc 	bl	1a009a84 <__sfvwrite_r>
1a00aacc:	2300      	movs	r3, #0
1a00aace:	e9cb 3301 	strd	r3, r3, [fp, #4]
1a00aad2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00aad6:	bf00      	nop

1a00aad8 <__sprint_r>:
1a00aad8:	6893      	ldr	r3, [r2, #8]
1a00aada:	b10b      	cbz	r3, 1a00aae0 <__sprint_r+0x8>
1a00aadc:	f7ff bfc0 	b.w	1a00aa60 <__sprint_r.part.0>
1a00aae0:	b410      	push	{r4}
1a00aae2:	4618      	mov	r0, r3
1a00aae4:	6053      	str	r3, [r2, #4]
1a00aae6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00aaea:	4770      	bx	lr

1a00aaec <_calloc_r>:
1a00aaec:	b510      	push	{r4, lr}
1a00aaee:	fb02 f101 	mul.w	r1, r2, r1
1a00aaf2:	f7fb fcdd 	bl	1a0064b0 <_malloc_r>
1a00aaf6:	4604      	mov	r4, r0
1a00aaf8:	b168      	cbz	r0, 1a00ab16 <_calloc_r+0x2a>
1a00aafa:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00aafe:	f022 0203 	bic.w	r2, r2, #3
1a00ab02:	3a04      	subs	r2, #4
1a00ab04:	2a24      	cmp	r2, #36	; 0x24
1a00ab06:	d818      	bhi.n	1a00ab3a <_calloc_r+0x4e>
1a00ab08:	2a13      	cmp	r2, #19
1a00ab0a:	d806      	bhi.n	1a00ab1a <_calloc_r+0x2e>
1a00ab0c:	4602      	mov	r2, r0
1a00ab0e:	2300      	movs	r3, #0
1a00ab10:	e9c2 3300 	strd	r3, r3, [r2]
1a00ab14:	6093      	str	r3, [r2, #8]
1a00ab16:	4620      	mov	r0, r4
1a00ab18:	bd10      	pop	{r4, pc}
1a00ab1a:	2300      	movs	r3, #0
1a00ab1c:	2a1b      	cmp	r2, #27
1a00ab1e:	e9c0 3300 	strd	r3, r3, [r0]
1a00ab22:	d90f      	bls.n	1a00ab44 <_calloc_r+0x58>
1a00ab24:	2a24      	cmp	r2, #36	; 0x24
1a00ab26:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a00ab2a:	bf12      	itee	ne
1a00ab2c:	f100 0210 	addne.w	r2, r0, #16
1a00ab30:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a00ab34:	f100 0218 	addeq.w	r2, r0, #24
1a00ab38:	e7e9      	b.n	1a00ab0e <_calloc_r+0x22>
1a00ab3a:	2100      	movs	r1, #0
1a00ab3c:	f7fc f80a 	bl	1a006b54 <memset>
1a00ab40:	4620      	mov	r0, r4
1a00ab42:	bd10      	pop	{r4, pc}
1a00ab44:	f100 0208 	add.w	r2, r0, #8
1a00ab48:	e7e1      	b.n	1a00ab0e <_calloc_r+0x22>
1a00ab4a:	bf00      	nop

1a00ab4c <__fputwc>:
1a00ab4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00ab50:	b082      	sub	sp, #8
1a00ab52:	4680      	mov	r8, r0
1a00ab54:	4689      	mov	r9, r1
1a00ab56:	4614      	mov	r4, r2
1a00ab58:	f000 f87a 	bl	1a00ac50 <__locale_mb_cur_max>
1a00ab5c:	2801      	cmp	r0, #1
1a00ab5e:	d103      	bne.n	1a00ab68 <__fputwc+0x1c>
1a00ab60:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a00ab64:	2bfe      	cmp	r3, #254	; 0xfe
1a00ab66:	d933      	bls.n	1a00abd0 <__fputwc+0x84>
1a00ab68:	464a      	mov	r2, r9
1a00ab6a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a00ab6e:	a901      	add	r1, sp, #4
1a00ab70:	4640      	mov	r0, r8
1a00ab72:	f000 f8e1 	bl	1a00ad38 <_wcrtomb_r>
1a00ab76:	1c42      	adds	r2, r0, #1
1a00ab78:	4606      	mov	r6, r0
1a00ab7a:	d02f      	beq.n	1a00abdc <__fputwc+0x90>
1a00ab7c:	b320      	cbz	r0, 1a00abc8 <__fputwc+0x7c>
1a00ab7e:	f89d c004 	ldrb.w	ip, [sp, #4]
1a00ab82:	2500      	movs	r5, #0
1a00ab84:	f10d 0a04 	add.w	sl, sp, #4
1a00ab88:	e009      	b.n	1a00ab9e <__fputwc+0x52>
1a00ab8a:	6823      	ldr	r3, [r4, #0]
1a00ab8c:	1c5a      	adds	r2, r3, #1
1a00ab8e:	6022      	str	r2, [r4, #0]
1a00ab90:	f883 c000 	strb.w	ip, [r3]
1a00ab94:	3501      	adds	r5, #1
1a00ab96:	42b5      	cmp	r5, r6
1a00ab98:	d216      	bcs.n	1a00abc8 <__fputwc+0x7c>
1a00ab9a:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a00ab9e:	68a3      	ldr	r3, [r4, #8]
1a00aba0:	3b01      	subs	r3, #1
1a00aba2:	2b00      	cmp	r3, #0
1a00aba4:	60a3      	str	r3, [r4, #8]
1a00aba6:	daf0      	bge.n	1a00ab8a <__fputwc+0x3e>
1a00aba8:	69a7      	ldr	r7, [r4, #24]
1a00abaa:	42bb      	cmp	r3, r7
1a00abac:	4661      	mov	r1, ip
1a00abae:	4622      	mov	r2, r4
1a00abb0:	4640      	mov	r0, r8
1a00abb2:	db02      	blt.n	1a00abba <__fputwc+0x6e>
1a00abb4:	f1bc 0f0a 	cmp.w	ip, #10
1a00abb8:	d1e7      	bne.n	1a00ab8a <__fputwc+0x3e>
1a00abba:	f000 f865 	bl	1a00ac88 <__swbuf_r>
1a00abbe:	1c43      	adds	r3, r0, #1
1a00abc0:	d1e8      	bne.n	1a00ab94 <__fputwc+0x48>
1a00abc2:	b002      	add	sp, #8
1a00abc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00abc8:	4648      	mov	r0, r9
1a00abca:	b002      	add	sp, #8
1a00abcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00abd0:	fa5f fc89 	uxtb.w	ip, r9
1a00abd4:	4606      	mov	r6, r0
1a00abd6:	f88d c004 	strb.w	ip, [sp, #4]
1a00abda:	e7d2      	b.n	1a00ab82 <__fputwc+0x36>
1a00abdc:	89a3      	ldrh	r3, [r4, #12]
1a00abde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00abe2:	81a3      	strh	r3, [r4, #12]
1a00abe4:	b002      	add	sp, #8
1a00abe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00abea:	bf00      	nop

1a00abec <_fputwc_r>:
1a00abec:	b530      	push	{r4, r5, lr}
1a00abee:	4605      	mov	r5, r0
1a00abf0:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a00abf2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a00abf6:	07c0      	lsls	r0, r0, #31
1a00abf8:	4614      	mov	r4, r2
1a00abfa:	b083      	sub	sp, #12
1a00abfc:	b29a      	uxth	r2, r3
1a00abfe:	d401      	bmi.n	1a00ac04 <_fputwc_r+0x18>
1a00ac00:	0590      	lsls	r0, r2, #22
1a00ac02:	d51c      	bpl.n	1a00ac3e <_fputwc_r+0x52>
1a00ac04:	0490      	lsls	r0, r2, #18
1a00ac06:	d406      	bmi.n	1a00ac16 <_fputwc_r+0x2a>
1a00ac08:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00ac0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00ac0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00ac12:	81a3      	strh	r3, [r4, #12]
1a00ac14:	6662      	str	r2, [r4, #100]	; 0x64
1a00ac16:	4628      	mov	r0, r5
1a00ac18:	4622      	mov	r2, r4
1a00ac1a:	f7ff ff97 	bl	1a00ab4c <__fputwc>
1a00ac1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00ac20:	07da      	lsls	r2, r3, #31
1a00ac22:	4605      	mov	r5, r0
1a00ac24:	d402      	bmi.n	1a00ac2c <_fputwc_r+0x40>
1a00ac26:	89a3      	ldrh	r3, [r4, #12]
1a00ac28:	059b      	lsls	r3, r3, #22
1a00ac2a:	d502      	bpl.n	1a00ac32 <_fputwc_r+0x46>
1a00ac2c:	4628      	mov	r0, r5
1a00ac2e:	b003      	add	sp, #12
1a00ac30:	bd30      	pop	{r4, r5, pc}
1a00ac32:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00ac34:	f7fb fc3a 	bl	1a0064ac <__retarget_lock_release_recursive>
1a00ac38:	4628      	mov	r0, r5
1a00ac3a:	b003      	add	sp, #12
1a00ac3c:	bd30      	pop	{r4, r5, pc}
1a00ac3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00ac40:	9101      	str	r1, [sp, #4]
1a00ac42:	f7fb fc31 	bl	1a0064a8 <__retarget_lock_acquire_recursive>
1a00ac46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00ac4a:	9901      	ldr	r1, [sp, #4]
1a00ac4c:	b29a      	uxth	r2, r3
1a00ac4e:	e7d9      	b.n	1a00ac04 <_fputwc_r+0x18>

1a00ac50 <__locale_mb_cur_max>:
1a00ac50:	4b01      	ldr	r3, [pc, #4]	; (1a00ac58 <__locale_mb_cur_max+0x8>)
1a00ac52:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a00ac56:	4770      	bx	lr
1a00ac58:	10000880 	.word	0x10000880

1a00ac5c <__ascii_mbtowc>:
1a00ac5c:	b082      	sub	sp, #8
1a00ac5e:	b149      	cbz	r1, 1a00ac74 <__ascii_mbtowc+0x18>
1a00ac60:	b15a      	cbz	r2, 1a00ac7a <__ascii_mbtowc+0x1e>
1a00ac62:	b16b      	cbz	r3, 1a00ac80 <__ascii_mbtowc+0x24>
1a00ac64:	7813      	ldrb	r3, [r2, #0]
1a00ac66:	600b      	str	r3, [r1, #0]
1a00ac68:	7812      	ldrb	r2, [r2, #0]
1a00ac6a:	1c10      	adds	r0, r2, #0
1a00ac6c:	bf18      	it	ne
1a00ac6e:	2001      	movne	r0, #1
1a00ac70:	b002      	add	sp, #8
1a00ac72:	4770      	bx	lr
1a00ac74:	a901      	add	r1, sp, #4
1a00ac76:	2a00      	cmp	r2, #0
1a00ac78:	d1f3      	bne.n	1a00ac62 <__ascii_mbtowc+0x6>
1a00ac7a:	4610      	mov	r0, r2
1a00ac7c:	b002      	add	sp, #8
1a00ac7e:	4770      	bx	lr
1a00ac80:	f06f 0001 	mvn.w	r0, #1
1a00ac84:	e7f4      	b.n	1a00ac70 <__ascii_mbtowc+0x14>
1a00ac86:	bf00      	nop

1a00ac88 <__swbuf_r>:
1a00ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00ac8a:	460d      	mov	r5, r1
1a00ac8c:	4614      	mov	r4, r2
1a00ac8e:	4606      	mov	r6, r0
1a00ac90:	b110      	cbz	r0, 1a00ac98 <__swbuf_r+0x10>
1a00ac92:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00ac94:	2b00      	cmp	r3, #0
1a00ac96:	d043      	beq.n	1a00ad20 <__swbuf_r+0x98>
1a00ac98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00ac9c:	69a3      	ldr	r3, [r4, #24]
1a00ac9e:	60a3      	str	r3, [r4, #8]
1a00aca0:	b291      	uxth	r1, r2
1a00aca2:	0708      	lsls	r0, r1, #28
1a00aca4:	d51b      	bpl.n	1a00acde <__swbuf_r+0x56>
1a00aca6:	6923      	ldr	r3, [r4, #16]
1a00aca8:	b1cb      	cbz	r3, 1a00acde <__swbuf_r+0x56>
1a00acaa:	b2ed      	uxtb	r5, r5
1a00acac:	0489      	lsls	r1, r1, #18
1a00acae:	462f      	mov	r7, r5
1a00acb0:	d522      	bpl.n	1a00acf8 <__swbuf_r+0x70>
1a00acb2:	6822      	ldr	r2, [r4, #0]
1a00acb4:	6961      	ldr	r1, [r4, #20]
1a00acb6:	1ad3      	subs	r3, r2, r3
1a00acb8:	4299      	cmp	r1, r3
1a00acba:	dd29      	ble.n	1a00ad10 <__swbuf_r+0x88>
1a00acbc:	3301      	adds	r3, #1
1a00acbe:	68a1      	ldr	r1, [r4, #8]
1a00acc0:	1c50      	adds	r0, r2, #1
1a00acc2:	3901      	subs	r1, #1
1a00acc4:	60a1      	str	r1, [r4, #8]
1a00acc6:	6020      	str	r0, [r4, #0]
1a00acc8:	7015      	strb	r5, [r2, #0]
1a00acca:	6962      	ldr	r2, [r4, #20]
1a00accc:	429a      	cmp	r2, r3
1a00acce:	d02a      	beq.n	1a00ad26 <__swbuf_r+0x9e>
1a00acd0:	89a3      	ldrh	r3, [r4, #12]
1a00acd2:	07db      	lsls	r3, r3, #31
1a00acd4:	d501      	bpl.n	1a00acda <__swbuf_r+0x52>
1a00acd6:	2d0a      	cmp	r5, #10
1a00acd8:	d025      	beq.n	1a00ad26 <__swbuf_r+0x9e>
1a00acda:	4638      	mov	r0, r7
1a00acdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00acde:	4621      	mov	r1, r4
1a00ace0:	4630      	mov	r0, r6
1a00ace2:	f7fd fea9 	bl	1a008a38 <__swsetup_r>
1a00ace6:	bb20      	cbnz	r0, 1a00ad32 <__swbuf_r+0xaa>
1a00ace8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00acec:	6923      	ldr	r3, [r4, #16]
1a00acee:	b291      	uxth	r1, r2
1a00acf0:	b2ed      	uxtb	r5, r5
1a00acf2:	0489      	lsls	r1, r1, #18
1a00acf4:	462f      	mov	r7, r5
1a00acf6:	d4dc      	bmi.n	1a00acb2 <__swbuf_r+0x2a>
1a00acf8:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a00acfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00acfe:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a00ad02:	81a2      	strh	r2, [r4, #12]
1a00ad04:	6822      	ldr	r2, [r4, #0]
1a00ad06:	6661      	str	r1, [r4, #100]	; 0x64
1a00ad08:	6961      	ldr	r1, [r4, #20]
1a00ad0a:	1ad3      	subs	r3, r2, r3
1a00ad0c:	4299      	cmp	r1, r3
1a00ad0e:	dcd5      	bgt.n	1a00acbc <__swbuf_r+0x34>
1a00ad10:	4621      	mov	r1, r4
1a00ad12:	4630      	mov	r0, r6
1a00ad14:	f7fb f99e 	bl	1a006054 <_fflush_r>
1a00ad18:	b958      	cbnz	r0, 1a00ad32 <__swbuf_r+0xaa>
1a00ad1a:	6822      	ldr	r2, [r4, #0]
1a00ad1c:	2301      	movs	r3, #1
1a00ad1e:	e7ce      	b.n	1a00acbe <__swbuf_r+0x36>
1a00ad20:	f7fb f9f4 	bl	1a00610c <__sinit>
1a00ad24:	e7b8      	b.n	1a00ac98 <__swbuf_r+0x10>
1a00ad26:	4621      	mov	r1, r4
1a00ad28:	4630      	mov	r0, r6
1a00ad2a:	f7fb f993 	bl	1a006054 <_fflush_r>
1a00ad2e:	2800      	cmp	r0, #0
1a00ad30:	d0d3      	beq.n	1a00acda <__swbuf_r+0x52>
1a00ad32:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00ad36:	e7d0      	b.n	1a00acda <__swbuf_r+0x52>

1a00ad38 <_wcrtomb_r>:
1a00ad38:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00ad3a:	4c0b      	ldr	r4, [pc, #44]	; (1a00ad68 <_wcrtomb_r+0x30>)
1a00ad3c:	b085      	sub	sp, #20
1a00ad3e:	4606      	mov	r6, r0
1a00ad40:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a00ad44:	461f      	mov	r7, r3
1a00ad46:	b121      	cbz	r1, 1a00ad52 <_wcrtomb_r+0x1a>
1a00ad48:	47a0      	blx	r4
1a00ad4a:	1c43      	adds	r3, r0, #1
1a00ad4c:	d006      	beq.n	1a00ad5c <_wcrtomb_r+0x24>
1a00ad4e:	b005      	add	sp, #20
1a00ad50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00ad52:	460a      	mov	r2, r1
1a00ad54:	a901      	add	r1, sp, #4
1a00ad56:	47a0      	blx	r4
1a00ad58:	1c43      	adds	r3, r0, #1
1a00ad5a:	d1f8      	bne.n	1a00ad4e <_wcrtomb_r+0x16>
1a00ad5c:	2200      	movs	r2, #0
1a00ad5e:	238a      	movs	r3, #138	; 0x8a
1a00ad60:	603a      	str	r2, [r7, #0]
1a00ad62:	6033      	str	r3, [r6, #0]
1a00ad64:	b005      	add	sp, #20
1a00ad66:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00ad68:	10000880 	.word	0x10000880

1a00ad6c <__ascii_wctomb>:
1a00ad6c:	b149      	cbz	r1, 1a00ad82 <__ascii_wctomb+0x16>
1a00ad6e:	2aff      	cmp	r2, #255	; 0xff
1a00ad70:	d802      	bhi.n	1a00ad78 <__ascii_wctomb+0xc>
1a00ad72:	700a      	strb	r2, [r1, #0]
1a00ad74:	2001      	movs	r0, #1
1a00ad76:	4770      	bx	lr
1a00ad78:	238a      	movs	r3, #138	; 0x8a
1a00ad7a:	6003      	str	r3, [r0, #0]
1a00ad7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00ad80:	4770      	bx	lr
1a00ad82:	4608      	mov	r0, r1
1a00ad84:	4770      	bx	lr
1a00ad86:	bf00      	nop

1a00ad88 <__aeabi_dcmpun>:
1a00ad88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00ad8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00ad90:	d102      	bne.n	1a00ad98 <__aeabi_dcmpun+0x10>
1a00ad92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00ad96:	d10a      	bne.n	1a00adae <__aeabi_dcmpun+0x26>
1a00ad98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00ad9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00ada0:	d102      	bne.n	1a00ada8 <__aeabi_dcmpun+0x20>
1a00ada2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00ada6:	d102      	bne.n	1a00adae <__aeabi_dcmpun+0x26>
1a00ada8:	f04f 0000 	mov.w	r0, #0
1a00adac:	4770      	bx	lr
1a00adae:	f04f 0001 	mov.w	r0, #1
1a00adb2:	4770      	bx	lr

1a00adb4 <keys_config>:
1a00adb4:	2524 2726 6174 6b73 745f 6365 616c 0031     $%&'task_tecla1.
1a00adc4:	6174 6b73 745f 6365 616c 0032 6174 6b73     task_tecla2.task
1a00add4:	745f 6365 616c 0033 6174 6b73 745f 6365     _tecla3.task_tec
1a00ade4:	616c 0034 6a45 7265 6963 6963 206f 3246     la4.Ejercicio F2
1a00adf4:	0000 0000 6174 6b73 6c5f 6465 0031 0000     ....task_led1...
1a00ae04:	6174 6b73 6c5f 6465 0032 0000 6174 6b73     task_led2...task
1a00ae14:	6c5f 6465 0033 0000 6174 6b73 6c5f 6465     _led3...task_led
1a00ae24:	0034 0000 614d 6c6c 636f 4620 6961 656c     4...Malloc Faile
1a00ae34:	2064 6f48 6b6f 0021 0a0d 4176 7373 7265     d Hook!...vAsser
1a00ae44:	4374 6c61 656c 2864 0d29 200a 2020 4c4c     tCalled()..   LL
1a00ae54:	6e69 2065 754e 626d 7265 3d20 2520 0d64     ine Number = %d.
1a00ae64:	200a 2020 6946 656c 4e20 6d61 2065 203d     .   File Name = 
1a00ae74:	7325 0a0d 0a0d 0000 7041 6c70 6369 7461     %s......Applicat
1a00ae84:	6f69 206e 614d 6c6c 636f 4620 6961 656c     ion Malloc Faile
1a00ae94:	2064 6f48 6b6f 0d21 0000 0000 696c 7362     d Hook!.....libs
1a00aea4:	662f 6572 7265 6f74 2f73 6f73 7275 6563     /freertos/source
1a00aeb4:	682f 6f6f 736b 632e 0000 0000 0a0d 7041     /hooks.c......Ap
1a00aec4:	6c70 6369 7461 6f69 206e 7453 6361 206b     plication Stack 
1a00aed4:	764f 7265 6c66 776f 2121 6f20 206e 6154     Overflow!! on Ta
1a00aee4:	6b73 203a 7325 0a0d 0000 0000 7041 6c70     sk: %s......Appl
1a00aef4:	6369 7461 6f69 206e 6954 6b63 4820 6f6f     ication Tick Hoo
1a00af04:	216b 000d 4449 454c ff00 ffff               k!..IDLE....

1a00af10 <ExtRateIn>:
1a00af10:	0000 0000                                   ....

1a00af14 <OscRateIn>:
1a00af14:	1b00 00b7                                   ....

1a00af18 <GpioLeds>:
1a00af18:	0005 0105 0205 0e00 0b01 0c01               ............

1a00af24 <GpioButtons>:
1a00af24:	0400 0800 0900 0901                         ........

1a00af2c <GpioPorts>:
1a00af2c:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a00af3c:	0802 ffff                                   ....

1a00af40 <InitClkStates>:
1a00af40:	0f01 0101                                   ....

1a00af44 <pinmuxing>:
1a00af44:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a00af54:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a00af64:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a00af74:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a00af84:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a00af94:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a00afa4:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a00afb4:	0206 0057                                   ..W.

1a00afb8 <UART_PClock>:
1a00afb8:	0081 0082 00a1 00a2                         ........

1a00afc0 <UART_BClock>:
1a00afc0:	01c2 01a2 0182 0162                         ......b.

1a00afc8 <periph_to_base>:
1a00afc8:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a00afd8:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a00afe8:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a00aff8:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a00b008:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a00b018:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a00b028:	0222 0222 000d 0223 0223 001c 0201 0804     "."...#.#.......
1a00b038:	0f03 0f0f 00ff ffff                         ........

1a00b040 <InitClkStates>:
1a00b040:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a00b050:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a00b060:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a00b070:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a00b080:	111a 0001 111b 0001                         ........

1a00b088 <gpioPinsInit>:
1a00b088:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a00b098:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a00b0a8:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a00b0b8:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a00b0c8:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a00b0d8:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a00b0e8:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a00b0f8:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a00b108:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a00b118:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a00b128:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a00b138:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a00b148:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a00b158:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a00b168:	020b 000c 0c01 ffff                         ........

1a00b170 <_ctype_>:
1a00b170:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
1a00b180:	2020 2020 2020 2020 2020 2020 2020 2020                     
1a00b190:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
1a00b1a0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
1a00b1b0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
1a00b1c0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
1a00b1d0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
1a00b1e0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
1a00b1f0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
1a00b270:	ff00 ffff 000a ffff 4e49 0046 6e69 0066     ........INF.inf.
1a00b280:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
1a00b290:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
1a00b2a0:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
1a00b2b0:	6e28 6c75 296c 0000 0030 ffff               (null)..0...

1a00b2bc <blanks.8693>:
1a00b2bc:	2020 2020 2020 2020 2020 2020 2020 2020                     

1a00b2cc <zeroes.8694>:
1a00b2cc:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
1a00b2dc:	614e 004e 6e49 6966 696e 7974 ff00 ffff     NaN.Infinity....
1a00b2ec:	ffff ffff                                   ....

1a00b2f0 <__mprec_bigtens>:
1a00b2f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
1a00b300:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
1a00b310:	bf3c 7f73 4fdd 7515                         <.s..O.u

1a00b318 <__mprec_tens>:
1a00b318:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
1a00b328:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
1a00b338:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
1a00b348:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
1a00b358:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
1a00b368:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
1a00b378:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
1a00b388:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
1a00b398:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
1a00b3a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
1a00b3b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
1a00b3c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
1a00b3d8:	9db4 79d9 7843 44ea                         ...yCx.D

1a00b3e0 <p05.7442>:
1a00b3e0:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
1a00b3f0:	4f50 4953 0058 ffff 002e 0000               POSIX.......
